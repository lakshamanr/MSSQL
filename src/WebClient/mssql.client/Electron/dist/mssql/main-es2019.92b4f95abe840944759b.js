(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{0:function(e,r,t){e.exports=t("zUnb")},"1dAZ":function(e,r,t){"use strict";t.r(r),r.default='<amexio-accordion [multi-open]="true">\r\n  \x3c!-- Table Information --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table: {{tableName}}" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="cell">\r\n        <h5>\r\n          <img src="./assets/icons/Table.png" style="width: 30px !important;" />\r\n          {{tableName}}\r\n        </h5>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Extended Properties --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table Extended Properties" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Extended Properties Name</div>\r\n        <div class="cell">Extended Properties Value</div>\r\n        <div class="cell">Extended Properties of Table</div>\r\n        <div *ngIf="hasEditPermission" class="cell">Actions</div>\r\n      </div>\r\n      <div *ngFor="let description of descriptions" class="row">\r\n        <div class="cell">{{description.name}}</div>\r\n        <div class="cell">{{description.value}}</div>\r\n        <div class="cell">{{description.table}}</div>\r\n        <div *ngIf="hasEditPermission" class="cell">\r\n          <button type="button" (click)="editDescription(description)" pButton icon="pi pi-pencil"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Objects Dependency Tree --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Objects Dependency Tree" [gradient]="true" [active]="true">\r\n    <p-tree [value]="filesTree" layout="horizontal" selectionMode="single"></p-tree>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Table Index Fragmentation --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table Index Fragmentation" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Index Name</div>\r\n      </div>\r\n      <div *ngFor="let Property of tableFragmentations" class="row">\r\n        <div class="cell">\r\n          {{Property.indexName}}\r\n          <progress-bar [progress]="Property.percentFragmented" [color-degraded]="{\'0\': \'green\', \'50\': \'red\'}"></progress-bar>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Table Properties --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table Properties" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Property</div>\r\n        <div class="cell">Value</div>\r\n      </div>\r\n      <div *ngFor="let property of properties" class="row">\r\n        <div class="cell">{{property.name}}</div>\r\n        <div class="cell">{{property.value}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Table Columns --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table Columns" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n\r\n        <div class="cell">Name</div> \r\n        <div class="cell">Data Type</div>\r\n        <div class="cell">Key</div>\r\n        <div class="cell">Max Length (Bytes)</div>\r\n        <div class="cell">Is Nullable</div>\r\n        <div class="cell">Identity</div>\r\n        <div class="cell">Default</div>\r\n        <div class="cell">Description</div>\r\n        <div *ngIf="hasEditPermission" class="cell">Actions</div>\r\n      </div>\r\n      <div *ngFor="let column of columns" class="row">\r\n        <div class="cell">{{column.columnName}}</div>\r\n        <div class="cell">{{column.dataType}}</div>\r\n        <div class="cell">{{column.key}}</div>\r\n        <div class="cell">{{column.maxLength}}</div>\r\n        <div class="cell">{{column.allowNulls}}</div>\r\n        <div class="cell">{{column.identity}}</div>\r\n        <div class="cell">{{column.default}}</div>\r\n        <div class="cell">{{column.description}}</div>\r\n        <div *ngIf="hasEditPermission" class="cell">\r\n          <button *ngIf="hasEditPermission" pButton type="button" icon="pi pi-pencil" (click)="editColumnDescription(column)"></button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Table Indices --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table Indices" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Name</div>\r\n        <div class="cell">Columns Name</div>\r\n        <div class="cell">Index Type</div>\r\n      </div>\r\n      <div *ngFor="let index of indices" class="row">\r\n        <div class="cell">{{index.indexName}}</div>\r\n        <div class="cell">{{index.columns}}</div>\r\n        <div class="cell">{{index.indexType}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Table Key Constraints --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table Key Constraints" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Table View</div>\r\n        <div class="cell">Object Type</div>\r\n        <div class="cell">Constraint Type</div>\r\n        <div class="cell">Constraint Name</div>\r\n        <div class="cell">Details</div>\r\n      </div>\r\n      <div *ngFor="let constraint of tableconstraint" class="row">\r\n        <div class="cell">{{constraint.table_view}}</div>\r\n        <div class="cell">{{constraint.object_type}}</div>\r\n        <div class="cell">{{constraint.constraint_type}}</div>\r\n        <div class="cell">{{constraint.constraint_name}}</div>\r\n        <div class="cell">{{constraint.details}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  \x3c!-- Table Script --\x3e\r\n  \x3c!-- <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Table Script" [gradient]="true" [active]="true">\r\n    <app-sql-script-viewer [script]="createScript.script"></app-sql-script-viewer>\r\n  </amexio-accordion-tab> --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Create Script" [gradient]="true" [active]="true">\r\n    <div class="code-container">\r\n      <ngx-prism *ngIf="createScript.script">\r\n        {{ createScript.script }}\r\n      </ngx-prism>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n</amexio-accordion>\r\n<div *ngIf="hasEditPermission">\r\n  <app-edit-description-dialog\r\n  [displayDialog]="displayDialog"\r\n  [selectedDescription]="selectedDescription"\r\n  [hasEditPermission]="hasEditPermission"\r\n  (save)="saveDescription()"\r\n  (cancel)="cancelEdit()">\r\n</app-edit-description-dialog>\r\n\r\n<app-edit-column-description-dialog\r\n  [displayColumnDialog]="displayColumnDialog"\r\n  [selectedColumn]="selectedColumn"\r\n  (saveColumnDescription)="saveColumnDescription()"\r\n  (cancelColumnEdit)="cancelColumnEdit()">\r\n</app-edit-column-description-dialog>\r\n\r\n</div>\r\n'},"1wH8":function(e,r,t){"use strict";t.r(r),r.default='<select [(ngModel)]="selectedDatabase">\n    <option value="AdventureWorks2022">AdventureWorks2022</option>\n    <option value="MyDatabase">MyDatabase</option>\n  </select>\n  <button (click)="onChangeDatabase()">Change Database</button>'},"20Ps":function(e,r,t){"use strict";t.r(r),r.default="\r\n<app-procedure></app-procedure>"},"45n4":function(e,r,t){"use strict";t.r(r),r.default=""},"4Ori":function(e,r,t){"use strict";t.r(r),r.default='<amexio-accordion [multi-open]="true">\r\n  \x3c!-- Database Tab --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" [gradient]="true" header="Database" [active]="true">\r\n    <div class="table">\r\n      <div class="cell">\r\n        <h3>\r\n          <p class="fa fa-database">\r\n            {{databaseMetaData.currentDatabaseName}}\r\n          </p>\r\n        </h3>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" [gradient]="true" header="Object Types" [active]="true">\r\n    <div class="table">\r\n      <div class="cell">\r\n        <ul>\r\n          <div *ngFor="let item of objectTypeItems">\r\n            <app-object-type-item [icon]="item.icon"\r\n                                  [label]="item.label"\r\n                                  [count]="item.count"\r\n                                  [visible]="item.visible">\r\n            </app-object-type-item>\r\n          </div>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" [gradient]="true" header="Database Properties" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Property</div>\r\n        <div class="cell">Value</div>\r\n      </div>\r\n\r\n      <div *ngFor="let property of databaseMetaData.serverProperties" class="row">\r\n        <div class="cell" data-title="Property">{{property.name}}</div>\r\n        <div class="cell" data-title="Value">{{property.value}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" [gradient]="true" header="Database Options" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Property</div>\r\n        <div class="cell">Value</div>\r\n      </div>\r\n\r\n      <div *ngFor="let option of databaseMetaData.serverAdvanceProperties" class="row">\r\n        <div class="cell" data-title="Property">{{option.name}}</div>\r\n        <div class="cell" data-title="Value">{{option.value}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n  \x3c!-- Files Tab --\x3e\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" [gradient]="true" header="Files" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Type</div>\r\n        <div class="cell">File Locations </div>\r\n        <div class="cell">Current Size</div>\r\n        <div class="cell">Max Size in MB</div>\r\n        <div class="cell">Growth Type</div>\r\n      </div>\r\n\r\n      <div *ngFor="let file of databaseMetaData.fileInformations" class="row">\r\n        <div class="cell" data-title="fileType">{{file.fileType}}</div>\r\n        <div class="cell" data-title="fileLocation">{{file.fileLocation}} MB</div>\r\n        <div class="cell" data-title="currentSizeMB">{{file.currentSizeMB}}</div>\r\n        <div class="cell" data-title="maxSizeMB">{{file.maxSizeMB}}</div>\r\n        <div class="cell" data-title="growthType">{{file.growthType}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n</amexio-accordion>\r\n'},"54qw":function(e,r,t){"use strict";t.r(r),r.default='<li *ngIf="visible">\r\n    <div>\r\n      <img [src]="icon" />\r\n      <a>{{ label }}</a>\r\n      <i *ngIf="count" class="fa fa-5x fa-border icon-grey badge">\r\n        {{ count }}\r\n      </i>\r\n    </div>\r\n  </li>'},"6G/g":function(e,r,t){"use strict";t.r(r),r.default='<div class=" ">\r\n    <div class="cell">  \r\n      <amexio-tree-filter-view [data-reader]="\'data\'"\r\n                               (nodeClick)="getNodeData($event)"\r\n                               [data]="leftmenujsonvalues">\r\n      </amexio-tree-filter-view> \r\n    </div>\r\n  </div>'},"8EKO":function(e,r,t){"use strict";t.r(r),r.default=".table {\r\n  margin: 0px 0 3px 0;\r\n  width: 100%;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n  display: table;\r\n}\r\n\r\n@media screen and (max-width: 580px) {\r\n  .table {\r\n    display: block;\r\n  }\r\n}\r\n\r\n.row {\r\n  display: table-row;\r\n  background: #f6f6f6;\r\n}\r\n\r\n.row:nth-of-type(odd) {\r\n    background: #e9e9e9;\r\n  }\r\n\r\n.row.header {\r\n    font-weight: 900;\r\n    color: #ffffff;\r\n    background: #184569 !important;\r\n  }\r\n\r\n.row.green {\r\n    background: #27ae60;\r\n  }\r\n\r\n.row.blue {\r\n    background: #2980b9;\r\n  }\r\n\r\n@media screen and (max-width: 580px) {\r\n  .row {\r\n    padding: 14px 0 7px;\r\n    display: block;\r\n  }\r\n\r\n    .row.header {\r\n      padding: 0;\r\n      height: 6px;\r\n    }\r\n\r\n      .row.header .cell {\r\n        display: none;\r\n      }\r\n\r\n    .row .cell {\r\n      margin-bottom: 10px;\r\n    }\r\n\r\n      .row .cell:before {\r\n        margin-bottom: 3px;\r\n        content: attr(data-title);\r\n        min-width: 98px;\r\n        font-size: 10px;\r\n        line-height: 10px;\r\n        font-weight: bold;\r\n        text-transform: uppercase;\r\n        color: #969696;\r\n        display: block;\r\n      }\r\n}\r\n\r\n.cell {\r\n  /*  padding: 6px 12px; */\r\n  display: table-cell;\r\n}\r\n\r\n@media screen and (max-width: 580px) {\r\n  .cell {\r\n    padding: 2px 16px;\r\n    display: block;\r\n  }\r\n}\r\n\r\na.btn:hover {\r\n  -webkit-transform: scale(1.1);\r\n  -moz-transform: scale(1.1);\r\n  -o-transform: scale(1.1);\r\n}\r\n\r\na.btn {\r\n  -webkit-transform: scale(0.8);\r\n  -moz-transform: scale(0.8);\r\n  -o-transform: scale(0.8);\r\n  -webkit-transition-duration: 0.5s;\r\n  -moz-transition-duration: 0.5s;\r\n  -o-transition-duration: 0.5s;\r\n}\r\n\r\n#RotateDiv {\r\n  /* background-color: yellow;\r\n  border: 1px solid black;\r\n  -webkit-transform: rotateZ(90deg);  \r\n  transform: rotateZ(90deg);   */\r\n}\r\n\r\nh4 {\r\n  text-align: center;\r\n  margin: 0 0 8px 0;\r\n}\r\n\r\n.ui-inputtext {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  font-size: 12px;\r\n}\r\n\r\n.progress-inner {\r\n  min-width: 1% !important;\r\n}\r\n\r\n/* Code container for improved readability */\r\n\r\n.code-container {\r\n  max-height: 400px;  /* Prevents excessive scrolling */\r\n  overflow-y: auto;  /* Enables vertical scroll when needed */\r\n  padding: 10px;\r\n  background-color: #2d2d2d; /* Dark background for contrast */\r\n  border-radius: 5px;\r\n  border: 1px solid #444;\r\n}\r\n\r\n/* ngx-prism styling for better text display */\r\n\r\nngx-prism {\r\n  display: block;\r\n  white-space: pre-wrap !important; /* Ensures proper line breaks */\r\n  word-wrap: break-word !important; /* Prevents long lines from breaking UI */\r\n  overflow-x: auto; /* Enables horizontal scroll for very long SQL statements */\r\n  background: #272822 !important; /* Dark theme for syntax highlighting */\r\n  color: #f8f8f2 !important; /* Light text for readability */\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  font-size: 14px;\r\n  line-height: 1.5; /* Increases spacing for better readability */\r\n  font-family: 'Courier New', Courier, monospace;\r\n}\r\n\r\n/* Scrollbar customization for better UX */\r\n\r\nngx-prism::-webkit-scrollbar {\r\n  width: 6px;\r\n  height: 6px;\r\n}\r\n\r\nngx-prism::-webkit-scrollbar-thumb {\r\n  background: #555;\r\n  border-radius: 3px;\r\n}\r\n\r\nngx-prism::-webkit-scrollbar-track {\r\n  background: #222;\r\n}\r\n"},"A/qk":function(e,r,t){"use strict";t.r(r),r.default='<footer class="footer"> \r\n   \r\n  </footer>\r\n'},A3xY:function(e,r,t){"use strict";t.r(r),r.default="/* Base styles */\r\n:host {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: calc(100vh - 25px); /* Adjust height to fit between header and footer */\r\n  width: 100%;\r\n  overflow: hidden;\r\n}\r\n.split-example {\r\n  height: 100%;\r\n  margin-left: 5px !important;\r\n}\r\n/* Split bar visibility */\r\n.HideSplitBar {\r\n  flex: 0 0 0 !important;\r\n}\r\n.HideSplitBar div {\r\n  display: none !important;\r\n}\r\n.showSplitBar div {\r\n  display: block !important;\r\n}\r\n/* Full-page and partial modes */\r\n.ShowFullPageMode {\r\n  order: 2;\r\n  flex: 0 0 calc(100% - 15px) !important;\r\n}\r\n/* Scrollbar styling */\r\n::-webkit-scrollbar {\r\n  width: 10px;\r\n}\r\n.setWindowHeight {\r\n  height: calc(100vh - 1px); /* Adjust height dynamically */\r\n  overflow-y: auto;\r\n}\r\n.scrollbar {\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n}\r\n/* Responsive adjustments for small screens */\r\n@media (max-width: 767px) {\r\n  .body-content {\r\n    padding-top: 50px; /* Space for the nav menu */\r\n  }\r\n}\r\n/* Responsive layout adjustments */\r\n@media only screen and (max-width: 600px) {\r\n  #leftMenu, #asSplitArea2 {\r\n    flex: 0 0 50%;\r\n  }\r\n}\r\n@media only screen and (min-width: 601px) and (max-width: 1200px) {\r\n  #leftMenu {\r\n    flex: 0 0 30%;\r\n  }\r\n  #asSplitArea2 {\r\n    flex: 0 0 70%;\r\n  }\r\n}\r\n@media only screen and (min-width: 1201px) {\r\n  #leftMenu {\r\n    flex: 0 0 25%;\r\n  }\r\n  #asSplitArea2 {\r\n    flex: 0 0 75%;\r\n  }\r\n}\r\n"},AMUZ:function(e,r,t){"use strict";t.r(r),r.default='<p-dialog header="Edit Description"\r\n          [(visible)]="displayDialog"\r\n          modal="true"\r\n          [responsive]="true"\r\n          styleClass="custom-dialog"\r\n          [style]="{width: \'350px\', minWidth: \'200px\'}"\r\n          [minY]="70"\r\n          [maximizable]="true"\r\n          [baseZIndex]="10000">\r\n  <div class="p-fluid">\r\n    <div class="p-formgrid p-grid">\r\n      <div class="p-field p-col">\r\n        <label for="name">Extended Properties Name</label>\r\n        <textarea rows="5"\r\n                  cols="30"\r\n                  [disabled]="true"\r\n                  pInputTextarea\r\n                  [autoResize]="true"\r\n                  [(ngModel)]="selectedDescription.name"\r\n                  placeholder="Enter name">\r\n        </textarea>\r\n      </div>\r\n      <div class="p-field p-col">\r\n        <label for="value">Extended Properties Value</label>\r\n        <textarea rows="5"\r\n                  cols="30"\r\n                  pInputTextarea\r\n                  [autoResize]="true"\r\n                  [(ngModel)]="selectedDescription.value"\r\n                  placeholder="Enter value">\r\n        </textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button *ngIf="hasEditPermission"\r\n            pButton\r\n            label="Save"\r\n            icon="pi pi-check"\r\n            (click)="saveDescription()"\r\n            class="p-button-success">\r\n    </button>\r\n    <button pButton\r\n            label="Cancel"\r\n            icon="pi pi-times"\r\n            class="p-button-secondary"\r\n            (click)="cancelEdit()">\r\n    </button>\r\n  </p-footer>\r\n</p-dialog>\r\n'},AOA5:function(e,r,t){"use strict";t.r(r),r.default=""},HJxH:function(e,r,t){"use strict";t.r(r),r.default=""},KVNU:function(e,r,t){"use strict";t.r(r),r.default="\r\n#Objects li:last-child {\r\n    display: none;\r\n  }\r\n  .table {\r\n  margin:  0px 0 3px 0;\r\n    width: 100%;\r\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n    display: table;\r\n  }\r\n  @media screen and (max-width: 580px) {\r\n    .table {\r\n      display: block;\r\n    }\r\n  }\r\n  .row {\r\n    display: table-row;\r\n    background: #f6f6f6;\r\n  }\r\n  .row:nth-of-type(odd) {\r\n      background: #e9e9e9;\r\n    }\r\n  .row.header {\r\n      font-weight: 900;\r\n      color: #ffffff;\r\n      background: #184569 !important;\r\n    }\r\n  .row.green {\r\n      background: #27ae60;\r\n    }\r\n  .row.blue {\r\n      background: #2980b9;\r\n    }\r\n  @media screen and (max-width: 580px) {\r\n    .row {\r\n      padding: 14px 0 7px;\r\n      display: block;\r\n    }\r\n  \r\n      .row.header {\r\n        padding: 0;\r\n        height: 6px;\r\n      }\r\n  \r\n        .row.header .cell {\r\n          display: none;\r\n        }\r\n  \r\n      .row .cell {\r\n        margin-bottom: 10px;\r\n      }\r\n  \r\n        .row .cell:before {\r\n          margin-bottom: 3px;\r\n          content: attr(data-title);\r\n          min-width: 98px;\r\n          font-size: 10px;\r\n          line-height: 10px;\r\n          font-weight: bold;\r\n          text-transform: uppercase;\r\n          color: #969696;\r\n          display: block;\r\n        }\r\n  }\r\n  .cell {\r\n  /*  padding: 6px 12px; */\r\n    display: table-cell;\r\n  }\r\n  @media screen and (max-width: 580px) {\r\n    .cell {\r\n      padding: 2px 16px;\r\n      display: block;\r\n    }\r\n  }\r\n  .node:hover {\r\n    fill: #ec008c;\r\n    opacity: 1;\r\n  }\r\n  .modal-dialog {\r\n    width: 100%;\r\n    height: 100%;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n  .modal-content {\r\n    height: auto;\r\n    min-height: 100%;\r\n    border: 0 none;\r\n    border-radius: 0;\r\n    box-shadow: none;\r\n  }\r\n  "},QNDt:function(e,r,t){"use strict";t.r(r),r.default=""},VzVu:function(e,r,t){"use strict";t.r(r),r.default='<app-header></app-header>\r\n<div id="main-content">  \r\n  <ngx-ui-loader></ngx-ui-loader>\r\n  <div style="margin-left: initial; margin-top: 5px;">\r\n    <div class="split-example ex-percent">\r\n      <as-split unit="percent"\r\n                direction="horizontal"\r\n                #split="asSplit"\r\n                gutterSize="10"\r\n                [gutterDblClickDuration]="dblClickTime"\r\n                [useTransition]="useTransition"\r\n                (dragStart)="log(\'dragStart\', $event)"\r\n                (dragEnd)="log(\'dragEnd\', $event)"\r\n                (gutterClick)="log(\'gutterClick\', $event)"\r\n                (gutterDblClick)="log(\'gutterDblClick\', $event)"\r\n                (transitionEnd)="log(\'transitionEnd\', $event)"> \r\n        \r\n                <as-split-area [ngClass]="status ? \'HideSplitBar\' : \'showSplitBar\'" size="25" #area1="asSplitArea">\r\n                  <div class="scollbar scrollbar-primary pre-scrollable leftmenuExtendedProperties setWindowHeight" id="leftMenu">\r\n                    <app-leftmenu></app-leftmenu>\r\n                  </div>\r\n                </as-split-area>\r\n                <as-split-area size="75" [ngClass]="status ? \'ShowFullPageMode\' : \'RemoveFullPageMode\'" #area2="asSplitArea" id="asSplitArea2">\r\n                  <div class="scollbar scrollbar-primary setWindowHeight">\r\n                    <div id="center">\r\n                      <app-main-page></app-main-page>\r\n                    </div>\r\n                  </div>\r\n                </as-split-area>\r\n       \r\n      </as-split>\r\n    </div>\r\n    <hr />\r\n  </div>\r\n</div>\r\n'},WBBz:function(e,r,t){"use strict";t.r(r),r.default='<amexio-accordion [multi-open]="true">\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Stored Procedure " [gradient]="true" [active]="true">\r\n\r\n    <div class="table">\r\n      <div class="cell">\r\n        <div>\r\n          <h5>\r\n            <img src="./assets/icons/StoredProcedure.png" style="width: 30px !important;">\r\n            {{storedProcedureName}}\r\n          </h5>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n  <amexio-accordion-tab amexioColorPalette\r\n                        [color-palette]="\'\'"\r\n                        header="MS Description"\r\n                        [gradient]="true"\r\n                        [active]="true">\r\n\r\n    \x3c!-- Display Mode --\x3e\r\n    <ng-container *ngIf="!iblnShowEditBox; else editMode">\r\n      <div class="description-container">\r\n        <a (click)="toggleEditBox()" class="edit-icon">\r\n          <i class="fa fa-edit"></i>\r\n        </a>\r\n        <p class="description-text">\r\n          {{ storedProcedureMetadata?.storedProcedureInfo?.extendedProperty }}\r\n        </p>\r\n      </div>\r\n    </ng-container>\r\n\r\n    \x3c!-- Edit Mode --\x3e\r\n    <ng-template #editMode>\r\n      <div class="edit-container">\r\n        <textarea class="form-control edit-textarea"\r\n                  rows="4"\r\n                  [(ngModel)]="storedProcedureMetadata.storedProcedureInfo.extendedProperty">\r\n      </textarea>\r\n\r\n        <div class="action-buttons">\r\n          <a (click)="CancelStoreProcMsDesciption()" class="cancel-btn">\r\n            <i class="fa fa-2x fa-times"></i>\r\n          </a>\r\n          <a (click)="updateProcedureDescription()" class="save-btn">\r\n            <i class="fa fa-2x fa-save"></i>\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </ng-template>\r\n\r\n  </amexio-accordion-tab>\r\n\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Objects dependncy Tree" [gradient]="true" [active]="true">\r\n    <p-tree [value]="filesTree"\r\n            layout="horizontal"\r\n            selectionMode="single">\r\n    </p-tree>\r\n  </amexio-accordion-tab>\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Parameters" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Edit</div>\r\n        <div class="cell">Name</div>\r\n        <div class="cell">Type</div>\r\n        <div class="cell">Max Length (Bytes)</div>\r\n        <div class="cell">Parameter Order</div>\r\n        <div class="cell">Collation</div>\r\n        <div class="cell">MS Description</div>\r\n      </div>\r\n\r\n      <div *ngFor="let property of storedProcedureMetadata?.parameters" class="row">\r\n        \x3c!-- Edit Button at the Front --\x3e\r\n        <div class="cell edit-cell">\r\n          <a (click)="toggleParameterEdit(property)" class="edit-icon">\r\n            <span class="fa fa-edit"></span>\r\n          </a>\r\n        </div>\r\n        <div class="cell">{{ property.parameterName }}</div>\r\n        <div class="cell">{{ property.type }}</div>\r\n        <div class="cell">{{ property.length }}</div>\r\n        <div class="cell">{{ property.parameterOrder }}</div>\r\n        <div class="cell">{{ property.collation }}</div>\r\n\r\n        \x3c!-- MS Description Column --\x3e\r\n        <div class="cell">\r\n          <div *ngIf="!property.isEditing">\r\n            <p>{{ property.extendedProperty }}</p>\r\n          </div>\r\n\r\n          <div *ngIf="property.isEditing">\r\n            <textarea class="edit-textarea" [(ngModel)]="property.extendedProperty"></textarea>\r\n\r\n            <div class="action-buttons">\r\n              <a (click)="toggleParameterEdit(property)" class="cancel-btn">\r\n                <i class="fa fa-times"></i>\r\n              </a>\r\n              <a (click)="updateParameterDescription(property)" class="save-btn">\r\n                <i class="fa fa-save"></i>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Create Script" [gradient]="true" [active]="true">\r\n    <div class="code-container">\r\n      <ngx-prism *ngIf="storedProcedureMetadata?.createScript?.procedureDefinition" [language]="\'sql\'">\r\n        {{ storedProcedureMetadata?.createScript?.procedureDefinition }}\r\n      </ngx-prism>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Used by " [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell"> Referenced object name </div>\r\n      </div>\r\n      <div *ngFor="let property of storedProcedureMetadata?.dependencies " class="row">\r\n        <div class="cell"> {{property.referencedObjectName}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n  \r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Execution Plan" [gradient]="true" [active]="true">\r\n    <div class="execution-plan-container">\r\n      <div id="container"></div>\r\n    </div>\r\n  </amexio-accordion-tab>\r\n</amexio-accordion>\r\n'},XdeO:function(e,r,t){"use strict";t.r(r),r.default="/* ===== General Table Styling ===== */\r\n.table {\r\n  width: 100%;\r\n  border-collapse: collapse;\r\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\r\n}\r\n/* ===== Table Row Styles ===== */\r\n.row {\r\n  display: table-row;\r\n  background: #f6f6f6;\r\n}\r\n.row:nth-of-type(odd) {\r\n  background: #e9e9e9;\r\n}\r\n.row.header {\r\n  font-weight: 900;\r\n  color: #ffffff;\r\n  background: #184569;\r\n}\r\n/* Additional Row Styles */\r\n.row.green {\r\n  background: #27ae60;\r\n}\r\n.row.blue {\r\n  background: #2980b9;\r\n}\r\n/* ===== Table Cells ===== */\r\n.cell {\r\n  display: table-cell;\r\n  padding: 6px 12px;\r\n}\r\n/* ===== Edit Button Positioning ===== */\r\n.edit-cell {\r\n  text-align: center;\r\n  width: 50px;\r\n}\r\n/* Edit Icon Styles */\r\n.edit-icon {\r\n  font-size: 18px;\r\n  color: #007bff;\r\n  cursor: pointer;\r\n  margin-right: 10px;\r\n}\r\n.edit-icon:hover {\r\n  color: #0056b3;\r\n}\r\n/* ===== Description Container for Editable Fields ===== */\r\n.description-container {\r\n  display: flex;\r\n  align-items: center;\r\n  padding: 10px;\r\n  background-color: #f1f1f1;\r\n  border-radius: 5px;\r\n  flex-wrap: wrap;\r\n}\r\n.description-text {\r\n  max-width: 80%;\r\n  font-size: 14px;\r\n  line-height: 1.5;\r\n}\r\n/* ===== Edit Mode Styles ===== */\r\n.edit-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  max-width: 600px;\r\n  margin: auto;\r\n}\r\n.edit-textarea {\r\n  width: 100%;\r\n  resize: vertical;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  font-size: 14px;\r\n  border: 1px solid #ccc;\r\n}\r\n/* ===== Action Buttons (Save & Cancel) ===== */\r\n.action-buttons {\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  margin-top: 10px;\r\n}\r\n.action-buttons a {\r\n  cursor: pointer;\r\n  margin-left: 10px;\r\n  font-size: 16px;\r\n}\r\n.cancel-btn i {\r\n  color: #d9534f;\r\n}\r\n.save-btn i {\r\n  color: #5cb85c;\r\n}\r\n.cancel-btn i:hover {\r\n  color: #c9302c;\r\n}\r\n.save-btn i:hover {\r\n  color: #449d44;\r\n}\r\n/* ===== Responsive Table Adjustments ===== */\r\n@media screen and (max-width: 580px) {\r\n  .table {\r\n    display: block;\r\n  }\r\n\r\n  .row {\r\n    padding: 14px 0 7px;\r\n    display: block;\r\n  }\r\n\r\n  .row.header {\r\n    padding: 0;\r\n    height: 6px;\r\n  }\r\n\r\n  .row.header .cell {\r\n    display: none;\r\n  }\r\n\r\n  .row .cell {\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .row .cell:before {\r\n    margin-bottom: 3px;\r\n    content: attr(data-title);\r\n    min-width: 98px;\r\n    font-size: 10px;\r\n    line-height: 10px;\r\n    font-weight: bold;\r\n    text-transform: uppercase;\r\n    color: #969696;\r\n    display: block;\r\n  }\r\n\r\n  .cell {\r\n    padding: 2px 16px;\r\n    display: block;\r\n  }\r\n}\r\n/* ===== Button Hover Effects ===== */\r\na.btn {\r\n  transition: transform 0.5s;\r\n}\r\na.btn:hover {\r\n  transform: scale(1.1);\r\n}\r\n/* ===== Headings ===== */\r\nh4 {\r\n  text-align: center;\r\n  margin: 0 0 8px 0;\r\n}\r\n/* ===== Input Field Adjustments ===== */\r\n.ui-inputtext {\r\n  padding-top: 0;\r\n  padding-bottom: 0;\r\n  font-size: 12px;\r\n}\r\n/* ===== Progress Bar Fixes ===== */\r\n.progress-inner {\r\n  min-width: 1% !important;\r\n}\r\n/* Ensure the textarea fits inside the cell */\r\n.edit-textarea {\r\n  width: 100%;\r\n  min-height: 50px;\r\n  max-height: 100px;\r\n  resize: vertical;\r\n  padding: 5px;\r\n  border-radius: 5px;\r\n  font-size: 14px;\r\n  border: 1px solid #ccc;\r\n  word-wrap: break-word;\r\n  white-space: normal;\r\n  overflow-y: auto;\r\n  box-sizing: border-box; /* Prevents overflow beyond parent cell */\r\n}\r\n/* Align action buttons properly */\r\n.action-buttons {\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  margin-top: 5px;\r\n  gap: 10px; /* Adds space between buttons */\r\n}\r\n/* Adjust Cancel (X) and Save (\u{1f4be}) Icons */\r\n.action-buttons a {\r\n  cursor: pointer;\r\n  font-size: 16px;\r\n}\r\n.cancel-btn i {\r\n  color: #d9534f;\r\n}\r\n.save-btn i {\r\n  color: #5cb85c;\r\n}\r\n.cancel-btn i:hover {\r\n  color: #c9302c;\r\n}\r\n.save-btn i:hover {\r\n  color: #449d44;\r\n}\r\n/* Container for code block */\r\n.code-container {\r\n  max-height: 400px;  /* Prevents excessive scrolling */\r\n  overflow-y: auto;  /* Enables vertical scroll if content is too long */\r\n  padding: 10px;\r\n  background-color: #2d2d2d; /* Dark background for readability */\r\n  border-radius: 5px;\r\n  border: 1px solid #444;\r\n}\r\n/* Ensures ngx-prism styles correctly */\r\nngx-prism {\r\n  display: block;\r\n  white-space: pre-wrap !important; /* Prevents horizontal scrolling */\r\n  word-wrap: break-word !important;\r\n  overflow-x: hidden; /* Ensures content does not overflow horizontally */\r\n  background: #272822 !important; /* Dark background for contrast */\r\n  color: #f8f8f2 !important; /* Light text for readability */\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  font-size: 14px;\r\n  line-height: 1.5; /* Adjust line height for better readability */\r\n  font-family: 'Courier New', Courier, monospace;\r\n}\r\n/* Hide unnecessary horizontal scrollbar */\r\nngx-prism::-webkit-scrollbar {\r\n  width: 6px;\r\n  height: 6px;\r\n}\r\nngx-prism::-webkit-scrollbar-thumb {\r\n  background: #555;\r\n  border-radius: 3px;\r\n}\r\nngx-prism::-webkit-scrollbar-track {\r\n  background: #222;\r\n}\r\n"},YBPu:function(e,r,t){"use strict";t.r(r),r.default=""},bFcN:function(e,r,t){"use strict";t.r(r),r.default=""},crnd:function(e,r){function t(e){return Promise.resolve().then((function(){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}))}t.keys=function(){return[]},t.resolve=t,e.exports=t,t.id="crnd"},dIbF:function(e,r,t){"use strict";t.r(r),r.default='<p-dialog header="Edit Column Description"\r\n          [(visible)]="displayColumnDialog"\r\n          modal="true"\r\n          [responsive]="true"\r\n          styleClass="custom-dialog"\r\n          [style]="{width: \'350px\', minWidth: \'200px\'}"\r\n          [minY]="70"\r\n          [maximizable]="true"\r\n          [baseZIndex]="10000">\r\n  <div class="p-fluid">\r\n    <div class="p-formgrid p-grid">\r\n      <div class="p-field p-col">\r\n        <label for="value">Column Extended Properties Value</label>\r\n        <textarea rows="5"\r\n                  cols="30"\r\n                  pInputTextarea\r\n                  [autoResize]="true"\r\n                  [(ngModel)]="selectedColumn.description"\r\n                  placeholder="Enter Description">\r\n        </textarea>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <p-footer>\r\n    <button pButton\r\n            label="Save"\r\n            icon="pi pi-check"\r\n            (click)="saveDescription()"\r\n            class="p-button-success">\r\n    </button>\r\n    <button pButton\r\n            label="Cancel"\r\n            icon="pi pi-times"\r\n            class="p-button-secondary"\r\n            (click)="cancelEdit()">\r\n    </button>\r\n  </p-footer>\r\n</p-dialog>\r\n'},eXlM:function(e,r,t){"use strict";t.r(r),r.default="<p>view works!</p>\r\n"},iZmm:function(e,r,t){"use strict";t.r(r),r.default=""},lQhO:function(e,r,t){"use strict";t.r(r),r.default='<div class="table">\r\n    <div class="row">\r\n      <pre>{{ script }}</pre>\r\n    </div>\r\n  </div>\r\n '},nuPB:function(e,r,t){"use strict";t.r(r),r.default=" /* Style for table header */\r\n .p-table thead th {\r\n    text-align: left;\r\n    padding: 8px;\r\n    background-color: #f4f4f4;\r\n  }\r\n /* Style for table cells */\r\n .p-table td {\r\n    padding: 8px;\r\n    border-bottom: 1px solid #ddd;\r\n  }\r\n /* Style for the expanded row content */\r\n .table {\r\n    width: 100%;\r\n    border-collapse: collapse;\r\n    margin-top: 10px;\r\n  }\r\n .table .row {\r\n    display: flex;\r\n    justify-content: space-between;\r\n  }\r\n .table .header {\r\n    font-weight: bold;\r\n    background-color: #f4f4f4;\r\n  }\r\n .table .cell {\r\n    padding: 8px;\r\n    border-bottom: 1px solid #ddd;\r\n    flex: 1;\r\n  }\r\n .table .row:nth-child(even) {\r\n    background-color: #f9f9f9;\r\n  }\r\n .table .row:hover {\r\n    background-color: #f1f1f1;\r\n  }\r\n /* Add hover effect for row togglers */\r\n .p-table a {\r\n    text-decoration: none;\r\n    color: #007bff;\r\n  }\r\n .p-table a:hover {\r\n    text-decoration: underline;\r\n  }"},"s+rH":function(e,r,t){"use strict";t.r(r),r.default='<header class="header">\r\n  \x3c!--<div class="sql-settings">\r\n    <label for="sql-server">Select Database:</label>\r\n    <select id="sql-server" (change)="onChangeServer($event)">\r\n      <option value="server1">SQL Server 1</option>\r\n      <option value="server2">SQL Server 2</option>--\x3e\r\n      \x3c!-- Add more servers as needed --\x3e\r\n    \x3c!--</select>\r\n  </div>--\x3e\r\n  <app-database-selector></app-database-selector>\r\n  </header>\r\n'},"sG/y":function(e,r,t){"use strict";t.r(r),r.default="/* Add any specific styles for the SQL script viewer here */\r\n.table {\r\n    width: 100%;\r\n  }\r\n.row {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    margin-right: -15px;\r\n    margin-left: 0px;\r\n \r\n  }\r\n.header {\r\n    font-weight: bold;\r\n  }\r\n.cell {\r\n    padding: 8px;\r\n  }\r\npre {\r\n    white-space: pre-wrap; /* Ensures the script wraps and is readable */\r\n  }\r\n  "},y1Th:function(e,r,t){"use strict";t.r(r),r.default='\x3c!-- <amexio-accordion [multi-open]="true">\r\n    <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" [gradient]="true" header="Tables" [active]="true">\r\n      <p-table [columns]="cols" [value]="tables" dataKey="tableName" [paginator]="true" [rows]="10">  \r\n        <ng-template pTemplate="header" let-columns>\r\n          <tr>\r\n            <th style="width: 4em"></th>\r\n            <th>Table Name</th>\r\n            <th>Description</th>\r\n          </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate="body" let-rowData let-expanded="expanded" let-columns="columns">\r\n          <tr>\r\n            <td>\r\n              <a href="#" [pRowToggler]="rowData">\r\n                <i [ngClass]="expanded ? \'pi pi-chevron-down\' : \'pi pi-chevron-right\'"></i>\r\n              </a>\r\n            </td>\r\n            <td class="cell">{{rowData.tableName}}</td>\r\n            <td class="cell">{{rowData.extendedPropertyValue}}</td>\r\n          </tr>\r\n        </ng-template>  \r\n        <ng-template pTemplate="rowexpansion" let-rowData let-columns="columns">\r\n          <tr>\r\n            <td [attr.colspan]="columns.length + 1">\r\n              <div class="table">\r\n                <div class="row header">\r\n                  <div class="cell">Column Name</div>\r\n                  <div class="cell">Description</div>\r\n                </div>\r\n                <div class="row" *ngFor="let columndetails of rowData.tableColumns">\r\n                  <div class="cell">{{columndetails.columnName}}</div>\r\n                  <div class="cell">{{columndetails.extendedPropertyValue}}</div>\r\n                </div>\r\n              </div>\r\n              <hr />\r\n            </td>\r\n          </tr>\r\n        </ng-template>  \r\n      </p-table>\r\n    </amexio-accordion-tab>\r\n  </amexio-accordion>\r\n   --\x3e\r\n\r\n   <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" header="Store Procerdure Extended Properties" [gradient]="true" [active]="true">\r\n    <div class="table">\r\n      <div class="row header">\r\n        <div class="cell">Store Procedures</div>\r\n        <div class="cell">Extended Properties Value</div> \r\n      </div> \r\n      <div *ngFor="let description of storedProcedures" class="row">\r\n        <div class="cell">{{description.storedProcedure}}</div>\r\n        <div class="cell">{{description.extendedProperty}}</div>\r\n      </div>\r\n    </div>\r\n  </amexio-accordion-tab>'},yMMS:function(e,r,t){"use strict";t.r(r),r.default=".table {\n  margin: 0px 0 3px 0;\n  width: 100%;\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\n  display: table;\n}\n\n@media screen and (max-width: 580px) {\n  .table {\n    display: block;\n  }\n}\n\n.row {\n  display: table-row;\n  background: #f6f6f6;\n}\n\n.row:nth-of-type(odd) {\n    background: #e9e9e9;\n  }\n\n.row.header {\n    font-weight: 900;\n    color: #ffffff;\n    background: #184569 !important;\n  }\n\n.row.green {\n    background: #27ae60;\n  }\n\n.row.blue {\n    background: #2980b9;\n  }\n\n@media screen and (max-width: 580px) {\n  .row {\n    padding: 14px 0 7px;\n    display: block;\n  }\n\n    .row.header {\n      padding: 0;\n      height: 6px;\n    }\n\n      .row.header .cell {\n        display: none;\n      }\n\n    .row .cell {\n      margin-bottom: 10px;\n    }\n\n      .row .cell:before {\n        margin-bottom: 3px;\n        content: attr(data-title);\n        min-width: 98px;\n        font-size: 10px;\n        line-height: 10px;\n        font-weight: bold;\n        text-transform: uppercase;\n        color: #969696;\n        display: block;\n      }\n}\n\n.cell {\n  /*  padding: 6px 12px; */\n  display: table-cell;\n}\n\n@media screen and (max-width: 580px) {\n  .cell {\n    padding: 2px 16px;\n    display: block;\n  }\n}\n"},ydAp:function(e,r,t){"use strict";t.r(r),r.default='<amexio-accordion [multi-open]="true">\r\n  <amexio-accordion-tab amexioColorPalette [color-palette]="\'\'" [gradient]="true" header="Tables" [active]="true">\r\n    <p-table [columns]="cols" [value]="tables" dataKey="tableName" [paginator]="true" [rows]="10">  \r\n      <ng-template pTemplate="header" let-columns>\r\n        <tr>\r\n          <th style="width: 4em"></th>\r\n          <th>Table Name</th>\r\n          <th>Description</th>\r\n        </tr>\r\n      </ng-template>\r\n      <ng-template pTemplate="body" let-rowData let-expanded="expanded" let-columns="columns">\r\n        <tr>\r\n          <td>\r\n            <a href="#" [pRowToggler]="rowData">\r\n              <i [ngClass]="expanded ? \'pi pi-chevron-down\' : \'pi pi-chevron-right\'"></i>\r\n            </a>\r\n          </td>\r\n          <td class="cell">{{rowData.tableName}}</td>\r\n          <td class="cell">{{rowData.extendedPropertyValue}}</td>\r\n        </tr>\r\n      </ng-template>  \r\n      <ng-template pTemplate="rowexpansion" let-rowData let-columns="columns">\r\n        <tr>\r\n          <td [attr.colspan]="columns.length + 1">\r\n            <div class="table">\r\n              <div class="row header">\r\n                <div class="cell">Column Name</div>\r\n                <div class="cell">Description</div>\r\n              </div>\r\n              <div class="row" *ngFor="let columndetails of rowData.tableColumns">\r\n                <div class="cell">{{columndetails.columnName}}</div>\r\n                <div class="cell">{{columndetails.extendedPropertyValue}}</div>\r\n              </div>\r\n            </div>\r\n            <hr />\r\n          </td>\r\n        </tr>\r\n      </ng-template>  \r\n    </p-table>\r\n  </amexio-accordion-tab>\r\n</amexio-accordion>\r\n'},ydRk:function(e,r,t){"use strict";t.r(r),r.default="<p>views works!</p>\r\n"},zPvY:function(e,r,t){"use strict";t.r(r),r.default=""},zUnb:function(e,r,t){"use strict";t.r(r);var n=t("8Y7J"),a=t("wAiw"),i=t("mrSG"),o=t("SVse"),l=t("cUpR"),s=t("s7LF"),d=t("IheW"),c=t("omvX"),p=t("Wuec"),u=t("m4cR"),b=t("HHV2"),m=t("iInd");let h=class{constructor(e,r,t,n,a){this.route=e,this.apiUrl=t,this.anotherUrl=n,this.ngxLoader=a,this.iblnShowPages=!1,this.isDisabled=!0,this.useTransition=!0,this.dblClickTime=0,this.logMessages=[],this.status=!1,this.iblnHiddeLeftMenu=!1,this.http=r,console.log(this.apiUrl),console.log(this.anotherUrl),this.istrlogiggedUserName=""}ngAfterViewInit(){}ngOnDestroy(){}ngOnInit(){}log(e,r){switch(this.logMessages.push({type:e,text:`${new Date} > ${e} event > ${JSON.stringify(r)}`}),e){case"gutterDblClick":case"gutterClick":this.status=!this.status}}};h.ctorParameters=()=>[{type:m.e},{type:d.b},{type:String,decorators:[{type:n.C,args:["API_URL"]}]},{type:String,decorators:[{type:n.C,args:["ANOTHER_URL"]}]},{type:b.c}],i.a([Object(n.mb)("area1",{static:!1})],h.prototype,"mySplitEl1",void 0),i.a([Object(n.mb)("area2",{static:!1})],h.prototype,"mySplitEl2",void 0),h=i.a([Object(n.o)({selector:"app-root",changeDetection:n.k.OnPush,host:{class:"split-example-page"},template:i.b(t("VzVu")).default,styles:[i.b(t("A3xY")).default]}),i.c(2,Object(n.C)("API_URL")),i.c(3,Object(n.C)("ANOTHER_URL"))],h);var v=t("zlRY"),g=t("G0yt"),x=t("LqlI"),f=t("z16Y"),y=t("99iz"),w=t("hhfa"),P=t("KnEf"),D=t("ZRSf"),S=t("sE7/"),C=t("HEhh"),O=t("8aBz"),T=t("c/fn"),k=t("7zpP"),E=t("T7Ec"),j=t("Pxif"),M=t("8Zpt");let I=class{constructor(){}ngOnInit(){}};I=i.a([Object(n.o)({selector:"app-main-page",template:i.b(t("20Ps")).default,styles:[i.b(t("HJxH")).default]})],I);let L=class{onChangeServer(e){const r=e.target.value;console.log("Selected SQL Server:",r)}};L=i.a([Object(n.o)({selector:"app-header",template:i.b(t("s+rH")).default,styles:[i.b(t("bFcN")).default]})],L);let N=class{};N=i.a([Object(n.o)({selector:"app-footer",template:i.b(t("A/qk")).default,styles:[i.b(t("45n4")).default]})],N);var U=t("LRne"),A=t("un/a"),R=t("JIr8");let z=class{constructor(e,r,t){this.primaryUrl=e,this.secondaryUrl=r,this.http=t}loadTableMetadata(e){const r=`${this.primaryUrl}/Tables/GetTableMetaData?tableName=${e}`,t="Tables/GetTableMetaData?tableName="+e,n=this.http.get(r).pipe(Object(A.a)(2)),a=this.http.get(t).pipe(Object(A.a)(2));return n.pipe(Object(R.a)(e=>(console.error("Primary API URL failed after retries:",e),a.pipe(Object(R.a)(e=>(console.error("Secondary API URL failed after retries:",e),Object(U.a)(null)))))))}updateTableExtendedProperties(e){return this.http.post(this.primaryUrl+"/UpdateTableExtendedProperties",e)}updateTableColumnExtendedProperty(e){return this.http.post(this.primaryUrl+"/UpdateTableColumnExtendedProperty",e)}};z.ctorParameters=()=>[{type:String,decorators:[{type:n.C,args:["API_URL"]}]},{type:String,decorators:[{type:n.C,args:["ANOTHER_URL"]}]},{type:d.b}],z=i.a([Object(n.D)({providedIn:"root"}),i.c(0,Object(n.C)("API_URL")),i.c(1,Object(n.C)("ANOTHER_URL"))],z);let F=class{constructor(e,r,t){this.tableService=e,this.http=r,this.cd=t,this.tableName="HumanResources.Employee",this.columns=[],this.tableFragmentations=[],this.createScript={script:""},this.descriptions=[],this.indices=[],this.foreignKeys=[],this.properties=[],this.selectedDescription={name:"",value:"",table:""},this.selectedColumn={tableName:"",columnName:"",key:"",identity:"",dataType:"",maxLength:"",allowNulls:"",default:"",description:"",descriptionname:"",extendedPropertyName:"",extendedPropertyValue:""},this.language="plsql"}ngOnInit(){this.loadTableMetadata(),this.loadData()}loadData(){this.hasEditPermission=!0}ngAfterViewInit(){window.Prism.highlightAll()}loadTableMetadata(){this.tableService.loadTableMetadata(this.tableName).subscribe({next:e=>e?this.handleLoadSuccess(e):null,error:e=>this.handleLoadError(e)})}handleLoadSuccess(e){this.descriptions=e.descriptions,this.columns=e.columns,this.createScript=e.createScript,this.indices=e.indices,this.foreignKeys=e.foreignKeys,this.properties=e.properties,this.tableconstraint=e.constraint,this.tableFragmentations=e.tableFragmentations,this.filesTree=JSON.parse(e.tableDependenciesTree)}handleLoadError(e){console.error(e)}editDescription(e){this.selectedDescription={...e},this.displayDialog=!0}saveDescription(){const e=this.descriptions.findIndex(e=>e.name===this.selectedDescription.name&&e.table===this.selectedDescription.table);-1!==e&&(this.descriptions[e]={...this.selectedDescription},this.tableService.updateTableExtendedProperties(this.selectedDescription).subscribe({next:()=>this.displayDialog=!1,error:e=>console.error("Error:",e)}))}cancelEdit(){this.displayDialog=!1}editColumnDescription(e){this.selectedColumn={...e},this.displayColumnDialog=!0}saveColumnDescription(){const e=this.columns.findIndex(e=>e.tableName===this.selectedColumn.tableName&&e.columnName===this.selectedColumn.columnName);-1!==e&&(this.columns[e]={...this.selectedColumn},this.tableService.updateTableColumnExtendedProperty(this.selectedColumn).subscribe({next:()=>this.displayColumnDialog=!1,error:e=>console.error("Error:",e)}))}cancelColumnEdit(){this.displayColumnDialog=!1}};F.ctorParameters=()=>[{type:z},{type:d.b},{type:n.l}],F=i.a([Object(n.o)({selector:"app-table",template:i.b(t("1dAZ")).default,styles:[i.b(t("8EKO")).default]})],F);var B=t("GS7A");let H=class{constructor(e,r,t){this.http=e,this.primaryUrl=r,this.secondaryUrl=t}ngOnInit(){this.cols=[{field:"tableName",header:"extendedPropertyValue"},{field:"extendedPropertyValue",header:"tableColumns"}],this.loadTablesMetadata()}loadTablesMetadata(){const e=this.primaryUrl+"/Tables/GetTableDetails";this.http.get(e).subscribe(e=>this.handleLoadSuccess(e),e=>{console.error("Primary URL failed, trying secondary URL:",e),this.http.get("Tables/GetTableDetails").subscribe(e=>this.handleLoadSuccess(e),e=>this.handleLoadError(e))})}handleLoadSuccess(e){this.tables=e}handleLoadError(e){console.error(e)}};H.ctorParameters=()=>[{type:d.b},{type:String,decorators:[{type:n.C,args:["API_URL"]}]},{type:String,decorators:[{type:n.C,args:["ANOTHER_URL"]}]}],H=i.a([Object(n.o)({selector:"app-tables",template:i.b(t("ydAp")).default,animations:[Object(B.m)("rowExpansionTrigger",[Object(B.j)("void",Object(B.k)({transform:"translateX(-10%)",opacity:0})),Object(B.j)("active",Object(B.k)({transform:"translateX(0)",opacity:1})),Object(B.l)("* <=> *",Object(B.e)("400ms cubic-bezier(0.86, 0, 0.07, 1)"))])],styles:[i.b(t("nuPB")).default]}),i.c(1,Object(n.C)("API_URL")),i.c(2,Object(n.C)("ANOTHER_URL"))],H);var _=t("YHJu"),V=t("ypNx");let G=class{constructor(){this.save=new n.x,this.cancel=new n.x}saveDescription(){this.save.emit()}cancelEdit(){this.cancel.emit()}};i.a([Object(n.G)()],G.prototype,"displayDialog",void 0),i.a([Object(n.G)()],G.prototype,"selectedDescription",void 0),i.a([Object(n.G)()],G.prototype,"hasEditPermission",void 0),i.a([Object(n.S)()],G.prototype,"save",void 0),i.a([Object(n.S)()],G.prototype,"cancel",void 0),G=i.a([Object(n.o)({selector:"app-edit-description-dialog",template:i.b(t("AMUZ")).default,styles:[i.b(t("iZmm")).default]})],G);let q=class{constructor(){this.saveColumnDescription=new n.x,this.cancelColumnEdit=new n.x}saveDescription(){this.saveColumnDescription.emit()}cancelEdit(){this.cancelColumnEdit.emit()}};i.a([Object(n.G)()],q.prototype,"displayColumnDialog",void 0),i.a([Object(n.G)()],q.prototype,"selectedColumn",void 0),i.a([Object(n.S)()],q.prototype,"saveColumnDescription",void 0),i.a([Object(n.S)()],q.prototype,"cancelColumnEdit",void 0),q=i.a([Object(n.o)({selector:"app-edit-column-description-dialog",template:i.b(t("dIbF")).default,styles:[i.b(t("YBPu")).default]})],q);let $=class{};i.a([Object(n.G)()],$.prototype,"script",void 0),$=i.a([Object(n.o)({selector:"app-sql-script-viewer",template:i.b(t("lQhO")).default,styles:[i.b(t("sG/y")).default]})],$);let K=class{constructor(e,r){this.apiUrl=e,this.anotherUrl=r}};K.ctorParameters=()=>[{type:String,decorators:[{type:n.C,args:["API_URL"]}]},{type:String,decorators:[{type:n.C,args:["ANOTHER_URL"]}]}],K=i.a([Object(n.D)({providedIn:"root"}),i.c(0,Object(n.C)("API_URL")),i.c(1,Object(n.C)("ANOTHER_URL"))],K);let X=class{};X=i.a([Object(n.L)({declarations:[F,H,G,q,$],imports:[o.b,l.a,s.b,v.b,v.d,v.a,v.c,P.a,D.a,C.a,O.a,k.a,E.a,j.a,u.a,S.a,T.a,_.a,V.a],providers:[w.f,w.c,z,K],exports:[F,H],schemas:[n.j]})],X);let Y=class{constructor(e,r,t){this.http=e,this.primaryUrl=r,this.secondaryUrl=t}getDatabaseMetaData(){const e=this.primaryUrl+"/Database/database-meta-data";return this.http.get(e).pipe(Object(R.a)(e=>(console.error("Primary URL failed, trying secondary URL:",e),this.http.get("Database/database-meta-data").pipe(Object(R.a)(e=>(console.error("Secondary URL also failed:",e),Object(U.a)(null)))))))}changeDatabase(e){return this.http.post(this.primaryUrl+"/Database/ChangeDatabase",{databaseName:e})}};Y.ctorParameters=()=>[{type:d.b},{type:String,decorators:[{type:n.C,args:["API_URL"]}]},{type:String,decorators:[{type:n.C,args:["ANOTHER_URL"]}]}],Y=i.a([Object(n.D)({providedIn:"root"}),i.c(1,Object(n.C)("API_URL")),i.c(2,Object(n.C)("ANOTHER_URL"))],Y);let Z=class{constructor(){this.icon="",this.label="",this.visible=!0}};i.a([Object(n.G)()],Z.prototype,"icon",void 0),i.a([Object(n.G)()],Z.prototype,"label",void 0),i.a([Object(n.G)()],Z.prototype,"count",void 0),i.a([Object(n.G)()],Z.prototype,"visible",void 0),Z=i.a([Object(n.o)({selector:"app-object-type-item",template:i.b(t("54qw")).default})],Z);let W=class{constructor(e){this.databaseMetadataService=e,this.objectTypeItems=[]}ngOnInit(){this.loadDatabaseMetadata()}loadDatabaseMetadata(){this.databaseMetadataService.getDatabaseMetaData().subscribe({next:e=>{e&&(this.databaseMetaData=e,this.initializeObjectTypeItems())},error:e=>this.handleLoadError(e)})}initializeObjectTypeItems(){const e=[{icon:"Table.png",label:"Tables",data:this.databaseMetaData.tablesMetadata},{icon:"View.png",label:"View",data:this.databaseMetaData.viewMetadata},{icon:"StoredProcedure.png",label:"Stored Procedure",data:this.databaseMetaData.procedureInfos},{icon:"Function_Table.png",label:"Table-Valued Functions",data:this.databaseMetaData.tableFunctionInfos},{icon:"Function_Scalar.png",label:"Scalar-Valued Functions",data:this.databaseMetaData.scalarFunctionInfos},{icon:"DdlTrigger.png",label:"Database Triggers",data:this.databaseMetaData.triggerInfos},{icon:"UserDefinedDataType.png",label:"User-Defined Data Types",data:this.databaseMetaData.userTypes},{icon:"XmlSchemaCollection.png",label:"XML Schema Collections",data:this.databaseMetaData.dbXmlSchemas}];this.objectTypeItems=e.map(e=>({icon:"./assets/icons/"+e.icon,label:e.label,count:e.data.length,visible:!!e.data.length}))}handleLoadError(e){console.error("Failed to load database metadata:",e)}};W.ctorParameters=()=>[{type:Y}],W=i.a([Object(n.o)({selector:"app-database-details",template:i.b(t("4Ori")).default,styles:[i.b(t("KVNU")).default]})],W);let J=class{};J=i.a([Object(n.L)({declarations:[W,Z],imports:[o.b,v.b,v.d,v.a,v.c,P.a,D.a,C.a,O.a,T.a,k.a,E.a,j.a,u.a],providers:[w.f,w.c,Y],exports:[W]})],J);let Q=class{constructor(e,r,t){this.http=e,this.primaryUrl=r,this.secondaryUrl=t}loadLeftMenuData(){const e=this.primaryUrl+"/LeftMenu/left-menu";return this.http.get(e).pipe(Object(R.a)(e=>(console.error("Primary URL failed, trying secondary URL:",e),this.http.get("LeftMenu/left-menu").pipe(Object(R.a)(e=>(console.error("Both primary and secondary URLs failed:",e),Object(U.a)(null)))))))}};Q.ctorParameters=()=>[{type:d.b},{type:String,decorators:[{type:n.C,args:["API_URL"]}]},{type:String,decorators:[{type:n.C,args:["ANOTHER_URL"]}]}],Q=i.a([Object(n.D)({providedIn:"root"}),i.c(1,Object(n.C)("API_URL")),i.c(2,Object(n.C)("ANOTHER_URL"))],Q);let ee=class{constructor(e){this.leftMenuService=e}ngOnInit(){this.loadLeftMenuData()}loadLeftMenuData(){this.leftMenuService.loadLeftMenuData().subscribe(e=>this.handleLoadSuccess(e),e=>this.handleLoadError(e))}handleLoadSuccess(e){this.leftmenujsonvalues=e}handleLoadError(e){console.error(e)}getNodeData(e){}};ee.ctorParameters=()=>[{type:Q}],ee=i.a([Object(n.o)({selector:"app-leftmenu",template:i.b(t("6G/g")).default})],ee);let re=class{constructor(e,r){this.http=r,this.baseUrl="",this.baseUrl=e+"/StoredProcedure"}getAllStoredProcedures(){return this.http.get(this.baseUrl+"/AllStoredProcedures")}getStoredProcedureMetadata(e){return this.http.get(`${this.baseUrl}/${e}/metadata`)}mergeStoredProcedureDescription(e){return this.http.post(this.baseUrl+"/description",e)}mergeParameterDescription(e){return this.http.post(this.baseUrl+"/parameter/description",e)}};re.ctorParameters=()=>[{type:String,decorators:[{type:n.C,args:["API_URL"]}]},{type:d.b}],re=i.a([Object(n.D)({providedIn:"root"}),i.c(0,Object(n.C)("API_URL"))],re);let te=class{constructor(e){this.storedProcedureService=e,this.storedProcedures=[],this.isLoading=!0,this.errorMessage=""}ngOnInit(){this.loadStoredProcedures()}loadStoredProcedures(){this.storedProcedureService.getAllStoredProcedures().subscribe({next:e=>{this.storedProcedures=e},error:e=>console.error("Error fetching stored procedures:",e)})}};te.ctorParameters=()=>[{type:re}],te=i.a([Object(n.o)({selector:"app-procedures",template:i.b(t("y1Th")).default,styles:[i.b(t("yMMS")).default]})],te);let ne=class{constructor(e){this.storedProcedureService=e,this.storedProcedureName="HumanResources.uspUpdateEmployeeHireInfo",this.iblnShowEditBox=!1,this.language="plsql",this.iblnLoading=!1}ngOnInit(){this.loadMetadata()}getSchema(){return this.storedProcedureName.split(".")[0]||""}getStoreprocedureName(){return this.storedProcedureName.split(".")[1]||""}loadMetadata(){this.storedProcedureService.getStoredProcedureMetadata(this.storedProcedureName).subscribe({next:e=>{this.iblnLoading=!0,this.storedProcedureMetadata=e,this.filesTree=JSON.parse(e.storedProcedureDependenciesTree),QP.showPlan(document.getElementById("container"),""+this.storedProcedureMetadata.executionPlan.queryPlan,{jsTooltips:!0})},error:e=>console.error("Error fetching metadata:",e)})}toggleEditBox(){this.iblnShowEditBox=!this.iblnShowEditBox}CancelStoreProcMsDesciption(){this.iblnShowEditBox=!1}updateProcedureDescription(){if(!this.storedProcedureMetadata.storedProcedureInfo.extendedProperty)return void console.error("No description available to update.");const e={schemaName:this.getSchema(),storedProcedureName:this.getStoreprocedureName(),description:this.storedProcedureMetadata.storedProcedureInfo.extendedProperty};this.storedProcedureService.mergeStoredProcedureDescription(e).subscribe({next:()=>{console.log("Stored procedure description updated successfully"),this.toggleEditBox()},error:e=>console.error("Error updating description:",e)})}updateParameterDescription(e){const r={schemaName:this.getSchema(),storedProcedureName:this.getStoreprocedureName(),parameterName:e.parameterName,description:e.extendedProperty};this.storedProcedureService.mergeParameterDescription(r).subscribe({next:()=>{console.log("Parameter description updated successfully"),this.toggleParameterEdit(e)},error:e=>console.error("Error updating parameter description:",e)})}toggleParameterEdit(e){e.isEditing=!e.isEditing}};ne.ctorParameters=()=>[{type:re}],ne=i.a([Object(n.o)({selector:"app-procedure",template:i.b(t("WBBz")).default,styles:[i.b(t("XdeO")).default]})],ne);let ae=class{};ae=i.a([Object(n.L)({declarations:[te,ne],imports:[o.b,l.a,s.b,d.c,v.b,v.d,v.a,v.c,P.a,C.a,O.a,k.a,E.a,j.a,u.a,T.a,_.a,V.a,S.a],providers:[re],exports:[te,ne],schemas:[n.j]})],ae);let ie=class{constructor(){}ngOnInit(){}};ie=i.a([Object(n.o)({selector:"app-views",template:i.b(t("ydRk")).default,styles:[i.b(t("zPvY")).default]})],ie);let oe=class{constructor(){}ngOnInit(){}};oe=i.a([Object(n.o)({selector:"app-view",template:i.b(t("eXlM")).default,styles:[i.b(t("QNDt")).default]})],oe);let le=class{constructor(e){this.databaseService=e,this.selectedDatabase=""}ngOnInit(){throw new Error("Method not implemented.")}onChangeDatabase(){this.databaseService.changeDatabase(this.selectedDatabase).subscribe(e=>{console.log(e),alert(e.message)})}};le.ctorParameters=()=>[{type:Y}],le=i.a([Object(n.o)({selector:"app-database-selector",template:i.b(t("1wH8")).default,styles:[i.b(t("AOA5")).default]})],le);let se=class{};function de(){return"http://localhost:5000"}function ce(){return"https://localhost:5001"}se=i.a([Object(n.L)({declarations:[h,I,L,N,ee,ie,oe,le],imports:[l.a.withServerTransition({appId:"ng-cli-universal"}),d.c,s.b,s.h,v.b,v.d,v.a,v.c,f.a,c.a,y.a.forRoot(),m.f.forRoot([],{useHash:!0}),p.a,C.a,o.b,O.a,T.a,k.a,E.a,j.a,P.a,D.a,g.a,S.a,u.a,d.c,b.b.forRoot({bgsColor:"#1c749a",bgsOpacity:.7,bgsPosition:"center-center",bgsSize:80,bgsType:"ball-spin-clockwise",blur:5,delay:0,fgsColor:"#1c749a",fgsPosition:"center-center",fgsSize:60,fgsType:"ball-spin-clockwise",gap:10,logoPosition:"center-center",logoSize:120,logoUrl:"",masterLoaderId:"master",overlayBorderRadius:"0",overlayColor:"rgba(40, 40, 40, 0.8)",pbColor:"red",pbDirection:"ltr",pbThickness:1,hasProgressBar:!0,text:"Loading",textColor:"#FFFFFF",textPosition:"center-center",maxTime:-1,minTime:300}),b.a,x.a.forRoot(),M.a,X,J,ae],providers:[{provide:o.h,useClass:o.e},w.f,w.c],bootstrap:[h]})],se),t.d(r,"getApiUrl",(function(){return de})),t.d(r,"getAnotherUrl",(function(){return ce}));const pe=[{provide:"API_URL",useFactory:de,deps:[]},{provide:"ANOTHER_URL",useFactory:ce,deps:[]}];Object(n.tb)(),Object(a.a)(pe).bootstrapModule(se).catch(e=>console.log(e))}},[[0,0,5]]]);
//# sourceMappingURL=main-es2019.92b4f95abe840944759b.js.map