{"version":3,"sources":["webpack:///src/app/table/components/table/table.component.html","webpack:///src/app/database/database-selector/database-selector.component.html","webpack:///src/app/ui/main-page/main-page.component.html","webpack:///src/app/ui/footer/footer.component.css","webpack:///src/app/database/components/database-details/database-details.component.html","webpack:///src/app/database/components/object-type-item/object-type-item.component.html","webpack:///src/app/left-menu/components/leftmenu/leftmenu.component.html","webpack:///src/app/table/components/table/table.component.css","webpack:///src/app/ui/footer/footer.component.html","webpack:///src/app/app.component.css","webpack:///src/app/table/components/table/edit-description-dialog/edit-description-dialog.component.html","webpack:///src/app/database/database-selector/database-selector.component.css","webpack:///src/app/ui/main-page/main-page.component.css","webpack:///src/app/database/components/database-details/database-details.component.css","webpack:///src/app/view/components/view/view.component.css","webpack:///src/app/app.component.html","webpack:///src/app/procedure/components/procedure/procedure.component.html","webpack:///src/app/procedure/components/procedure/procedure.component.css","webpack:///src/app/table/components/table/edit-column-description-dialog/edit-column-description-dialog.component.css","webpack:///src/app/ui/header/header.component.css","webpack:///src/$_lazy_route_resource lazy namespace object","webpack:///src/app/table/components/table/edit-column-description-dialog/edit-column-description-dialog.component.html","webpack:///src/app/view/components/view/view.component.html","webpack:///src/app/table/components/table/edit-description-dialog/edit-description-dialog.component.css","webpack:///src/app/table/components/table/sql-script-viewer/sql-script-viewer.component.html","webpack:///src/app/table/components/tables/tables.component.css","webpack:///src/app/ui/header/header.component.html","webpack:///src/app/table/components/table/sql-script-viewer/sql-script-viewer.component.css","webpack:///src/app/procedure/components/procedures/procedures.component.html","webpack:///src/app/procedure/components/procedures/procedures.component.css","webpack:///src/app/table/components/tables/tables.component.html","webpack:///src/app/view/components/views/views.component.html","webpack:///src/app/view/components/views/views.component.css","webpack:///src/app/app.component.ts","webpack:///src/app/ui/main-page/main-page.component.ts","webpack:///src/app/ui/header/header.component.ts","webpack:///src/app/ui/footer/footer.component.ts","webpack:///src/app/table/service/table.service.ts","webpack:///src/app/table/components/table/table.component.ts","webpack:///src/app/table/components/tables/tables.component.ts","webpack:///src/app/table/components/table/edit-description-dialog/edit-description-dialog.component.ts","webpack:///src/app/table/components/table/edit-column-description-dialog/edit-column-description-dialog.component.ts","webpack:///src/app/table/components/table/sql-script-viewer/sql-script-viewer.component.ts","webpack:///src/app/table/service/tables.service.ts","webpack:///src/app/table/tables.module.ts","webpack:///src/app/database/service/database-metadata.service.ts","webpack:///src/app/database/components/object-type-item/object-type-item.component.ts","webpack:///src/app/database/components/database-details/database-details.component.ts","webpack:///src/app/database/database.module.ts","webpack:///src/app/left-menu/services/left-menu.service.ts","webpack:///src/app/left-menu/components/leftmenu/leftmenu.component.ts","webpack:///src/app/procedure/service/procedure.service.ts","webpack:///src/app/procedure/components/procedures/procedures.component.ts","webpack:///src/app/procedure/components/procedure/procedure.component.ts","webpack:///src/app/procedure/procedure.module.ts","webpack:///src/app/view/components/views/views.component.ts","webpack:///src/app/view/components/view/view.component.ts","webpack:///src/app/database/database-selector/database-selector.component.ts","webpack:///src/app/app.module.ts","webpack:///src/main.ts"],"names":["__webpack_require__","r","__webpack_exports__","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","_createClass","route","http","apiUrl","anotherUrl","ngxLoader","this","iblnShowPages","isDisabled","useTransition","dblClickTime","logMessages","status","iblnHiddeLeftMenu","console","log","istrlogiggedUserName","key","value","type","push","text","Date","JSON","stringify","router","b","core","C","args","ngx_ui_loader","c","tslib_es6","a","Object","mb","static","o","selector","changeDetection","k","OnPush","host","class","template","MainPageComponent","_classCallCheck","HeaderComponent","event","selectedServer","target","FooterComponent","table_service_TableService","primaryUrl","secondaryUrl","tableName","primaryRequest","get","pipe","retry","secondaryRequest","catchError","error","secondaryError","of","description","post","column","D","providedIn","TableComponent","tableService","cd","columns","tableFragmentations","createScript","script","descriptions","indices","foreignKeys","properties","selectedDescription","name","table","selectedColumn","columnName","identity","dataType","maxLength","allowNulls","default","descriptionname","extendedPropertyName","extendedPropertyValue","language","loadTableMetadata","loadData","hasEditPermission","window","Prism","highlightAll","_this","subscribe","next","metadata","handleLoadSuccess","handleLoadError","result","tableconstraint","constraint","filesTree","parse","tableDependenciesTree","displayDialog","_this2","index","findIndex","desc","updateTableExtendedProperties","displayColumnDialog","_this3","updateTableColumnExtendedProperty","l","TablesComponent","cols","field","header","loadTablesMetadata","_this4","secondaryResult","tables","animations","fesm2015_animations","m","j","transform","opacity","edit_description_dialog_component_EditDescriptionDialogComponent","save","x","cancel","emit","G","S","edit_column_description_dialog_component_EditColumnDescriptionDialogComponent","saveColumnDescription","cancelColumnEdit","SqlScriptViewerComponent","TablesService","TablesModule","L","declarations","imports","common","platform_browser","fesm2015_forms","amexio_ng_extensions","d","primeng_accordion","primeng_table","primeng_tree","primeng_toast","primeng_contextmenu","primeng_tabview","primeng_codehighlighter","primeng_breadcrumb","angular_progress_bar","primeng_button","primeng_dialog","primeng_inputtextarea","providers","primeng_api","f","schemas","database_metadata_service_DatabaseMetadataService","_this5","primaryError","databaseName","ObjectTypeItemComponent","icon","label","visible","DatabaseDetailsComponent","databaseMetadataService","objectTypeItems","loadDatabaseMetadata","_this6","getDatabaseMetaData","databaseMetaData","initializeObjectTypeItems","metadataConfig","data","tablesMetadata","viewMetadata","procedureInfos","tableFunctionInfos","scalarFunctionInfos","triggerInfos","userTypes","dbXmlSchemas","map","item","count","length","DatabaseModule","left_menu_service_LeftMenuService","_this7","LeftmenuComponent","leftMenuService","loadLeftMenuData","_this8","leftmenujsonvalues","ProcedureService","baseUrl","storedProcedureName","request","ProceduresComponent","storedProcedureService","storedProcedures","isLoading","errorMessage","loadStoredProcedures","_this9","getAllStoredProcedures","err","ProcedureComponent","iblnShowEditBox","iblnLoading","loadMetadata","split","_this10","getStoredProcedureMetadata","storedProcedureMetadata","storedProcedureDependenciesTree","QP","showPlan","document","getElementById","executionPlan","queryPlan","jsTooltips","_this11","storedProcedureInfo","extendedProperty","schemaName","getSchema","getStoreprocedureName","mergeStoredProcedureDescription","toggleEditBox","parameter","parameterName","mergeParameterDescription","toggleParameterEdit","isEditing","ProcedureModule","ViewsComponent","ViewComponent","DatabaseSelectorComponent","databaseService","selectedDatabase","changeDatabase","response","alert","message","AppModule","getApiUrl","getAnotherUrl","withServerTransition","appId","h","angular_font_awesome","angular_split","forRoot","useHash","dist","ng_bootstrap","bgsColor","bgsOpacity","bgsPosition","bgsSize","bgsType","blur","delay","fgsColor","fgsPosition","fgsSize","fgsType","gap","logoPosition","logoSize","logoUrl","masterLoaderId","overlayBorderRadius","overlayColor","pbColor","pbDirection","pbThickness","hasProgressBar","textColor","textPosition","maxTime","minTime","ngx_bootstrap_modal","angular2_multiselect_dropdown","provide","useClass","bootstrap","useFactory","deps","tb","platform_browser_dynamic","bootstrapModule"],"mappings":"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","file":"main-es5.92b4f95abe840944759b.js","sourcesContent":["export default \"<amexio-accordion [multi-open]=\\\"true\\\">\\r\\n  <!-- Table Information -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table: {{tableName}}\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"cell\\\">\\r\\n        <h5>\\r\\n          <img src=\\\"./assets/icons/Table.png\\\" style=\\\"width: 30px !important;\\\" />\\r\\n          {{tableName}}\\r\\n        </h5>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Extended Properties -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table Extended Properties\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Extended Properties Name</div>\\r\\n        <div class=\\\"cell\\\">Extended Properties Value</div>\\r\\n        <div class=\\\"cell\\\">Extended Properties of Table</div>\\r\\n        <div *ngIf=\\\"hasEditPermission\\\" class=\\\"cell\\\">Actions</div>\\r\\n      </div>\\r\\n      <div *ngFor=\\\"let description of descriptions\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\">{{description.name}}</div>\\r\\n        <div class=\\\"cell\\\">{{description.value}}</div>\\r\\n        <div class=\\\"cell\\\">{{description.table}}</div>\\r\\n        <div *ngIf=\\\"hasEditPermission\\\" class=\\\"cell\\\">\\r\\n          <button type=\\\"button\\\" (click)=\\\"editDescription(description)\\\" pButton icon=\\\"pi pi-pencil\\\"></button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Objects Dependency Tree -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Objects Dependency Tree\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <p-tree [value]=\\\"filesTree\\\" layout=\\\"horizontal\\\" selectionMode=\\\"single\\\"></p-tree>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Table Index Fragmentation -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table Index Fragmentation\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Index Name</div>\\r\\n      </div>\\r\\n      <div *ngFor=\\\"let Property of tableFragmentations\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\">\\r\\n          {{Property.indexName}}\\r\\n          <progress-bar [progress]=\\\"Property.percentFragmented\\\" [color-degraded]=\\\"{'0': 'green', '50': 'red'}\\\"></progress-bar>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Table Properties -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table Properties\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Property</div>\\r\\n        <div class=\\\"cell\\\">Value</div>\\r\\n      </div>\\r\\n      <div *ngFor=\\\"let property of properties\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\">{{property.name}}</div>\\r\\n        <div class=\\\"cell\\\">{{property.value}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Table Columns -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table Columns\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n\\r\\n        <div class=\\\"cell\\\">Name</div> \\r\\n        <div class=\\\"cell\\\">Data Type</div>\\r\\n        <div class=\\\"cell\\\">Key</div>\\r\\n        <div class=\\\"cell\\\">Max Length (Bytes)</div>\\r\\n        <div class=\\\"cell\\\">Is Nullable</div>\\r\\n        <div class=\\\"cell\\\">Identity</div>\\r\\n        <div class=\\\"cell\\\">Default</div>\\r\\n        <div class=\\\"cell\\\">Description</div>\\r\\n        <div *ngIf=\\\"hasEditPermission\\\" class=\\\"cell\\\">Actions</div>\\r\\n      </div>\\r\\n      <div *ngFor=\\\"let column of columns\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\">{{column.columnName}}</div>\\r\\n        <div class=\\\"cell\\\">{{column.dataType}}</div>\\r\\n        <div class=\\\"cell\\\">{{column.key}}</div>\\r\\n        <div class=\\\"cell\\\">{{column.maxLength}}</div>\\r\\n        <div class=\\\"cell\\\">{{column.allowNulls}}</div>\\r\\n        <div class=\\\"cell\\\">{{column.identity}}</div>\\r\\n        <div class=\\\"cell\\\">{{column.default}}</div>\\r\\n        <div class=\\\"cell\\\">{{column.description}}</div>\\r\\n        <div *ngIf=\\\"hasEditPermission\\\" class=\\\"cell\\\">\\r\\n          <button *ngIf=\\\"hasEditPermission\\\" pButton type=\\\"button\\\" icon=\\\"pi pi-pencil\\\" (click)=\\\"editColumnDescription(column)\\\"></button>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Table Indices -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table Indices\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Name</div>\\r\\n        <div class=\\\"cell\\\">Columns Name</div>\\r\\n        <div class=\\\"cell\\\">Index Type</div>\\r\\n      </div>\\r\\n      <div *ngFor=\\\"let index of indices\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\">{{index.indexName}}</div>\\r\\n        <div class=\\\"cell\\\">{{index.columns}}</div>\\r\\n        <div class=\\\"cell\\\">{{index.indexType}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Table Key Constraints -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table Key Constraints\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Table View</div>\\r\\n        <div class=\\\"cell\\\">Object Type</div>\\r\\n        <div class=\\\"cell\\\">Constraint Type</div>\\r\\n        <div class=\\\"cell\\\">Constraint Name</div>\\r\\n        <div class=\\\"cell\\\">Details</div>\\r\\n      </div>\\r\\n      <div *ngFor=\\\"let constraint of tableconstraint\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\">{{constraint.table_view}}</div>\\r\\n        <div class=\\\"cell\\\">{{constraint.object_type}}</div>\\r\\n        <div class=\\\"cell\\\">{{constraint.constraint_type}}</div>\\r\\n        <div class=\\\"cell\\\">{{constraint.constraint_name}}</div>\\r\\n        <div class=\\\"cell\\\">{{constraint.details}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <!-- Table Script -->\\r\\n  <!-- <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Table Script\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <app-sql-script-viewer [script]=\\\"createScript.script\\\"></app-sql-script-viewer>\\r\\n  </amexio-accordion-tab> -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Create Script\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"code-container\\\">\\r\\n      <ngx-prism *ngIf=\\\"createScript.script\\\">\\r\\n        {{ createScript.script }}\\r\\n      </ngx-prism>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n</amexio-accordion>\\r\\n<div *ngIf=\\\"hasEditPermission\\\">\\r\\n  <app-edit-description-dialog\\r\\n  [displayDialog]=\\\"displayDialog\\\"\\r\\n  [selectedDescription]=\\\"selectedDescription\\\"\\r\\n  [hasEditPermission]=\\\"hasEditPermission\\\"\\r\\n  (save)=\\\"saveDescription()\\\"\\r\\n  (cancel)=\\\"cancelEdit()\\\">\\r\\n</app-edit-description-dialog>\\r\\n\\r\\n<app-edit-column-description-dialog\\r\\n  [displayColumnDialog]=\\\"displayColumnDialog\\\"\\r\\n  [selectedColumn]=\\\"selectedColumn\\\"\\r\\n  (saveColumnDescription)=\\\"saveColumnDescription()\\\"\\r\\n  (cancelColumnEdit)=\\\"cancelColumnEdit()\\\">\\r\\n</app-edit-column-description-dialog>\\r\\n\\r\\n</div>\\r\\n\"","export default \"<select [(ngModel)]=\\\"selectedDatabase\\\">\\n    <option value=\\\"AdventureWorks2022\\\">AdventureWorks2022</option>\\n    <option value=\\\"MyDatabase\\\">MyDatabase</option>\\n  </select>\\n  <button (click)=\\\"onChangeDatabase()\\\">Change Database</button>\"","export default \"\\r\\n<app-procedure></app-procedure>\"","export default \"\"","export default \"<amexio-accordion [multi-open]=\\\"true\\\">\\r\\n  <!-- Database Tab -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" [gradient]=\\\"true\\\" header=\\\"Database\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"cell\\\">\\r\\n        <h3>\\r\\n          <p class=\\\"fa fa-database\\\">\\r\\n            {{databaseMetaData.currentDatabaseName}}\\r\\n          </p>\\r\\n        </h3>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" [gradient]=\\\"true\\\" header=\\\"Object Types\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"cell\\\">\\r\\n        <ul>\\r\\n          <div *ngFor=\\\"let item of objectTypeItems\\\">\\r\\n            <app-object-type-item [icon]=\\\"item.icon\\\"\\r\\n                                  [label]=\\\"item.label\\\"\\r\\n                                  [count]=\\\"item.count\\\"\\r\\n                                  [visible]=\\\"item.visible\\\">\\r\\n            </app-object-type-item>\\r\\n          </div>\\r\\n        </ul>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" [gradient]=\\\"true\\\" header=\\\"Database Properties\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Property</div>\\r\\n        <div class=\\\"cell\\\">Value</div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngFor=\\\"let property of databaseMetaData.serverProperties\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\" data-title=\\\"Property\\\">{{property.name}}</div>\\r\\n        <div class=\\\"cell\\\" data-title=\\\"Value\\\">{{property.value}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" [gradient]=\\\"true\\\" header=\\\"Database Options\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Property</div>\\r\\n        <div class=\\\"cell\\\">Value</div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngFor=\\\"let option of databaseMetaData.serverAdvanceProperties\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\" data-title=\\\"Property\\\">{{option.name}}</div>\\r\\n        <div class=\\\"cell\\\" data-title=\\\"Value\\\">{{option.value}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n  <!-- Files Tab -->\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" [gradient]=\\\"true\\\" header=\\\"Files\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Type</div>\\r\\n        <div class=\\\"cell\\\">File Locations </div>\\r\\n        <div class=\\\"cell\\\">Current Size</div>\\r\\n        <div class=\\\"cell\\\">Max Size in MB</div>\\r\\n        <div class=\\\"cell\\\">Growth Type</div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngFor=\\\"let file of databaseMetaData.fileInformations\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\" data-title=\\\"fileType\\\">{{file.fileType}}</div>\\r\\n        <div class=\\\"cell\\\" data-title=\\\"fileLocation\\\">{{file.fileLocation}} MB</div>\\r\\n        <div class=\\\"cell\\\" data-title=\\\"currentSizeMB\\\">{{file.currentSizeMB}}</div>\\r\\n        <div class=\\\"cell\\\" data-title=\\\"maxSizeMB\\\">{{file.maxSizeMB}}</div>\\r\\n        <div class=\\\"cell\\\" data-title=\\\"growthType\\\">{{file.growthType}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n</amexio-accordion>\\r\\n\"","export default \"<li *ngIf=\\\"visible\\\">\\r\\n    <div>\\r\\n      <img [src]=\\\"icon\\\" />\\r\\n      <a>{{ label }}</a>\\r\\n      <i *ngIf=\\\"count\\\" class=\\\"fa fa-5x fa-border icon-grey badge\\\">\\r\\n        {{ count }}\\r\\n      </i>\\r\\n    </div>\\r\\n  </li>\"","export default \"<div class=\\\" \\\">\\r\\n    <div class=\\\"cell\\\">  \\r\\n      <amexio-tree-filter-view [data-reader]=\\\"'data'\\\"\\r\\n                               (nodeClick)=\\\"getNodeData($event)\\\"\\r\\n                               [data]=\\\"leftmenujsonvalues\\\">\\r\\n      </amexio-tree-filter-view> \\r\\n    </div>\\r\\n  </div>\"","export default \".table {\\r\\n  margin: 0px 0 3px 0;\\r\\n  width: 100%;\\r\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\\r\\n  display: table;\\r\\n}\\r\\n\\r\\n@media screen and (max-width: 580px) {\\r\\n  .table {\\r\\n    display: block;\\r\\n  }\\r\\n}\\r\\n\\r\\n.row {\\r\\n  display: table-row;\\r\\n  background: #f6f6f6;\\r\\n}\\r\\n\\r\\n.row:nth-of-type(odd) {\\r\\n    background: #e9e9e9;\\r\\n  }\\r\\n\\r\\n.row.header {\\r\\n    font-weight: 900;\\r\\n    color: #ffffff;\\r\\n    background: #184569 !important;\\r\\n  }\\r\\n\\r\\n.row.green {\\r\\n    background: #27ae60;\\r\\n  }\\r\\n\\r\\n.row.blue {\\r\\n    background: #2980b9;\\r\\n  }\\r\\n\\r\\n@media screen and (max-width: 580px) {\\r\\n  .row {\\r\\n    padding: 14px 0 7px;\\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n    .row.header {\\r\\n      padding: 0;\\r\\n      height: 6px;\\r\\n    }\\r\\n\\r\\n      .row.header .cell {\\r\\n        display: none;\\r\\n      }\\r\\n\\r\\n    .row .cell {\\r\\n      margin-bottom: 10px;\\r\\n    }\\r\\n\\r\\n      .row .cell:before {\\r\\n        margin-bottom: 3px;\\r\\n        content: attr(data-title);\\r\\n        min-width: 98px;\\r\\n        font-size: 10px;\\r\\n        line-height: 10px;\\r\\n        font-weight: bold;\\r\\n        text-transform: uppercase;\\r\\n        color: #969696;\\r\\n        display: block;\\r\\n      }\\r\\n}\\r\\n\\r\\n.cell {\\r\\n  /*  padding: 6px 12px; */\\r\\n  display: table-cell;\\r\\n}\\r\\n\\r\\n@media screen and (max-width: 580px) {\\r\\n  .cell {\\r\\n    padding: 2px 16px;\\r\\n    display: block;\\r\\n  }\\r\\n}\\r\\n\\r\\na.btn:hover {\\r\\n  -webkit-transform: scale(1.1);\\r\\n  -moz-transform: scale(1.1);\\r\\n  -o-transform: scale(1.1);\\r\\n}\\r\\n\\r\\na.btn {\\r\\n  -webkit-transform: scale(0.8);\\r\\n  -moz-transform: scale(0.8);\\r\\n  -o-transform: scale(0.8);\\r\\n  -webkit-transition-duration: 0.5s;\\r\\n  -moz-transition-duration: 0.5s;\\r\\n  -o-transition-duration: 0.5s;\\r\\n}\\r\\n\\r\\n#RotateDiv {\\r\\n  /* background-color: yellow;\\r\\n  border: 1px solid black;\\r\\n  -webkit-transform: rotateZ(90deg);  \\r\\n  transform: rotateZ(90deg);   */\\r\\n}\\r\\n\\r\\nh4 {\\r\\n  text-align: center;\\r\\n  margin: 0 0 8px 0;\\r\\n}\\r\\n\\r\\n.ui-inputtext {\\r\\n  padding-top: 0;\\r\\n  padding-bottom: 0;\\r\\n  font-size: 12px;\\r\\n}\\r\\n\\r\\n.progress-inner {\\r\\n  min-width: 1% !important;\\r\\n}\\r\\n\\r\\n/* Code container for improved readability */\\r\\n\\r\\n.code-container {\\r\\n  max-height: 400px;  /* Prevents excessive scrolling */\\r\\n  overflow-y: auto;  /* Enables vertical scroll when needed */\\r\\n  padding: 10px;\\r\\n  background-color: #2d2d2d; /* Dark background for contrast */\\r\\n  border-radius: 5px;\\r\\n  border: 1px solid #444;\\r\\n}\\r\\n\\r\\n/* ngx-prism styling for better text display */\\r\\n\\r\\nngx-prism {\\r\\n  display: block;\\r\\n  white-space: pre-wrap !important; /* Ensures proper line breaks */\\r\\n  word-wrap: break-word !important; /* Prevents long lines from breaking UI */\\r\\n  overflow-x: auto; /* Enables horizontal scroll for very long SQL statements */\\r\\n  background: #272822 !important; /* Dark theme for syntax highlighting */\\r\\n  color: #f8f8f2 !important; /* Light text for readability */\\r\\n  padding: 10px;\\r\\n  border-radius: 5px;\\r\\n  font-size: 14px;\\r\\n  line-height: 1.5; /* Increases spacing for better readability */\\r\\n  font-family: 'Courier New', Courier, monospace;\\r\\n}\\r\\n\\r\\n/* Scrollbar customization for better UX */\\r\\n\\r\\nngx-prism::-webkit-scrollbar {\\r\\n  width: 6px;\\r\\n  height: 6px;\\r\\n}\\r\\n\\r\\nngx-prism::-webkit-scrollbar-thumb {\\r\\n  background: #555;\\r\\n  border-radius: 3px;\\r\\n}\\r\\n\\r\\nngx-prism::-webkit-scrollbar-track {\\r\\n  background: #222;\\r\\n}\\r\\n\"","export default \"<footer class=\\\"footer\\\"> \\r\\n   \\r\\n  </footer>\\r\\n\"","export default \"/* Base styles */\\r\\n:host {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  height: calc(100vh - 25px); /* Adjust height to fit between header and footer */\\r\\n  width: 100%;\\r\\n  overflow: hidden;\\r\\n}\\r\\n.split-example {\\r\\n  height: 100%;\\r\\n  margin-left: 5px !important;\\r\\n}\\r\\n/* Split bar visibility */\\r\\n.HideSplitBar {\\r\\n  flex: 0 0 0 !important;\\r\\n}\\r\\n.HideSplitBar div {\\r\\n  display: none !important;\\r\\n}\\r\\n.showSplitBar div {\\r\\n  display: block !important;\\r\\n}\\r\\n/* Full-page and partial modes */\\r\\n.ShowFullPageMode {\\r\\n  order: 2;\\r\\n  flex: 0 0 calc(100% - 15px) !important;\\r\\n}\\r\\n/* Scrollbar styling */\\r\\n::-webkit-scrollbar {\\r\\n  width: 10px;\\r\\n}\\r\\n.setWindowHeight {\\r\\n  height: calc(100vh - 1px); /* Adjust height dynamically */\\r\\n  overflow-y: auto;\\r\\n}\\r\\n.scrollbar {\\r\\n  overflow-y: auto;\\r\\n  overflow-x: hidden;\\r\\n}\\r\\n/* Responsive adjustments for small screens */\\r\\n@media (max-width: 767px) {\\r\\n  .body-content {\\r\\n    padding-top: 50px; /* Space for the nav menu */\\r\\n  }\\r\\n}\\r\\n/* Responsive layout adjustments */\\r\\n@media only screen and (max-width: 600px) {\\r\\n  #leftMenu, #asSplitArea2 {\\r\\n    flex: 0 0 50%;\\r\\n  }\\r\\n}\\r\\n@media only screen and (min-width: 601px) and (max-width: 1200px) {\\r\\n  #leftMenu {\\r\\n    flex: 0 0 30%;\\r\\n  }\\r\\n  #asSplitArea2 {\\r\\n    flex: 0 0 70%;\\r\\n  }\\r\\n}\\r\\n@media only screen and (min-width: 1201px) {\\r\\n  #leftMenu {\\r\\n    flex: 0 0 25%;\\r\\n  }\\r\\n  #asSplitArea2 {\\r\\n    flex: 0 0 75%;\\r\\n  }\\r\\n}\\r\\n\"","export default \"<p-dialog header=\\\"Edit Description\\\"\\r\\n          [(visible)]=\\\"displayDialog\\\"\\r\\n          modal=\\\"true\\\"\\r\\n          [responsive]=\\\"true\\\"\\r\\n          styleClass=\\\"custom-dialog\\\"\\r\\n          [style]=\\\"{width: '350px', minWidth: '200px'}\\\"\\r\\n          [minY]=\\\"70\\\"\\r\\n          [maximizable]=\\\"true\\\"\\r\\n          [baseZIndex]=\\\"10000\\\">\\r\\n  <div class=\\\"p-fluid\\\">\\r\\n    <div class=\\\"p-formgrid p-grid\\\">\\r\\n      <div class=\\\"p-field p-col\\\">\\r\\n        <label for=\\\"name\\\">Extended Properties Name</label>\\r\\n        <textarea rows=\\\"5\\\"\\r\\n                  cols=\\\"30\\\"\\r\\n                  [disabled]=\\\"true\\\"\\r\\n                  pInputTextarea\\r\\n                  [autoResize]=\\\"true\\\"\\r\\n                  [(ngModel)]=\\\"selectedDescription.name\\\"\\r\\n                  placeholder=\\\"Enter name\\\">\\r\\n        </textarea>\\r\\n      </div>\\r\\n      <div class=\\\"p-field p-col\\\">\\r\\n        <label for=\\\"value\\\">Extended Properties Value</label>\\r\\n        <textarea rows=\\\"5\\\"\\r\\n                  cols=\\\"30\\\"\\r\\n                  pInputTextarea\\r\\n                  [autoResize]=\\\"true\\\"\\r\\n                  [(ngModel)]=\\\"selectedDescription.value\\\"\\r\\n                  placeholder=\\\"Enter value\\\">\\r\\n        </textarea>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <p-footer>\\r\\n    <button *ngIf=\\\"hasEditPermission\\\"\\r\\n            pButton\\r\\n            label=\\\"Save\\\"\\r\\n            icon=\\\"pi pi-check\\\"\\r\\n            (click)=\\\"saveDescription()\\\"\\r\\n            class=\\\"p-button-success\\\">\\r\\n    </button>\\r\\n    <button pButton\\r\\n            label=\\\"Cancel\\\"\\r\\n            icon=\\\"pi pi-times\\\"\\r\\n            class=\\\"p-button-secondary\\\"\\r\\n            (click)=\\\"cancelEdit()\\\">\\r\\n    </button>\\r\\n  </p-footer>\\r\\n</p-dialog>\\r\\n\"","export default \"\"","export default \"\"","export default \"\\r\\n#Objects li:last-child {\\r\\n    display: none;\\r\\n  }\\r\\n  .table {\\r\\n  margin:  0px 0 3px 0;\\r\\n    width: 100%;\\r\\n    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\\r\\n    display: table;\\r\\n  }\\r\\n  @media screen and (max-width: 580px) {\\r\\n    .table {\\r\\n      display: block;\\r\\n    }\\r\\n  }\\r\\n  .row {\\r\\n    display: table-row;\\r\\n    background: #f6f6f6;\\r\\n  }\\r\\n  .row:nth-of-type(odd) {\\r\\n      background: #e9e9e9;\\r\\n    }\\r\\n  .row.header {\\r\\n      font-weight: 900;\\r\\n      color: #ffffff;\\r\\n      background: #184569 !important;\\r\\n    }\\r\\n  .row.green {\\r\\n      background: #27ae60;\\r\\n    }\\r\\n  .row.blue {\\r\\n      background: #2980b9;\\r\\n    }\\r\\n  @media screen and (max-width: 580px) {\\r\\n    .row {\\r\\n      padding: 14px 0 7px;\\r\\n      display: block;\\r\\n    }\\r\\n  \\r\\n      .row.header {\\r\\n        padding: 0;\\r\\n        height: 6px;\\r\\n      }\\r\\n  \\r\\n        .row.header .cell {\\r\\n          display: none;\\r\\n        }\\r\\n  \\r\\n      .row .cell {\\r\\n        margin-bottom: 10px;\\r\\n      }\\r\\n  \\r\\n        .row .cell:before {\\r\\n          margin-bottom: 3px;\\r\\n          content: attr(data-title);\\r\\n          min-width: 98px;\\r\\n          font-size: 10px;\\r\\n          line-height: 10px;\\r\\n          font-weight: bold;\\r\\n          text-transform: uppercase;\\r\\n          color: #969696;\\r\\n          display: block;\\r\\n        }\\r\\n  }\\r\\n  .cell {\\r\\n  /*  padding: 6px 12px; */\\r\\n    display: table-cell;\\r\\n  }\\r\\n  @media screen and (max-width: 580px) {\\r\\n    .cell {\\r\\n      padding: 2px 16px;\\r\\n      display: block;\\r\\n    }\\r\\n  }\\r\\n  .node:hover {\\r\\n    fill: #ec008c;\\r\\n    opacity: 1;\\r\\n  }\\r\\n  .modal-dialog {\\r\\n    width: 100%;\\r\\n    height: 100%;\\r\\n    margin: 0;\\r\\n    padding: 0;\\r\\n  }\\r\\n  .modal-content {\\r\\n    height: auto;\\r\\n    min-height: 100%;\\r\\n    border: 0 none;\\r\\n    border-radius: 0;\\r\\n    box-shadow: none;\\r\\n  }\\r\\n  \"","export default \"\"","export default \"<app-header></app-header>\\r\\n<div id=\\\"main-content\\\">  \\r\\n  <ngx-ui-loader></ngx-ui-loader>\\r\\n  <div style=\\\"margin-left: initial; margin-top: 5px;\\\">\\r\\n    <div class=\\\"split-example ex-percent\\\">\\r\\n      <as-split unit=\\\"percent\\\"\\r\\n                direction=\\\"horizontal\\\"\\r\\n                #split=\\\"asSplit\\\"\\r\\n                gutterSize=\\\"10\\\"\\r\\n                [gutterDblClickDuration]=\\\"dblClickTime\\\"\\r\\n                [useTransition]=\\\"useTransition\\\"\\r\\n                (dragStart)=\\\"log('dragStart', $event)\\\"\\r\\n                (dragEnd)=\\\"log('dragEnd', $event)\\\"\\r\\n                (gutterClick)=\\\"log('gutterClick', $event)\\\"\\r\\n                (gutterDblClick)=\\\"log('gutterDblClick', $event)\\\"\\r\\n                (transitionEnd)=\\\"log('transitionEnd', $event)\\\"> \\r\\n        \\r\\n                <as-split-area [ngClass]=\\\"status ? 'HideSplitBar' : 'showSplitBar'\\\" size=\\\"25\\\" #area1=\\\"asSplitArea\\\">\\r\\n                  <div class=\\\"scollbar scrollbar-primary pre-scrollable leftmenuExtendedProperties setWindowHeight\\\" id=\\\"leftMenu\\\">\\r\\n                    <app-leftmenu></app-leftmenu>\\r\\n                  </div>\\r\\n                </as-split-area>\\r\\n                <as-split-area size=\\\"75\\\" [ngClass]=\\\"status ? 'ShowFullPageMode' : 'RemoveFullPageMode'\\\" #area2=\\\"asSplitArea\\\" id=\\\"asSplitArea2\\\">\\r\\n                  <div class=\\\"scollbar scrollbar-primary setWindowHeight\\\">\\r\\n                    <div id=\\\"center\\\">\\r\\n                      <app-main-page></app-main-page>\\r\\n                    </div>\\r\\n                  </div>\\r\\n                </as-split-area>\\r\\n       \\r\\n      </as-split>\\r\\n    </div>\\r\\n    <hr />\\r\\n  </div>\\r\\n</div>\\r\\n\"","export default \"<amexio-accordion [multi-open]=\\\"true\\\">\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Stored Procedure \\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"cell\\\">\\r\\n        <div>\\r\\n          <h5>\\r\\n            <img src=\\\"./assets/icons/StoredProcedure.png\\\" style=\\\"width: 30px !important;\\\">\\r\\n            {{storedProcedureName}}\\r\\n          </h5>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n  <amexio-accordion-tab amexioColorPalette\\r\\n                        [color-palette]=\\\"''\\\"\\r\\n                        header=\\\"MS Description\\\"\\r\\n                        [gradient]=\\\"true\\\"\\r\\n                        [active]=\\\"true\\\">\\r\\n\\r\\n    <!-- Display Mode -->\\r\\n    <ng-container *ngIf=\\\"!iblnShowEditBox; else editMode\\\">\\r\\n      <div class=\\\"description-container\\\">\\r\\n        <a (click)=\\\"toggleEditBox()\\\" class=\\\"edit-icon\\\">\\r\\n          <i class=\\\"fa fa-edit\\\"></i>\\r\\n        </a>\\r\\n        <p class=\\\"description-text\\\">\\r\\n          {{ storedProcedureMetadata?.storedProcedureInfo?.extendedProperty }}\\r\\n        </p>\\r\\n      </div>\\r\\n    </ng-container>\\r\\n\\r\\n    <!-- Edit Mode -->\\r\\n    <ng-template #editMode>\\r\\n      <div class=\\\"edit-container\\\">\\r\\n        <textarea class=\\\"form-control edit-textarea\\\"\\r\\n                  rows=\\\"4\\\"\\r\\n                  [(ngModel)]=\\\"storedProcedureMetadata.storedProcedureInfo.extendedProperty\\\">\\r\\n      </textarea>\\r\\n\\r\\n        <div class=\\\"action-buttons\\\">\\r\\n          <a (click)=\\\"CancelStoreProcMsDesciption()\\\" class=\\\"cancel-btn\\\">\\r\\n            <i class=\\\"fa fa-2x fa-times\\\"></i>\\r\\n          </a>\\r\\n          <a (click)=\\\"updateProcedureDescription()\\\" class=\\\"save-btn\\\">\\r\\n            <i class=\\\"fa fa-2x fa-save\\\"></i>\\r\\n          </a>\\r\\n        </div>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Objects dependncy Tree\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <p-tree [value]=\\\"filesTree\\\"\\r\\n            layout=\\\"horizontal\\\"\\r\\n            selectionMode=\\\"single\\\">\\r\\n    </p-tree>\\r\\n  </amexio-accordion-tab>\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Parameters\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Edit</div>\\r\\n        <div class=\\\"cell\\\">Name</div>\\r\\n        <div class=\\\"cell\\\">Type</div>\\r\\n        <div class=\\\"cell\\\">Max Length (Bytes)</div>\\r\\n        <div class=\\\"cell\\\">Parameter Order</div>\\r\\n        <div class=\\\"cell\\\">Collation</div>\\r\\n        <div class=\\\"cell\\\">MS Description</div>\\r\\n      </div>\\r\\n\\r\\n      <div *ngFor=\\\"let property of storedProcedureMetadata?.parameters\\\" class=\\\"row\\\">\\r\\n        <!-- Edit Button at the Front -->\\r\\n        <div class=\\\"cell edit-cell\\\">\\r\\n          <a (click)=\\\"toggleParameterEdit(property)\\\" class=\\\"edit-icon\\\">\\r\\n            <span class=\\\"fa fa-edit\\\"></span>\\r\\n          </a>\\r\\n        </div>\\r\\n        <div class=\\\"cell\\\">{{ property.parameterName }}</div>\\r\\n        <div class=\\\"cell\\\">{{ property.type }}</div>\\r\\n        <div class=\\\"cell\\\">{{ property.length }}</div>\\r\\n        <div class=\\\"cell\\\">{{ property.parameterOrder }}</div>\\r\\n        <div class=\\\"cell\\\">{{ property.collation }}</div>\\r\\n\\r\\n        <!-- MS Description Column -->\\r\\n        <div class=\\\"cell\\\">\\r\\n          <div *ngIf=\\\"!property.isEditing\\\">\\r\\n            <p>{{ property.extendedProperty }}</p>\\r\\n          </div>\\r\\n\\r\\n          <div *ngIf=\\\"property.isEditing\\\">\\r\\n            <textarea class=\\\"edit-textarea\\\" [(ngModel)]=\\\"property.extendedProperty\\\"></textarea>\\r\\n\\r\\n            <div class=\\\"action-buttons\\\">\\r\\n              <a (click)=\\\"toggleParameterEdit(property)\\\" class=\\\"cancel-btn\\\">\\r\\n                <i class=\\\"fa fa-times\\\"></i>\\r\\n              </a>\\r\\n              <a (click)=\\\"updateParameterDescription(property)\\\" class=\\\"save-btn\\\">\\r\\n                <i class=\\\"fa fa-save\\\"></i>\\r\\n              </a>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Create Script\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"code-container\\\">\\r\\n      <ngx-prism *ngIf=\\\"storedProcedureMetadata?.createScript?.procedureDefinition\\\" [language]=\\\"'sql'\\\">\\r\\n        {{ storedProcedureMetadata?.createScript?.procedureDefinition }}\\r\\n      </ngx-prism>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Used by \\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\"> Referenced object name </div>\\r\\n      </div>\\r\\n      <div *ngFor=\\\"let property of storedProcedureMetadata?.dependencies \\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\"> {{property.referencedObjectName}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n  \\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Execution Plan\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"execution-plan-container\\\">\\r\\n      <div id=\\\"container\\\"></div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\\r\\n</amexio-accordion>\\r\\n\"","export default \"/* ===== General Table Styling ===== */\\r\\n.table {\\r\\n  width: 100%;\\r\\n  border-collapse: collapse;\\r\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\\r\\n}\\r\\n/* ===== Table Row Styles ===== */\\r\\n.row {\\r\\n  display: table-row;\\r\\n  background: #f6f6f6;\\r\\n}\\r\\n.row:nth-of-type(odd) {\\r\\n  background: #e9e9e9;\\r\\n}\\r\\n.row.header {\\r\\n  font-weight: 900;\\r\\n  color: #ffffff;\\r\\n  background: #184569;\\r\\n}\\r\\n/* Additional Row Styles */\\r\\n.row.green {\\r\\n  background: #27ae60;\\r\\n}\\r\\n.row.blue {\\r\\n  background: #2980b9;\\r\\n}\\r\\n/* ===== Table Cells ===== */\\r\\n.cell {\\r\\n  display: table-cell;\\r\\n  padding: 6px 12px;\\r\\n}\\r\\n/* ===== Edit Button Positioning ===== */\\r\\n.edit-cell {\\r\\n  text-align: center;\\r\\n  width: 50px;\\r\\n}\\r\\n/* Edit Icon Styles */\\r\\n.edit-icon {\\r\\n  font-size: 18px;\\r\\n  color: #007bff;\\r\\n  cursor: pointer;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n.edit-icon:hover {\\r\\n  color: #0056b3;\\r\\n}\\r\\n/* ===== Description Container for Editable Fields ===== */\\r\\n.description-container {\\r\\n  display: flex;\\r\\n  align-items: center;\\r\\n  padding: 10px;\\r\\n  background-color: #f1f1f1;\\r\\n  border-radius: 5px;\\r\\n  flex-wrap: wrap;\\r\\n}\\r\\n.description-text {\\r\\n  max-width: 80%;\\r\\n  font-size: 14px;\\r\\n  line-height: 1.5;\\r\\n}\\r\\n/* ===== Edit Mode Styles ===== */\\r\\n.edit-container {\\r\\n  display: flex;\\r\\n  flex-direction: column;\\r\\n  width: 100%;\\r\\n  max-width: 600px;\\r\\n  margin: auto;\\r\\n}\\r\\n.edit-textarea {\\r\\n  width: 100%;\\r\\n  resize: vertical;\\r\\n  padding: 10px;\\r\\n  border-radius: 5px;\\r\\n  font-size: 14px;\\r\\n  border: 1px solid #ccc;\\r\\n}\\r\\n/* ===== Action Buttons (Save & Cancel) ===== */\\r\\n.action-buttons {\\r\\n  display: flex;\\r\\n  justify-content: flex-end;\\r\\n  margin-top: 10px;\\r\\n}\\r\\n.action-buttons a {\\r\\n  cursor: pointer;\\r\\n  margin-left: 10px;\\r\\n  font-size: 16px;\\r\\n}\\r\\n.cancel-btn i {\\r\\n  color: #d9534f;\\r\\n}\\r\\n.save-btn i {\\r\\n  color: #5cb85c;\\r\\n}\\r\\n.cancel-btn i:hover {\\r\\n  color: #c9302c;\\r\\n}\\r\\n.save-btn i:hover {\\r\\n  color: #449d44;\\r\\n}\\r\\n/* ===== Responsive Table Adjustments ===== */\\r\\n@media screen and (max-width: 580px) {\\r\\n  .table {\\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n  .row {\\r\\n    padding: 14px 0 7px;\\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n  .row.header {\\r\\n    padding: 0;\\r\\n    height: 6px;\\r\\n  }\\r\\n\\r\\n  .row.header .cell {\\r\\n    display: none;\\r\\n  }\\r\\n\\r\\n  .row .cell {\\r\\n    margin-bottom: 10px;\\r\\n  }\\r\\n\\r\\n  .row .cell:before {\\r\\n    margin-bottom: 3px;\\r\\n    content: attr(data-title);\\r\\n    min-width: 98px;\\r\\n    font-size: 10px;\\r\\n    line-height: 10px;\\r\\n    font-weight: bold;\\r\\n    text-transform: uppercase;\\r\\n    color: #969696;\\r\\n    display: block;\\r\\n  }\\r\\n\\r\\n  .cell {\\r\\n    padding: 2px 16px;\\r\\n    display: block;\\r\\n  }\\r\\n}\\r\\n/* ===== Button Hover Effects ===== */\\r\\na.btn {\\r\\n  transition: transform 0.5s;\\r\\n}\\r\\na.btn:hover {\\r\\n  transform: scale(1.1);\\r\\n}\\r\\n/* ===== Headings ===== */\\r\\nh4 {\\r\\n  text-align: center;\\r\\n  margin: 0 0 8px 0;\\r\\n}\\r\\n/* ===== Input Field Adjustments ===== */\\r\\n.ui-inputtext {\\r\\n  padding-top: 0;\\r\\n  padding-bottom: 0;\\r\\n  font-size: 12px;\\r\\n}\\r\\n/* ===== Progress Bar Fixes ===== */\\r\\n.progress-inner {\\r\\n  min-width: 1% !important;\\r\\n}\\r\\n/* Ensure the textarea fits inside the cell */\\r\\n.edit-textarea {\\r\\n  width: 100%;\\r\\n  min-height: 50px;\\r\\n  max-height: 100px;\\r\\n  resize: vertical;\\r\\n  padding: 5px;\\r\\n  border-radius: 5px;\\r\\n  font-size: 14px;\\r\\n  border: 1px solid #ccc;\\r\\n  word-wrap: break-word;\\r\\n  white-space: normal;\\r\\n  overflow-y: auto;\\r\\n  box-sizing: border-box; /* Prevents overflow beyond parent cell */\\r\\n}\\r\\n/* Align action buttons properly */\\r\\n.action-buttons {\\r\\n  display: flex;\\r\\n  justify-content: flex-start;\\r\\n  align-items: center;\\r\\n  margin-top: 5px;\\r\\n  gap: 10px; /* Adds space between buttons */\\r\\n}\\r\\n/* Adjust Cancel (X) and Save (💾) Icons */\\r\\n.action-buttons a {\\r\\n  cursor: pointer;\\r\\n  font-size: 16px;\\r\\n}\\r\\n.cancel-btn i {\\r\\n  color: #d9534f;\\r\\n}\\r\\n.save-btn i {\\r\\n  color: #5cb85c;\\r\\n}\\r\\n.cancel-btn i:hover {\\r\\n  color: #c9302c;\\r\\n}\\r\\n.save-btn i:hover {\\r\\n  color: #449d44;\\r\\n}\\r\\n/* Container for code block */\\r\\n.code-container {\\r\\n  max-height: 400px;  /* Prevents excessive scrolling */\\r\\n  overflow-y: auto;  /* Enables vertical scroll if content is too long */\\r\\n  padding: 10px;\\r\\n  background-color: #2d2d2d; /* Dark background for readability */\\r\\n  border-radius: 5px;\\r\\n  border: 1px solid #444;\\r\\n}\\r\\n/* Ensures ngx-prism styles correctly */\\r\\nngx-prism {\\r\\n  display: block;\\r\\n  white-space: pre-wrap !important; /* Prevents horizontal scrolling */\\r\\n  word-wrap: break-word !important;\\r\\n  overflow-x: hidden; /* Ensures content does not overflow horizontally */\\r\\n  background: #272822 !important; /* Dark background for contrast */\\r\\n  color: #f8f8f2 !important; /* Light text for readability */\\r\\n  padding: 10px;\\r\\n  border-radius: 5px;\\r\\n  font-size: 14px;\\r\\n  line-height: 1.5; /* Adjust line height for better readability */\\r\\n  font-family: 'Courier New', Courier, monospace;\\r\\n}\\r\\n/* Hide unnecessary horizontal scrollbar */\\r\\nngx-prism::-webkit-scrollbar {\\r\\n  width: 6px;\\r\\n  height: 6px;\\r\\n}\\r\\nngx-prism::-webkit-scrollbar-thumb {\\r\\n  background: #555;\\r\\n  border-radius: 3px;\\r\\n}\\r\\nngx-prism::-webkit-scrollbar-track {\\r\\n  background: #222;\\r\\n}\\r\\n\"","export default \"\"","export default \"\"","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","export default \"<p-dialog header=\\\"Edit Column Description\\\"\\r\\n          [(visible)]=\\\"displayColumnDialog\\\"\\r\\n          modal=\\\"true\\\"\\r\\n          [responsive]=\\\"true\\\"\\r\\n          styleClass=\\\"custom-dialog\\\"\\r\\n          [style]=\\\"{width: '350px', minWidth: '200px'}\\\"\\r\\n          [minY]=\\\"70\\\"\\r\\n          [maximizable]=\\\"true\\\"\\r\\n          [baseZIndex]=\\\"10000\\\">\\r\\n  <div class=\\\"p-fluid\\\">\\r\\n    <div class=\\\"p-formgrid p-grid\\\">\\r\\n      <div class=\\\"p-field p-col\\\">\\r\\n        <label for=\\\"value\\\">Column Extended Properties Value</label>\\r\\n        <textarea rows=\\\"5\\\"\\r\\n                  cols=\\\"30\\\"\\r\\n                  pInputTextarea\\r\\n                  [autoResize]=\\\"true\\\"\\r\\n                  [(ngModel)]=\\\"selectedColumn.description\\\"\\r\\n                  placeholder=\\\"Enter Description\\\">\\r\\n        </textarea>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <p-footer>\\r\\n    <button pButton\\r\\n            label=\\\"Save\\\"\\r\\n            icon=\\\"pi pi-check\\\"\\r\\n            (click)=\\\"saveDescription()\\\"\\r\\n            class=\\\"p-button-success\\\">\\r\\n    </button>\\r\\n    <button pButton\\r\\n            label=\\\"Cancel\\\"\\r\\n            icon=\\\"pi pi-times\\\"\\r\\n            class=\\\"p-button-secondary\\\"\\r\\n            (click)=\\\"cancelEdit()\\\">\\r\\n    </button>\\r\\n  </p-footer>\\r\\n</p-dialog>\\r\\n\"","export default \"<p>view works!</p>\\r\\n\"","export default \"\"","export default \"<div class=\\\"table\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <pre>{{ script }}</pre>\\r\\n    </div>\\r\\n  </div>\\r\\n \"","export default \" /* Style for table header */\\r\\n .p-table thead th {\\r\\n    text-align: left;\\r\\n    padding: 8px;\\r\\n    background-color: #f4f4f4;\\r\\n  }\\r\\n /* Style for table cells */\\r\\n .p-table td {\\r\\n    padding: 8px;\\r\\n    border-bottom: 1px solid #ddd;\\r\\n  }\\r\\n /* Style for the expanded row content */\\r\\n .table {\\r\\n    width: 100%;\\r\\n    border-collapse: collapse;\\r\\n    margin-top: 10px;\\r\\n  }\\r\\n .table .row {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n  }\\r\\n .table .header {\\r\\n    font-weight: bold;\\r\\n    background-color: #f4f4f4;\\r\\n  }\\r\\n .table .cell {\\r\\n    padding: 8px;\\r\\n    border-bottom: 1px solid #ddd;\\r\\n    flex: 1;\\r\\n  }\\r\\n .table .row:nth-child(even) {\\r\\n    background-color: #f9f9f9;\\r\\n  }\\r\\n .table .row:hover {\\r\\n    background-color: #f1f1f1;\\r\\n  }\\r\\n /* Add hover effect for row togglers */\\r\\n .p-table a {\\r\\n    text-decoration: none;\\r\\n    color: #007bff;\\r\\n  }\\r\\n .p-table a:hover {\\r\\n    text-decoration: underline;\\r\\n  }\"","export default \"<header class=\\\"header\\\">\\r\\n  <!--<div class=\\\"sql-settings\\\">\\r\\n    <label for=\\\"sql-server\\\">Select Database:</label>\\r\\n    <select id=\\\"sql-server\\\" (change)=\\\"onChangeServer($event)\\\">\\r\\n      <option value=\\\"server1\\\">SQL Server 1</option>\\r\\n      <option value=\\\"server2\\\">SQL Server 2</option>-->\\r\\n      <!-- Add more servers as needed -->\\r\\n    <!--</select>\\r\\n  </div>-->\\r\\n  <app-database-selector></app-database-selector>\\r\\n  </header>\\r\\n\"","export default \"/* Add any specific styles for the SQL script viewer here */\\r\\n.table {\\r\\n    width: 100%;\\r\\n  }\\r\\n.row {\\r\\n    display: flex;\\r\\n    flex-wrap: wrap;\\r\\n    margin-right: -15px;\\r\\n    margin-left: 0px;\\r\\n \\r\\n  }\\r\\n.header {\\r\\n    font-weight: bold;\\r\\n  }\\r\\n.cell {\\r\\n    padding: 8px;\\r\\n  }\\r\\npre {\\r\\n    white-space: pre-wrap; /* Ensures the script wraps and is readable */\\r\\n  }\\r\\n  \"","export default \"<!-- <amexio-accordion [multi-open]=\\\"true\\\">\\r\\n    <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" [gradient]=\\\"true\\\" header=\\\"Tables\\\" [active]=\\\"true\\\">\\r\\n      <p-table [columns]=\\\"cols\\\" [value]=\\\"tables\\\" dataKey=\\\"tableName\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">  \\r\\n        <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n          <tr>\\r\\n            <th style=\\\"width: 4em\\\"></th>\\r\\n            <th>Table Name</th>\\r\\n            <th>Description</th>\\r\\n          </tr>\\r\\n        </ng-template>\\r\\n        <ng-template pTemplate=\\\"body\\\" let-rowData let-expanded=\\\"expanded\\\" let-columns=\\\"columns\\\">\\r\\n          <tr>\\r\\n            <td>\\r\\n              <a href=\\\"#\\\" [pRowToggler]=\\\"rowData\\\">\\r\\n                <i [ngClass]=\\\"expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'\\\"></i>\\r\\n              </a>\\r\\n            </td>\\r\\n            <td class=\\\"cell\\\">{{rowData.tableName}}</td>\\r\\n            <td class=\\\"cell\\\">{{rowData.extendedPropertyValue}}</td>\\r\\n          </tr>\\r\\n        </ng-template>  \\r\\n        <ng-template pTemplate=\\\"rowexpansion\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n          <tr>\\r\\n            <td [attr.colspan]=\\\"columns.length + 1\\\">\\r\\n              <div class=\\\"table\\\">\\r\\n                <div class=\\\"row header\\\">\\r\\n                  <div class=\\\"cell\\\">Column Name</div>\\r\\n                  <div class=\\\"cell\\\">Description</div>\\r\\n                </div>\\r\\n                <div class=\\\"row\\\" *ngFor=\\\"let columndetails of rowData.tableColumns\\\">\\r\\n                  <div class=\\\"cell\\\">{{columndetails.columnName}}</div>\\r\\n                  <div class=\\\"cell\\\">{{columndetails.extendedPropertyValue}}</div>\\r\\n                </div>\\r\\n              </div>\\r\\n              <hr />\\r\\n            </td>\\r\\n          </tr>\\r\\n        </ng-template>  \\r\\n      </p-table>\\r\\n    </amexio-accordion-tab>\\r\\n  </amexio-accordion>\\r\\n   -->\\r\\n\\r\\n   <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" header=\\\"Store Procerdure Extended Properties\\\" [gradient]=\\\"true\\\" [active]=\\\"true\\\">\\r\\n    <div class=\\\"table\\\">\\r\\n      <div class=\\\"row header\\\">\\r\\n        <div class=\\\"cell\\\">Store Procedures</div>\\r\\n        <div class=\\\"cell\\\">Extended Properties Value</div> \\r\\n      </div> \\r\\n      <div *ngFor=\\\"let description of storedProcedures\\\" class=\\\"row\\\">\\r\\n        <div class=\\\"cell\\\">{{description.storedProcedure}}</div>\\r\\n        <div class=\\\"cell\\\">{{description.extendedProperty}}</div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </amexio-accordion-tab>\"","export default \".table {\\n  margin: 0px 0 3px 0;\\n  width: 100%;\\n  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);\\n  display: table;\\n}\\n\\n@media screen and (max-width: 580px) {\\n  .table {\\n    display: block;\\n  }\\n}\\n\\n.row {\\n  display: table-row;\\n  background: #f6f6f6;\\n}\\n\\n.row:nth-of-type(odd) {\\n    background: #e9e9e9;\\n  }\\n\\n.row.header {\\n    font-weight: 900;\\n    color: #ffffff;\\n    background: #184569 !important;\\n  }\\n\\n.row.green {\\n    background: #27ae60;\\n  }\\n\\n.row.blue {\\n    background: #2980b9;\\n  }\\n\\n@media screen and (max-width: 580px) {\\n  .row {\\n    padding: 14px 0 7px;\\n    display: block;\\n  }\\n\\n    .row.header {\\n      padding: 0;\\n      height: 6px;\\n    }\\n\\n      .row.header .cell {\\n        display: none;\\n      }\\n\\n    .row .cell {\\n      margin-bottom: 10px;\\n    }\\n\\n      .row .cell:before {\\n        margin-bottom: 3px;\\n        content: attr(data-title);\\n        min-width: 98px;\\n        font-size: 10px;\\n        line-height: 10px;\\n        font-weight: bold;\\n        text-transform: uppercase;\\n        color: #969696;\\n        display: block;\\n      }\\n}\\n\\n.cell {\\n  /*  padding: 6px 12px; */\\n  display: table-cell;\\n}\\n\\n@media screen and (max-width: 580px) {\\n  .cell {\\n    padding: 2px 16px;\\n    display: block;\\n  }\\n}\\n\"","export default \"<amexio-accordion [multi-open]=\\\"true\\\">\\r\\n  <amexio-accordion-tab amexioColorPalette [color-palette]=\\\"''\\\" [gradient]=\\\"true\\\" header=\\\"Tables\\\" [active]=\\\"true\\\">\\r\\n    <p-table [columns]=\\\"cols\\\" [value]=\\\"tables\\\" dataKey=\\\"tableName\\\" [paginator]=\\\"true\\\" [rows]=\\\"10\\\">  \\r\\n      <ng-template pTemplate=\\\"header\\\" let-columns>\\r\\n        <tr>\\r\\n          <th style=\\\"width: 4em\\\"></th>\\r\\n          <th>Table Name</th>\\r\\n          <th>Description</th>\\r\\n        </tr>\\r\\n      </ng-template>\\r\\n      <ng-template pTemplate=\\\"body\\\" let-rowData let-expanded=\\\"expanded\\\" let-columns=\\\"columns\\\">\\r\\n        <tr>\\r\\n          <td>\\r\\n            <a href=\\\"#\\\" [pRowToggler]=\\\"rowData\\\">\\r\\n              <i [ngClass]=\\\"expanded ? 'pi pi-chevron-down' : 'pi pi-chevron-right'\\\"></i>\\r\\n            </a>\\r\\n          </td>\\r\\n          <td class=\\\"cell\\\">{{rowData.tableName}}</td>\\r\\n          <td class=\\\"cell\\\">{{rowData.extendedPropertyValue}}</td>\\r\\n        </tr>\\r\\n      </ng-template>  \\r\\n      <ng-template pTemplate=\\\"rowexpansion\\\" let-rowData let-columns=\\\"columns\\\">\\r\\n        <tr>\\r\\n          <td [attr.colspan]=\\\"columns.length + 1\\\">\\r\\n            <div class=\\\"table\\\">\\r\\n              <div class=\\\"row header\\\">\\r\\n                <div class=\\\"cell\\\">Column Name</div>\\r\\n                <div class=\\\"cell\\\">Description</div>\\r\\n              </div>\\r\\n              <div class=\\\"row\\\" *ngFor=\\\"let columndetails of rowData.tableColumns\\\">\\r\\n                <div class=\\\"cell\\\">{{columndetails.columnName}}</div>\\r\\n                <div class=\\\"cell\\\">{{columndetails.extendedPropertyValue}}</div>\\r\\n              </div>\\r\\n            </div>\\r\\n            <hr />\\r\\n          </td>\\r\\n        </tr>\\r\\n      </ng-template>  \\r\\n    </p-table>\\r\\n  </amexio-accordion-tab>\\r\\n</amexio-accordion>\\r\\n\"","export default \"<p>views works!</p>\\r\\n\"","export default \"\"","import { Component, ViewChild, ElementRef, ChangeDetectionStrategy, AfterViewInit, OnDestroy, OnInit } from '@angular/core';\r\nimport { SplitComponent } from 'angular-split'; \r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';  \r\nimport { Inject } from '@angular/core';\r\nimport { Router } from '@angular/router';  \r\nimport { HttpClient } from '@angular/common/http'; \r\nimport { MenuItem } from 'primeng/api/menuitem'; \r\n@Component({\r\n  selector: 'app-root',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  host: {\r\n    'class': 'split-example-page'\r\n  },\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent implements AfterViewInit, OnDestroy, OnInit {\r\n  iblnShowPages: boolean = false;\r\n  isDisabled: boolean = true;\r\n  useTransition: boolean = true;\r\n  dblClickTime: number = 0;\r\n  logMessages: Array<{ type: string, text: string }> = [];\r\n  status: boolean = false;\r\n  @ViewChild('area1', { static: false }) mySplitEl1: SplitComponent\r\n  @ViewChild('area2', { static: false }) mySplitEl2: SplitComponent\r\n  public http: HttpClient;\r\n  public baseUrl: string;\r\n  public items: MenuItem[];\r\n  public home: MenuItem;\r\n  public istrlogiggedUserName: string;\r\n  iblnHiddeLeftMenu: boolean;\r\n  constructor(private route: Router, http: HttpClient,\r\n    @Inject('API_URL') private apiUrl: string,\r\n    @Inject('ANOTHER_URL') private anotherUrl: string, private ngxLoader: NgxUiLoaderService) {\r\n    this.iblnHiddeLeftMenu = false;\r\n    this.http = http; \r\n\r\n    console.log(this.apiUrl); // Access first URL\r\n    console.log(this.anotherUrl); // Access second URL\r\n\r\n\r\n    this.istrlogiggedUserName = \"\"\r\n\r\n  }\r\n  ngAfterViewInit() {\r\n\r\n  }\r\n\r\n\r\n  ngOnDestroy() {\r\n\r\n  }\r\n  ngOnInit() {\r\n  }\r\n  log(type: string, e: { gutterNum: number, sizes: Array<number> }) {\r\n    this.logMessages.push({ type, text: `${new Date()} > ${type} event > ${JSON.stringify(e)}` });\r\n   \r\n    switch (type) {\r\n      case \"gutterDblClick\":\r\n      case \"gutterClick\":\r\n        {\r\n          this.status = !this.status;\r\n        }\r\n        break; \r\n      case \"dragEnd\":\r\n        break;\r\n      case \"dragStart\":\r\n        break;\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-main-page',\r\n  templateUrl: './main-page.component.html',\r\n  styleUrls: ['./main-page.component.css']\r\n})\r\nexport class MainPageComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n"," \r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent  {\r\n  onChangeServer(event: Event): void {\r\n    const selectedServer = (event.target as HTMLSelectElement).value;\r\n    console.log('Selected SQL Server:', selectedServer);\r\n    // Handle the change as needed\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.css']\r\n})\r\nexport class FooterComponent{}","import { Injectable, Inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, of } from 'rxjs';\r\nimport { TableMetadata } from '../models/TableMetadata';\r\nimport { catchError, retry } from 'rxjs/operators';\r\nimport { TableDescription } from '../models/TableDescription';\r\nimport { TableColumn } from '../models/TableColumn';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TableService {\r\n\r\n\r\n  constructor(\r\n    @Inject('API_URL') private primaryUrl: string,\r\n    @Inject('ANOTHER_URL') private secondaryUrl: string,\r\n    private http: HttpClient) {\r\n  }\r\n  loadTableMetadata(tableName: string): Observable<TableMetadata> {\r\n    const primaryUrl = `${this.primaryUrl}/Tables/GetTableMetaData?tableName=${tableName}`;\r\n    const secondaryUrl = `Tables/GetTableMetaData?tableName=${tableName}`;\r\n  \r\n    const primaryRequest = this.http.get<TableMetadata>(primaryUrl).pipe(\r\n      retry(2) // Retry the primary request up to 2 times before failing over\r\n    );\r\n  \r\n    const secondaryRequest = this.http.get<TableMetadata>(secondaryUrl).pipe(\r\n      retry(2) // Optionally retry the secondary request as well\r\n    );\r\n  \r\n    return primaryRequest.pipe(\r\n      catchError((error) => {\r\n        console.error('Primary API URL failed after retries:', error);\r\n        return secondaryRequest.pipe(\r\n          catchError((secondaryError) => {\r\n            console.error('Secondary API URL failed after retries:', secondaryError);\r\n            return of(null); // Handle the error or return a default value\r\n          })\r\n        );\r\n      })\r\n    );\r\n  }\r\n  /**\r\n  * Updates the extended properties of a table.\r\n  * @param description Table description object\r\n  * @returns Observable<any>\r\n  */\r\n  updateTableExtendedProperties(description: TableDescription): Observable<any> {\r\n    return this.http.post(`${this.primaryUrl}/UpdateTableExtendedProperties`, description);\r\n  }\r\n\r\n  /**\r\n   * Updates the extended properties of a table column.\r\n   * @param column Table column object\r\n   * @returns Observable<any>\r\n   */\r\n  updateTableColumnExtendedProperty(column: TableColumn): Observable<any> {\r\n    return this.http.post(`${this.primaryUrl}/UpdateTableColumnExtendedProperty`, column);\r\n  }\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { Component, OnInit, AfterViewInit, ChangeDetectorRef } from \"@angular/core\";\r\n\r\nimport { TableDescription } from \"../../models/TableDescription\";\r\nimport { TableMetadata } from \"../../models/TableMetadata\";\r\nimport { TableColumn } from \"../../models/TableColumn\";\r\nimport { TableConstraint } from \"../../models/TableConstraint\";\r\nimport { TableCreateScript } from \"../../models/TableCreateScript\";\r\nimport { TableIndex } from \"../../models/TableIndex\";\r\nimport { TableForeignKey } from \"../../models/TableForeignKey\";\r\nimport { TableProperty } from \"../../models/TableProperty\";\r\nimport { TableFragmentation } from \"../../models/TableFragmentation\";\r\nimport { TableService } from '../../service/table.service';\r\n\r\n@Component({\r\n  selector: \"app-table\",\r\n  templateUrl: \"./table.component.html\",\r\n  styleUrls: [\"./table.component.css\"],\r\n})\r\nexport class TableComponent implements OnInit, AfterViewInit {\r\n  tableName: string = \"HumanResources.Employee\";\r\n  columns: TableColumn[] = [];\r\n  tableFragmentations: TableFragmentation[] = [];\r\n  createScript: TableCreateScript = { script: \"\" };\r\n  descriptions: TableDescription[] = [];\r\n  indices: TableIndex[] = [];\r\n  foreignKeys: TableForeignKey[] = [];\r\n  properties: TableProperty[] = [];\r\n  displayDialog: boolean;\r\n  displayColumnDialog: boolean;\r\n  hasEditPermission: boolean;\r\n  tableconstraint!: TableConstraint[];\r\n  filesTree: any;\r\n  selectedDescription: TableDescription = { name: \"\", value: \"\", table: \"\" };\r\n  selectedColumn: TableColumn = {\r\n    tableName: \"\",\r\n    columnName: \"\",\r\n    key: \"\",\r\n    identity: \"\",\r\n    dataType: \"\",\r\n    maxLength: \"\",\r\n    allowNulls: \"\",\r\n    default: \"\",\r\n    description: \"\",\r\n    descriptionname: \"\",\r\n    extendedPropertyName: \"\",\r\n    extendedPropertyValue: \"\"\r\n  };\r\n  language = 'plsql';\r\n  constructor(private tableService: TableService, private http: HttpClient, private cd: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.loadTableMetadata();\r\n    this.loadData();\r\n  }\r\n\r\n  loadData() {\r\n    this.hasEditPermission = true;\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    (window as any).Prism.highlightAll();\r\n  }\r\n\r\n  private loadTableMetadata(): void {\r\n    this.tableService.loadTableMetadata(this.tableName).subscribe({\r\n      next: (metadata) => metadata ? this.handleLoadSuccess(metadata) : null,\r\n      error: (error) => this.handleLoadError(error)\r\n    });\r\n  }\r\n\r\n  private handleLoadSuccess(result: TableMetadata): void {\r\n    this.descriptions = result.descriptions;\r\n    this.columns = result.columns;\r\n    this.createScript = result.createScript;\r\n    this.indices = result.indices;\r\n    this.foreignKeys = result.foreignKeys;\r\n    this.properties = result.properties;\r\n    this.tableconstraint = result.constraint;\r\n    this.tableFragmentations = result.tableFragmentations;\r\n    this.filesTree = JSON.parse(result.tableDependenciesTree);\r\n  }\r\n\r\n  private handleLoadError(error: any): void {\r\n    console.error(error);\r\n  }\r\n\r\n  editDescription(description: TableDescription): void {\r\n    this.selectedDescription = { ...description };\r\n    this.displayDialog = true;\r\n  }\r\n\r\n  saveDescription(): void {\r\n    const index = this.descriptions.findIndex(\r\n      (desc) => desc.name === this.selectedDescription.name && desc.table === this.selectedDescription.table\r\n    );\r\n\r\n    if (index !== -1) {\r\n      this.descriptions[index] = { ...this.selectedDescription };\r\n      this.tableService.updateTableExtendedProperties(this.selectedDescription).subscribe({\r\n        next: () => this.displayDialog = false,\r\n        error: (error) => console.error(\"Error:\", error)\r\n      });\r\n    }\r\n  }\r\n\r\n  cancelEdit(): void {\r\n    this.displayDialog = false;\r\n  }\r\n\r\n  editColumnDescription(selectedColumn: TableColumn): void {\r\n    this.selectedColumn = { ...selectedColumn };\r\n    this.displayColumnDialog = true;\r\n  }\r\n\r\n  saveColumnDescription(): void {\r\n    const index = this.columns.findIndex(\r\n      (desc) => desc.tableName === this.selectedColumn.tableName && desc.columnName === this.selectedColumn.columnName\r\n    );\r\n\r\n    if (index !== -1) {\r\n      this.columns[index] = { ...this.selectedColumn };\r\n      this.tableService.updateTableColumnExtendedProperty(this.selectedColumn).subscribe({\r\n        next: () => this.displayColumnDialog = false,\r\n        error: (error) => console.error(\"Error:\", error)\r\n      });\r\n    }\r\n  }\r\n\r\n  cancelColumnEdit(): void {\r\n    this.displayColumnDialog = false;\r\n  }\r\n}\r\n","import { Component, OnInit, Inject } from '@angular/core'; \r\nimport { HttpClient } from '@angular/common/http'; \r\nimport { MenuItem } from 'primeng/api/menuitem'; \r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { TablesMetadata } from '../../models/TablesMetaData';\r\n@Component({\r\n  selector: 'app-tables',\r\n  templateUrl: './tables.component.html',\r\n  styleUrls: ['./tables.component.css'],\r\n  animations: [\r\n    trigger('rowExpansionTrigger', [\r\n      state('void', style({\r\n        transform: 'translateX(-10%)',\r\n        opacity: 0\r\n      })),\r\n      state('active', style({\r\n        transform: 'translateX(0)',\r\n        opacity: 1\r\n      })),\r\n      transition('* <=> *', animate('400ms cubic-bezier(0.86, 0, 0.07, 1)'))\r\n    ])\r\n  ]\r\n})\r\nexport class TablesComponent implements OnInit {\r\n  public cols: any[];\r\n  public items: MenuItem[];\r\n  public home: MenuItem;\r\n  public tables: TablesMetadata[];\r\n  constructor(private http: HttpClient,\r\n    @Inject('API_URL') private primaryUrl: string,\r\n    @Inject('ANOTHER_URL') private secondaryUrl: string) { \r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    this.cols = [\r\n      { field: 'tableName', header: 'extendedPropertyValue' },\r\n      { field: 'extendedPropertyValue', header: 'tableColumns' }\r\n    ];\r\n    this.loadTablesMetadata();\r\n  }\r\n  private loadTablesMetadata(): void {\r\n\r\n    const primaryUrl = `${this.primaryUrl}/Tables/GetTableDetails`;\r\n    const secondaryUrl = 'Tables/GetTableDetails';\r\n\r\n    // Try the primary URL\r\n    this.http.get<TablesMetadata[]>(primaryUrl).subscribe(\r\n      (result) => this.handleLoadSuccess(result),\r\n      (error) => {\r\n        console.error('Primary URL failed, trying secondary URL:', error);\r\n\r\n        // If the primary URL fails, try the secondary URL\r\n        this.http.get<TablesMetadata[]>(secondaryUrl).subscribe(\r\n          (secondaryResult) => this.handleLoadSuccess(secondaryResult),\r\n          (secondaryError) => this.handleLoadError(secondaryError)\r\n        );\r\n      }\r\n    );\r\n     \r\n  }\r\n\r\n  private handleLoadSuccess(result: TablesMetadata[]): void {\r\n     this.tables=result;\r\n  }\r\n\r\n  private handleLoadError(error: any): void {\r\n    console.error(error);\r\n  }\r\n\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-edit-description-dialog',\r\n  templateUrl: './edit-description-dialog.component.html',\r\n  styleUrls: ['./edit-description-dialog.component.css']\r\n})\r\nexport class EditDescriptionDialogComponent {\r\n  @Input() displayDialog: boolean;\r\n  @Input() selectedDescription: any;\r\n  @Input() hasEditPermission: boolean;\r\n  @Output() save = new EventEmitter<void>();\r\n  @Output() cancel = new EventEmitter<void>();\r\n\r\n  saveDescription() {\r\n    this.save.emit();\r\n  }\r\n\r\n  cancelEdit() {\r\n    this.cancel.emit();\r\n  }\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-edit-column-description-dialog',\r\n  templateUrl: './edit-column-description-dialog.component.html',\r\n  styleUrls: ['./edit-column-description-dialog.component.css']\r\n})\r\nexport class EditColumnDescriptionDialogComponent {\r\n  @Input() displayColumnDialog: boolean;\r\n  @Input() selectedColumn: any;\r\n  @Output() saveColumnDescription = new EventEmitter<void>();\r\n  @Output() cancelColumnEdit = new EventEmitter<void>();\r\n\r\n  saveDescription() {\r\n    this.saveColumnDescription.emit();\r\n  }\r\n\r\n  cancelEdit() {\r\n    this.cancelColumnEdit.emit();\r\n  }\r\n}\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sql-script-viewer',\r\n  templateUrl: './sql-script-viewer.component.html',\r\n  styleUrls: ['./sql-script-viewer.component.css']\r\n})\r\nexport class SqlScriptViewerComponent {\r\n  @Input() script: string;\r\n}\r\n","import { Injectable, Inject } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TablesService {\r\n\r\n  constructor(\r\n    @Inject('API_URL') private apiUrl: string,\r\n    @Inject('ANOTHER_URL') private anotherUrl: string)\r\n  {\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TableComponent } from './components/table/table.component';\r\nimport { TablesComponent } from './components/tables/tables.component';\r\n\r\nimport { AmexioDataModule, AmexioWidgetModule, AmexioChartsModule, AmexioEnterpriseModule } from 'amexio-ng-extensions'; \r\nimport { AccordionModule } from 'primeng/accordion';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TreeModule } from 'primeng/tree';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ContextMenuModule } from 'primeng/contextmenu';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { TreeDragDropService, MessageService } from 'primeng/api';\r\nimport { ProgressBarModule } from 'angular-progress-bar';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport {InputTextareaModule} from 'primeng/inputtextarea';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { EditDescriptionDialogComponent } from './components/table/edit-description-dialog/edit-description-dialog.component';\r\nimport { EditColumnDescriptionDialogComponent } from './components/table/edit-column-description-dialog/edit-column-description-dialog.component';\r\nimport { SqlScriptViewerComponent } from './components/table/sql-script-viewer/sql-script-viewer.component';\r\nimport { TableService } from './service/table.service';\r\nimport { TablesService } from './service/tables.service';\r\n\r\n@NgModule({\r\n  declarations: [TableComponent, TablesComponent, EditDescriptionDialogComponent, EditColumnDescriptionDialogComponent, SqlScriptViewerComponent],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    AmexioDataModule,\r\n    AmexioWidgetModule,\r\n    AmexioChartsModule,\r\n    AmexioEnterpriseModule,\r\n    AccordionModule,\r\n    TableModule,\r\n    TreeModule,\r\n    ToastModule,\r\n    ContextMenuModule,\r\n    TabViewModule,\r\n    CodeHighlighterModule,\r\n    BreadcrumbModule,\r\n    ProgressBarModule,\r\n    ButtonModule,\r\n    DialogModule,\r\n    InputTextareaModule\r\n  ],\r\n  providers: [TreeDragDropService, MessageService,TableService,TablesService],\r\n  exports:[TableComponent, TablesComponent],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],  // ✅ Add CUSTOM_ELEMENTS_SCHEMA\r\n})\r\nexport class TablesModule { }\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { DatabaseMetaData } from '../models/DatabaseMetaData';\n \n \n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DatabaseMetadataService {\n  constructor(private http: HttpClient, \n              @Inject('API_URL') private primaryUrl: string,\n              @Inject('ANOTHER_URL') private secondaryUrl: string) {}\n\n  getDatabaseMetaData(): Observable<DatabaseMetaData> {\n    const primaryUrl = `${this.primaryUrl}/Database/database-meta-data`;\n    const secondaryUrl = 'Database/database-meta-data';\n\n    return this.http.get<DatabaseMetaData>(primaryUrl).pipe(\n      catchError((primaryError) => {\n        console.error('Primary URL failed, trying secondary URL:', primaryError);\n        return this.http.get<DatabaseMetaData>(secondaryUrl).pipe(\n          catchError((secondaryError) => {\n            console.error('Secondary URL also failed:', secondaryError);\n            return of(null as DatabaseMetaData);\n          })\n        );\n      })\n    );\n  }\n  changeDatabase(databaseName: string) {\n    return this.http.post(`${this.primaryUrl}/Database/ChangeDatabase`, { databaseName });\n  }\n}\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-object-type-item',\r\n  templateUrl: './object-type-item.component.html'\r\n})\r\nexport class ObjectTypeItemComponent {\r\n  @Input() icon: string = '';\r\n  @Input() label: string = '';\r\n  @Input() count: number | undefined;\r\n  @Input() visible: boolean = true;\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { DatabaseMetaData } from '../../models/DatabaseMetaData';\r\nimport { DatabaseMetadataService } from '../../service/database-metadata.service';\r\nimport { ObjectTypeItems } from '../../models/ObjectTypeItems';\r\n \r\n@Component({\r\n  selector: 'app-database-details',\r\n  templateUrl: './database-details.component.html',\r\n  styleUrls: ['./database-details.component.css']\r\n})\r\nexport class DatabaseDetailsComponent implements OnInit{\r\n  databaseMetaData: DatabaseMetaData;\r\n  public objectTypeItems: ObjectTypeItems[] = [];\r\n\r\n  constructor(private databaseMetadataService: DatabaseMetadataService) { }\r\n  ngOnInit() {\r\n    this.loadDatabaseMetadata();\r\n  }\r\n\r\n  private loadDatabaseMetadata(): void {\r\n    this.databaseMetadataService.getDatabaseMetaData().subscribe({\r\n      next: (databaseMetaData: DatabaseMetaData) => {\r\n        if (databaseMetaData) {\r\n          this.databaseMetaData = databaseMetaData; \r\n          this.initializeObjectTypeItems();\r\n        }\r\n      },\r\n      error: (error) => this.handleLoadError(error)\r\n    });\r\n  }\r\n\r\n  private initializeObjectTypeItems(): void {\r\n    const metadataConfig = [\r\n      { icon: 'Table.png', label: 'Tables', data: this.databaseMetaData.tablesMetadata },\r\n      { icon: 'View.png', label: 'View', data: this.databaseMetaData.viewMetadata },\r\n      { icon: 'StoredProcedure.png', label: 'Stored Procedure', data: this.databaseMetaData.procedureInfos },\r\n      { icon: 'Function_Table.png', label: 'Table-Valued Functions', data: this.databaseMetaData.tableFunctionInfos },\r\n      { icon: 'Function_Scalar.png', label: 'Scalar-Valued Functions', data: this.databaseMetaData.scalarFunctionInfos },\r\n      { icon: 'DdlTrigger.png', label: 'Database Triggers', data: this.databaseMetaData.triggerInfos },\r\n      { icon: 'UserDefinedDataType.png', label: 'User-Defined Data Types', data: this.databaseMetaData.userTypes },\r\n      { icon: 'XmlSchemaCollection.png', label: 'XML Schema Collections', data: this.databaseMetaData.dbXmlSchemas }\r\n    ];\r\n\r\n    this.objectTypeItems = metadataConfig.map(item => ({\r\n      icon: `./assets/icons/${item.icon}`,\r\n      label: item.label,\r\n      count: item.data.length,\r\n      visible: !!item.data.length\r\n    }));\r\n  }\r\n\r\n  private handleLoadError(error: any): void {\r\n    console.error('Failed to load database metadata:', error);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common'; \r\n\r\nimport { AmexioDataModule, AmexioWidgetModule, AmexioChartsModule, AmexioEnterpriseModule } from 'amexio-ng-extensions'; \r\nimport { AccordionModule } from 'primeng/accordion';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TreeModule } from 'primeng/tree';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ContextMenuModule } from 'primeng/contextmenu';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { TreeDragDropService, MessageService } from 'primeng/api'; \r\nimport { DatabaseMetadataService } from './service/database-metadata.service';\r\nimport { ObjectTypeItemComponent } from './components/object-type-item/object-type-item.component';\r\nimport { DatabaseDetailsComponent } from './components/database-details/database-details.component';\r\n \r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [DatabaseDetailsComponent,ObjectTypeItemComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AmexioDataModule,\r\n    AmexioWidgetModule,\r\n    AmexioChartsModule,\r\n    AmexioEnterpriseModule,\r\n    AccordionModule,\r\n    TableModule,\r\n    TreeModule,\r\n    ToastModule,\r\n    ButtonModule,\r\n    ContextMenuModule,\r\n    TabViewModule,\r\n    CodeHighlighterModule,\r\n    BreadcrumbModule\r\n  ],\r\n  providers: [TreeDragDropService, MessageService,DatabaseMetadataService],\r\n  exports:[DatabaseDetailsComponent]\r\n})\r\nexport class DatabaseModule { }\r\n","import { Injectable, Inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LeftMenuService {\n\n  constructor(\n    private http: HttpClient,\n    @Inject('API_URL') private primaryUrl: string,\n    @Inject('ANOTHER_URL') private secondaryUrl: string\n  ) { }\n\n  loadLeftMenuData(): Observable<any> {\n    const primaryUrl = `${this.primaryUrl}/LeftMenu/left-menu`;\n    const secondaryUrl = 'LeftMenu/left-menu'; // Fallback URL\n\n    return this.http.get<any>(primaryUrl).pipe(\n      catchError((error) => {\n        console.error('Primary URL failed, trying secondary URL:', error);\n        return this.http.get<any>(secondaryUrl).pipe(\n          catchError((secondaryError) => {\n            console.error('Both primary and secondary URLs failed:', secondaryError);\n            return of(null); // Return a safe fallback\n          })\n        );\n      })\n    );\n  }\n}\n","import { Component, OnInit } from '@angular/core';\r\nimport { LeftMenuService } from '../../services/left-menu.service';\r\nimport { LeftMenuTreeViewJson } from '../../models/left-menu-tree-view-json';\r\n\r\n@Component({\r\n  selector: 'app-leftmenu',\r\n  templateUrl: './leftmenu.component.html'\r\n})\r\nexport class LeftmenuComponent implements OnInit {\r\n\r\n  leftmenujsonvalues: any;\r\n\r\n  constructor(private leftMenuService: LeftMenuService) { }\r\n\r\n  ngOnInit() {\r\n    this.loadLeftMenuData();\r\n  }\r\n\r\n  private loadLeftMenuData(): void {\r\n    this.leftMenuService.loadLeftMenuData().subscribe(\r\n      (result) => this.handleLoadSuccess(result),\r\n      (error) => this.handleLoadError(error)\r\n    );\r\n  }\r\n\r\n  private handleLoadSuccess(result: any): void {\r\n    this.leftmenujsonvalues = result;\r\n  }\r\n\r\n  private handleLoadError(error: any): void {\r\n    console.error(error);\r\n  }\r\n\r\n  getNodeData(data: LeftMenuTreeViewJson) {\r\n    // Implement getNodeData logic here\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core'; \r\nimport { StoredProcedureInfo } from '../model/StoredProcedureInfo';\r\nimport { Observable } from 'rxjs';\r\nimport { StoredProcedureMeta } from '../model/StoredProcedureMeta';\r\nimport { StoredProcedureDescriptionRequest } from '../model/StoredProcedureDescriptionRequest';\r\nimport { ParameterDescriptionRequest } from '../model/ParameterDescriptionRequest';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProcedureService {\r\n\r\n  private baseUrl = ''; // Update this with actual API URL\r\n\r\n  constructor(\r\n      @Inject('API_URL') primaryUrl: string, \r\n      private http: HttpClient) {\r\n      this.baseUrl = primaryUrl +'/StoredProcedure';\r\n    }\r\n    \r\n    \r\n  /**\r\n   * Get all stored procedures.\r\n   */\r\n  getAllStoredProcedures(): Observable<StoredProcedureInfo[]> {\r\n    return this.http.get<StoredProcedureInfo[]>(`${this.baseUrl}/AllStoredProcedures`);\r\n  }\r\n\r\n  /**\r\n   * Get metadata of a specific stored procedure.\r\n   * @param storedProcedureName The name of the stored procedure.\r\n   */\r\n  getStoredProcedureMetadata(storedProcedureName: string): Observable<StoredProcedureMeta> {\r\n    return this.http.get<StoredProcedureMeta>(`${this.baseUrl}/${storedProcedureName}/metadata`);\r\n  }\r\n\r\n  /**\r\n   * Merge stored procedure description.\r\n   * @param request The request body containing schema name, stored procedure name, and description.\r\n   */\r\n  mergeStoredProcedureDescription(request: StoredProcedureDescriptionRequest): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/description`, request);\r\n  }\r\n\r\n  /**\r\n   * Merge parameter description of a stored procedure.\r\n   * @param request The request body containing schema name, stored procedure name, parameter name, and description.\r\n   */\r\n  mergeParameterDescription(request: ParameterDescriptionRequest): Observable<void> {\r\n    return this.http.post<void>(`${this.baseUrl}/parameter/description`, request);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ProcedureService } from '../../service/procedure.service';\r\nimport { StoredProcedureInfo } from \"../../model/StoredProcedureInfo\"; \r\nimport { StoredProcedureMeta } from '../../model/StoredProcedureMeta';\r\n\r\n@Component({\r\n  selector: 'app-procedures',\r\n  templateUrl: './procedures.component.html',\r\n  styleUrls: ['./procedures.component.css']\r\n})\r\nexport class ProceduresComponent implements OnInit {\r\n public storedProcedures: StoredProcedureInfo[] = [];\r\n  isLoading: boolean = true;\r\n  errorMessage: string = '';\r\n  constructor(private storedProcedureService: ProcedureService) { }\r\n\r\n  ngOnInit() {\r\n    this.loadStoredProcedures();\r\n  }\r\n/**\r\n   * Fetch all stored procedures.\r\n   */\r\nloadStoredProcedures() {\r\n  this.storedProcedureService.getAllStoredProcedures().subscribe({\r\n    next: (data) => {\r\n      this.storedProcedures = data;\r\n    },\r\n    error: (err) => console.error('Error fetching stored procedures:', err)\r\n  });\r\n} \r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ProcedureService } from '../../service/procedure.service';\r\nimport { StoredProcedureDescriptionRequest } from '../../model/StoredProcedureDescriptionRequest';\r\nimport { ParameterDescriptionRequest } from '../../model/ParameterDescriptionRequest';\r\nimport { StoredProcedureMeta } from '../../model/StoredProcedureMeta';\r\nimport { StoredProcedureParameter } from '../../model/StoredProcedureParameter';\r\ndeclare var QP;\r\n\r\n@Component({\r\n  selector: 'app-procedure',\r\n  templateUrl: './procedure.component.html',\r\n  styleUrls: ['./procedure.component.css']\r\n})\r\nexport class ProcedureComponent implements OnInit {\r\n\r\n  public iblnLoading: boolean;\r\n\r\n  private storedProcedureName = \"HumanResources.uspUpdateEmployeeHireInfo\";\r\n  iblnShowEditBox = false;  \r\n  filesTree: any; \r\n  language = 'plsql';\r\n  public storedProcedureMetadata!: StoredProcedureMeta;\r\n\r\n  constructor(private storedProcedureService: ProcedureService) {\r\n    this.iblnLoading = false;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.loadMetadata();\r\n  } \r\n\r\n  /**\r\n   * Extract schema from stored procedure name.\r\n   */\r\n  private getSchema(): string {\r\n    return this.storedProcedureName.split('.')[0] || '';   \r\n  }\r\n  private getStoreprocedureName(): string {\r\n    return this.storedProcedureName.split('.')[1] || '';\r\n  }\r\n\r\n  /**\r\n   * Fetch metadata for the stored procedure.\r\n   */\r\n  private loadMetadata(): void {\r\n    this.storedProcedureService.getStoredProcedureMetadata(this.storedProcedureName).subscribe({\r\n      next: (data) => {\r\n        this.iblnLoading = true;\r\n        this.storedProcedureMetadata = data; \r\n        this.filesTree = JSON.parse(data.storedProcedureDependenciesTree);\r\n        QP.showPlan(document.getElementById(\"container\"), `${this.storedProcedureMetadata.executionPlan.queryPlan}`, { jsTooltips: true });\r\n\r\n      },\r\n      error: (err) => console.error('Error fetching metadata:', err)\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Toggle edit mode for the stored procedure description.\r\n   */\r\n  toggleEditBox(): void {\r\n    this.iblnShowEditBox = !this.iblnShowEditBox;\r\n  }\r\n  CancelStoreProcMsDesciption(): void {\r\n    this.iblnShowEditBox = false;\r\n  }\r\n\r\n  /**\r\n   * Update stored procedure description.\r\n   */\r\n  updateProcedureDescription(): void {\r\n    if (!this.storedProcedureMetadata.storedProcedureInfo.extendedProperty) {\r\n      console.error('No description available to update.');\r\n      return;\r\n    }\r\n\r\n    const request: StoredProcedureDescriptionRequest = {\r\n      schemaName: this.getSchema(),\r\n      storedProcedureName: this.getStoreprocedureName(),\r\n      description: this.storedProcedureMetadata.storedProcedureInfo.extendedProperty\r\n    };\r\n\r\n    this.storedProcedureService.mergeStoredProcedureDescription(request).subscribe({\r\n      next: () => {\r\n        console.log('Stored procedure description updated successfully');\r\n        this.toggleEditBox();\r\n      },\r\n      error: (err) => console.error('Error updating description:', err)\r\n    });\r\n  } \r\n  updateParameterDescription(parameter:StoredProcedureParameter): void {\r\n    const request: ParameterDescriptionRequest = {\r\n      schemaName: this.getSchema(),\r\n      storedProcedureName: this.getStoreprocedureName(),\r\n      parameterName: parameter.parameterName,  // This should be dynamic based on selection\r\n      description: parameter.extendedProperty\r\n    };\r\n\r\n    this.storedProcedureService.mergeParameterDescription(request).subscribe({\r\n      next: () => {\r\n        console.log('Parameter description updated successfully');\r\n        this.toggleParameterEdit(parameter)\r\n      },\r\n      error: (err) => console.error('Error updating parameter description:', err)\r\n    });\r\n  }\r\n  toggleParameterEdit(parameter: any): void {\r\n    parameter.isEditing = !parameter.isEditing;\r\n  } \r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { ProceduresComponent } from './components/procedures/procedures.component';\r\nimport { ProcedureComponent } from './components/procedure/procedure.component';\r\nimport { ProcedureService } from './service/procedure.service';\r\n\r\n/* ===== Amexio Modules ===== */\r\nimport { AmexioDataModule, AmexioWidgetModule, AmexioChartsModule, AmexioEnterpriseModule } from 'amexio-ng-extensions';\r\n\r\n/* ===== PrimeNG Modules ===== */\r\nimport { AccordionModule } from 'primeng/accordion';\r\nimport { TreeModule } from 'primeng/tree';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ContextMenuModule } from 'primeng/contextmenu';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { CodeHighlighterModule } from 'primeng/codehighlighter';\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { InputTextareaModule } from 'primeng/inputtextarea';\r\n\r\n/* ===== Other Third-Party Modules ===== */\r\nimport { ProgressBarModule } from 'angular-progress-bar';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProceduresComponent,\r\n    ProcedureComponent\r\n  ],\r\n  imports: [\r\n    /* Core Modules */\r\n    CommonModule,\r\n    BrowserModule,\r\n    FormsModule,\r\n    HttpClientModule,\r\n\r\n    /* Amexio Modules */\r\n    AmexioDataModule,\r\n    AmexioWidgetModule,\r\n    AmexioChartsModule,\r\n    AmexioEnterpriseModule,\r\n\r\n    /* PrimeNG Modules */\r\n    AccordionModule,\r\n    TreeModule,\r\n    ToastModule,\r\n    ContextMenuModule,\r\n    TabViewModule,\r\n    CodeHighlighterModule,\r\n    BreadcrumbModule,\r\n    ButtonModule,\r\n    DialogModule,\r\n    InputTextareaModule,\r\n    /* Other Third-Party Modules */\r\n    ProgressBarModule\r\n  ],\r\n  providers: [ProcedureService],\r\n  exports: [\r\n    ProceduresComponent,\r\n    ProcedureComponent\r\n  ],\r\n   schemas: [CUSTOM_ELEMENTS_SCHEMA],  // ✅ Add CUSTOM_ELEMENTS_SCHEMA\r\n})\r\nexport class ProcedureModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-views',\r\n  templateUrl: './views.component.html',\r\n  styleUrls: ['./views.component.css']\r\n})\r\nexport class ViewsComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-view',\r\n  templateUrl: './view.component.html',\r\n  styleUrls: ['./view.component.css']\r\n})\r\nexport class ViewComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { DatabaseMetadataService } from '../service/database-metadata.service';\n\n@Component({\n  selector: 'app-database-selector',\n  templateUrl: './database-selector.component.html',\n  styleUrls: ['./database-selector.component.css']\n})\nexport class DatabaseSelectorComponent implements OnInit {\n\n  public selectedDatabase: string = '';\n\n  constructor(private databaseService: DatabaseMetadataService) {}\n  ngOnInit(): void {\n    throw new Error('Method not implemented.');\n  }\n\n  onChangeDatabase() {\n    this.databaseService.changeDatabase(this.selectedDatabase).subscribe((response: { message: string }) => {\n      console.log(response);\n      alert(response.message);\n    });\n  }\n\n}\n","import { HashLocationStrategy, LocationStrategy } from '@angular/common';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { PrismModule } from '@ngx-prism/core'; // <----- Here\r\nimport { BreadcrumbModule } from 'primeng/breadcrumb';\r\nimport { AppComponent } from './app.component'; \r\nimport { AmexioDataModule } from 'amexio-ng-extensions';\r\nimport { AmexioWidgetModule } from 'amexio-ng-extensions';\r\nimport { NgxUiLoaderModule, NgxUiLoaderHttpModule, NgxUiLoaderConfig, POSITION, SPINNER, PB_DIRECTION } from 'ngx-ui-loader';\r\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\r\nimport { ModalModule, BsModalRef } from 'ngx-bootstrap/modal';\r\nimport { AmexioChartsModule } from 'amexio-ng-extensions';\r\nimport { AngularFontAwesomeModule } from 'angular-font-awesome';\r\nimport { AmexioEnterpriseModule } from 'amexio-ng-extensions';\r\nimport { AngularSplitModule } from 'angular-split';\r\nimport { TreeDragDropService } from 'primeng/api';\r\nimport { MessageService } from 'primeng/api';\r\nimport { AccordionModule } from 'primeng/accordion';\r\nimport { TableModule } from 'primeng/table';\r\nimport { ProgressBarModule } from \"angular-progress-bar\"\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeModule } from 'primeng/tree';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ContextMenuModule } from 'primeng/contextmenu';\r\nimport { TabViewModule } from 'primeng/tabview';\r\nimport { CodeHighlighterModule } from 'primeng/codehighlighter'; \r\nimport { AngularMultiSelectModule } from 'angular2-multiselect-dropdown';\r\n\r\n//import { AppRoutingModule } from './app-routing.module';\r\n \r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\n\r\n\r\n\r\n\r\nimport { MainPageComponent } from './ui/main-page/main-page.component'; \r\nimport { HeaderComponent } from './ui/header/header.component';\r\nimport { FooterComponent } from './ui/footer/footer.component';\r\n\r\n \r\nimport { TablesModule } from './table/tables.module';\r\nimport { DatabaseModule } from './database/database.module'; \r\nimport { LeftmenuComponent } from './left-menu/components/leftmenu/leftmenu.component';\r\nimport { ProcedureModule } from './procedure/procedure.module';\r\nimport { ViewsComponent } from './view/components/views/views.component';\r\nimport { ViewComponent } from './view/components/view/view.component';\r\nimport { DatabaseSelectorComponent } from './database/database-selector/database-selector.component';\r\n\r\n\r\nconst appRoutes: Routes = [\r\n\r\n   \r\n];\r\nconst ngxUiLoaderConfig: NgxUiLoaderConfig = {\r\n\r\n  \"bgsColor\": \"#1c749a\",\r\n  \"bgsOpacity\": 0.7,\r\n  \"bgsPosition\": \"center-center\",\r\n  \"bgsSize\": 80,\r\n  \"bgsType\": \"ball-spin-clockwise\",\r\n  \"blur\": 5,\r\n  \"delay\": 0,\r\n  \"fgsColor\": \"#1c749a\",\r\n  \"fgsPosition\": \"center-center\",\r\n  \"fgsSize\": 60,\r\n  \"fgsType\": \"ball-spin-clockwise\",\r\n  \"gap\": 10,\r\n  \"logoPosition\": \"center-center\",\r\n  \"logoSize\": 120,\r\n  \"logoUrl\": \"\",\r\n  \"masterLoaderId\": \"master\",\r\n  \"overlayBorderRadius\": \"0\",\r\n  \"overlayColor\": \"rgba(40, 40, 40, 0.8)\",\r\n  \"pbColor\": \"red\",\r\n  \"pbDirection\": \"ltr\",\r\n  \"pbThickness\": 1,\r\n  \"hasProgressBar\": true,\r\n  \"text\": \"Loading\",\r\n  \"textColor\": \"#FFFFFF\",\r\n  \"textPosition\": \"center-center\",\r\n  \"maxTime\": -1,\r\n  \"minTime\": 300\r\n};\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,   \r\n    MainPageComponent, \r\n    HeaderComponent,\r\n    FooterComponent, \r\n    LeftmenuComponent, ViewsComponent, ViewComponent, DatabaseSelectorComponent\r\n  ], \r\n  imports: [\r\n    BrowserModule.withServerTransition({ appId: 'ng-cli-universal' }),\r\n    HttpClientModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AmexioDataModule,\r\n    AmexioWidgetModule,\r\n    AmexioChartsModule,\r\n    AmexioEnterpriseModule,\r\n    AngularFontAwesomeModule,\r\n    BrowserAnimationsModule,\r\n    AngularSplitModule.forRoot(),\r\n    RouterModule.forRoot(appRoutes, { useHash: true }),\r\n    PrismModule,\r\n    TreeModule,\r\n    CommonModule,\r\n    ToastModule,\r\n    ButtonModule,\r\n    ContextMenuModule,\r\n    TabViewModule,\r\n    CodeHighlighterModule,\r\n    AccordionModule,\r\n    TableModule,\r\n    NgbModule,\r\n    ProgressBarModule,\r\n    BreadcrumbModule,\r\n    HttpClientModule,\r\n    NgxUiLoaderModule.forRoot(ngxUiLoaderConfig),\r\n    NgxUiLoaderHttpModule,\r\n    ModalModule.forRoot(),\r\n    AngularMultiSelectModule,\r\n    TablesModule,\r\n    DatabaseModule,\r\n    ProcedureModule\r\n  ],\r\n  providers:\r\n    [\r\n      {\r\n        provide: LocationStrategy,\r\n        useClass: HashLocationStrategy\r\n      }, \r\n      TreeDragDropService,\r\n      MessageService\r\n    ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nexport function getApiUrl() {\r\n  return 'http://localhost:5000'; // Your first URL\r\n}\r\n\r\nexport function getAnotherUrl() {\r\n  return 'https://localhost:5001'; // Your second URL\r\n}\r\nconst providers = [\r\n  { provide: 'API_URL', useFactory: getApiUrl, deps: [] },\r\n  { provide: 'ANOTHER_URL', useFactory: getAnotherUrl, deps: [] }\r\n];\r\n\r\nif (true) {\r\n    enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic(providers).bootstrapModule(AppModule)\r\n    .catch(err => console.log(err));\r\n"]}