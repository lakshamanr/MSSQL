<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:API.Common.CacheConstants">
            <summary>
            Contains constants for caching database-related information.
            </summary>
        </member>
        <member name="T:API.Common.CacheConstants.DatabaseCache">
            <summary>
            Contains cache keys for various database-related information.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.ServerMetaDataCacheKey">
            <summary>
            Cache key for server metadata.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.DatabaseNames">
            <summary>
            Cache key for all database names.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.StoredProcedures">
            <summary>
            Cache key for stored procedures.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.DatabaseTriggers">
            <summary>
            Cache key for database triggers.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.ScalarFunctions">
            <summary>
            Cache key for scalar functions.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.TableValuedFunctions">
            <summary>
            Cache key for table-valued functions.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.AggregateFunctions">
            <summary>
            Cache key for aggregate functions.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.UserDefinedDataTypes">
            <summary>
            Cache key for user-defined data types.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.XmlSchemaCollections">
            <summary>
            Cache key for XML schema collections.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.ServerProperties">
            <summary>
            Cache key for server properties.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.AdvancedServerSettings">
            <summary>
            Cache key for advanced server settings.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.DatabaseTables">
            <summary>
            Cache key for database tables.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.DatabaseFiles">
            <summary>
            Cache key for database files.
            </summary>
        </member>
        <member name="F:API.Common.CacheConstants.DatabaseCache.ViewDetails">
            <summary>
            Cache key for view details.
            </summary>
        </member>
        <member name="T:API.Common.Helper.ExecutionPlanDapper">
            <summary>
            Provides methods to retrieve the estimated execution plan of a stored procedure using Dapper.
            </summary>
        </member>
        <member name="M:API.Common.Helper.ExecutionPlanDapper.GetEstimatedPlan(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the estimated execution plan for the specified stored procedure.
            </summary>
            <param name="connection">The database connection.</param>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <returns>The estimated execution plan in XML format.</returns>
        </member>
        <member name="M:API.Common.Helper.ExecutionPlanDapper.GetParameters(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieves the parameters of the specified stored procedure.
            </summary>
            <param name="connection">The database connection.</param>
            <param name="spName">The name of the stored procedure.</param>
            <returns>A collection of parameter information.</returns>
        </member>
        <member name="M:API.Common.Helper.ExecutionPlanDapper.BuildExecStatement(System.String,System.Collections.Generic.IEnumerable{API.Common.Helper.ParameterInfo})">
            <summary>
            Builds an EXEC statement with dummy values for the specified stored procedure.
            </summary>
            <param name="spName">The name of the stored procedure.</param>
            <param name="parameters">The parameters of the stored procedure.</param>
            <returns>The EXEC statement with dummy values.</returns>
        </member>
        <member name="M:API.Common.Helper.ExecutionPlanDapper.GetDummyValue(API.Common.Helper.ParameterInfo)">
            <summary>
            Gets a dummy value for the specified parameter.
            </summary>
            <param name="param">The parameter information.</param>
            <returns>The dummy value for the parameter.</returns>
        </member>
        <member name="M:API.Common.Helper.ExecutionPlanDapper.GetPlan(System.Data.IDbConnection,System.String)">
            <summary>
            Retrieves the execution plan for the specified EXEC statement.
            </summary>
            <param name="connection">The database connection.</param>
            <param name="execStatement">The EXEC statement.</param>
            <returns>The execution plan in XML format.</returns>
        </member>
        <member name="M:API.Common.Helper.ExecutionPlanDapper.SplitSchemaAndName(System.String)">
            <summary>
            Splits the stored procedure name into schema and name.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <returns>A tuple containing the schema and name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the stored procedure name is invalid.</exception>
        </member>
        <member name="T:API.Common.Helper.ParameterInfo">
            <summary>
            Represents information about a stored procedure parameter.
            </summary>
        </member>
        <member name="P:API.Common.Helper.ParameterInfo.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:API.Common.Helper.ParameterInfo.TypeName">
            <summary>
            Gets or sets the type name of the parameter.
            </summary>
        </member>
        <member name="P:API.Common.Helper.ParameterInfo.IsNullable">
            <summary>
            Gets or sets a value indicating whether the parameter is nullable.
            </summary>
        </member>
        <member name="M:API.Common.Helper.ExecutionPlanDapperHelpers.SplitSchemaAndName(System.String)">
            <summary>
            Splits the stored procedure name into schema and name.
            </summary>
            <param name="spName">The stored procedure name.</param>
            <returns>A tuple containing the schema and name.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the stored procedure name is invalid.</exception>
        </member>
        <member name="T:API.Common.Helper.TreeViewNodeHelper">
            <summary>
            Provides helper methods for creating tree view nodes.
            </summary>
        </member>
        <member name="M:API.Common.Helper.TreeViewNodeHelper.CreateTreeViewNode(System.String,System.String,System.String,API.Domain.LeftMenu.SchemaEnums,System.Boolean,System.Boolean,System.Int32,System.Collections.Generic.List{API.Domain.LeftMenu.TreeViewJson})">
            <summary>
            Creates a tree view node with the specified parameters.
            </summary>
            <param name="text">The text of the node.</param>
            <param name="icon">The icon of the node.</param>
            <param name="link">The link of the node.</param>
            <param name="schemaEnum">The schema enum of the node.</param>
            <param name="selected">Indicates whether the node is selected.</param>
            <param name="expand">Indicates whether the node is expanded.</param>
            <param name="badge">The badge number of the node.</param>
            <param name="children">The child nodes of the node.</param>
            <returns>A new instance of <see cref="T:API.Domain.LeftMenu.TreeViewJson"/>.</returns>
        </member>
        <member name="T:API.Common.Queries.SqlQueryConstant">
            <summary>
            Contains SQL query constants used for various database operations.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadStoredProcedures">
            <summary>
            SQL query to load all stored procedures.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadDatabaseTriggers">
            <summary>
            SQL query to load all database triggers.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadUserDefinedDataTypes">
            <summary>
            SQL query to load all user-defined data types.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadXmlSchemaCollections">
            <summary>
            SQL query to load all XML schema collections.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadServerProperties">
            <summary>
            SQL query to load server properties.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadAdvancedServerSettings">
            <summary>
            SQL query to load advanced server settings.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadDatabases">
            <summary>
            SQL query to load all databases excluding system databases.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadAllDatabases">
            <summary>
            SQL query to load all databases excluding system databases.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadDatabaseFiles">
            <summary>
            SQL query to load database files for a specific database.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadViewDetails">
            <summary>
            SQL query to load view details.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadAggregateFunctions">
            <summary>
            SQL query to load aggregate functions.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadScalarFunctions">
            <summary>
            SQL query to load scalar functions.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadTableValuedFunctions">
            <summary>
            SQL query to load table-valued functions.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadStorage">
            <summary>
            SQL query to load storage information.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadFullTextCatalogs">
            <summary>
            SQL query to load full-text catalogs.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadSecurity">
            <summary>
            SQL query to load security information.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.LoadSecurityUsers">
            <summary>
            SQL query to load security users.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.GetSecurityRoles">
            <summary>
            SQL query to get security roles.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.GetSecuritySchemas">
            <summary>
            SQL query to get security schemas.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.FetchAllStoredProceduresWithDescriptions">
            <summary>
            SQL query to fetch all stored procedures with descriptions.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.FetchScalarFunctionDescriptions">
            <summary>
            Query to fetch descriptions of all scalar functions.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.FetchTableFunctionDescriptions">
            <summary>
            Query to fetch descriptions of all table-valued functions.
            </summary>
        </member>
        <member name="F:API.Common.Queries.SqlQueryConstant.FetchAggregateFunctionDescriptions">
            <summary>
            Query to fetch descriptions of all aggregate functions.
            </summary>
        </member>
        <member name="T:API.Controllers.AggregateFunctionController">
            <summary>
            API Controller for managing aggregate SQL functions.
            </summary>
        </member>
        <member name="M:API.Controllers.AggregateFunctionController.#ctor(API.Repository.Functions.IAggregateFunctionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.AggregateFunctionController"/> class.
            </summary>
            <param name="aggregateFunctionRepository">The repository for aggregate functions.</param>
        </member>
        <member name="M:API.Controllers.AggregateFunctionController.GetFunctionMetadata(System.String)">
            <summary>
            Retrieves metadata for a given aggregate function.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the function metadata.</returns>
        </member>
        <member name="M:API.Controllers.AggregateFunctionController.UpsertFunctionDescription(System.String,System.String,System.String)">
            <summary>
            Upserts the description of an aggregate function.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description of the function.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the operation.</returns>
        </member>
        <member name="M:API.Controllers.AggregateFunctionController.GetAggregateFunctionDescriptions">
            <summary>
            Retrieves descriptions for all aggregate functions.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing a dictionary of function names and their descriptions.</returns>
        </member>
        <member name="T:API.Controllers.BaseController">
            <summary>
            Base controller for all API controllers.
            </summary>
        </member>
        <member name="T:API.Controllers.DatabaseController">
            <summary>
            Controller to handle database related operations.
            </summary>
        </member>
        <member name="M:API.Controllers.DatabaseController.#ctor(API.Repository.Database.IDatabaseReposititory)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.DatabaseController"/> class.
            </summary>
            <param name="repository">The database repository.</param>
        </member>
        <member name="M:API.Controllers.DatabaseController.GetDatabaseMetaData">
            <summary>
            Gets the metadata of the database.
            </summary>
            <returns>The metadata of the database.</returns>
        </member>
        <member name="T:API.Controllers.DatabaseTriggerController">
            <summary>
            API controller for managing database triggers.
            </summary>
        </member>
        <member name="M:API.Controllers.DatabaseTriggerController.#ctor(API.Repository.Triggers.IDatabaseTriggerRepository)">
            <summary>
            
            </summary>
            <param name="repository"></param>
        </member>
        <member name="M:API.Controllers.DatabaseTriggerController.GetAllTriggers">
            <summary>
            Retrieves all database triggers.
            </summary>
        </member>
        <member name="M:API.Controllers.DatabaseTriggerController.GetTriggerByName(System.String)">
            <summary>
            Retrieves details of a specific trigger by name.
            </summary>
        </member>
        <member name="M:API.Controllers.DatabaseTriggerController.MergeTriggerPropertyAsync(API.Domain.Triggers.DatabaseTrigger)">
            <summary>
            Adds a new/update  extended property for a database trigger.
            </summary>
        </member>
        <member name="T:API.Controllers.FullTextCatalogController">
            <summary>
            Controller for managing Full Text Catalogs.
            </summary>
        </member>
        <member name="M:API.Controllers.FullTextCatalogController.#ctor(API.Repository.FullTextCatalog.IFullTextCatalogRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.FullTextCatalogController"/> class.
            </summary>
            <param name="repository">The repository for Full Text Catalogs.</param>
        </member>
        <member name="M:API.Controllers.FullTextCatalogController.GetAll">
            <summary>
            Gets all Full Text Catalogs.
            </summary>
            <returns>A collection of Full Text Catalogs.</returns>
        </member>
        <member name="M:API.Controllers.FullTextCatalogController.GetByName(System.String)">
            <summary>
            Gets a Full Text Catalog by name.
            </summary>
            <param name="name">The name of the Full Text Catalog.</param>
            <returns>The Full Text Catalog if found; otherwise, NotFound.</returns>
        </member>
        <member name="T:API.Controllers.LeftMenuController">
            <summary>
            Controller for handling left menu related requests.
            </summary>
        </member>
        <member name="M:API.Controllers.LeftMenuController.#ctor(API.Repository.LeftMenu.ILeftMenuRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.LeftMenuController"/> class.
            </summary>
            <param name="leftMenuRepository">The left menu repository.</param>
        </member>
        <member name="M:API.Controllers.LeftMenuController.GetLeftMenu">
            <summary>
            Gets the left menu asynchronously.
            </summary>
            <returns>A JSON string representing the left menu.</returns>
        </member>
        <member name="T:API.Controllers.ScalarFunctionController">
            <summary>
            API Controller for managing scalar SQL functions.
            </summary>
        </member>
        <member name="M:API.Controllers.ScalarFunctionController.#ctor(API.Repository.Functions.IScalarFunctionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.ScalarFunctionController"/> class.
            </summary>
            <param name="scalarFunctionRepository">The repository for scalar functions.</param>
        </member>
        <member name="M:API.Controllers.ScalarFunctionController.GetFunctionMetadata(System.String)">
            <summary>
            Retrieves metadata for a given scalar function.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the function metadata.</returns>
        </member>
        <member name="M:API.Controllers.ScalarFunctionController.UpsertFunctionDescription(System.String,System.String,System.String)">
            <summary>
            Upserts the description of a scalar function.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description of the function.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the operation.</returns>
        </member>
        <member name="M:API.Controllers.ScalarFunctionController.GetScalarFunctionDescriptions">
            <summary>
            Retrieves descriptions for all scalar functions.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing a dictionary of function names and their descriptions.</returns>
        </member>
        <member name="T:API.Controllers.SchemaController">
            <summary>
            Controller for handling schema-related operations.
            </summary>
        </member>
        <member name="M:API.Controllers.SchemaController.#ctor(API.Repository.SchemaRepository.ISchemaRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.SchemaController"/> class.
            </summary>
            <param name="repository">The schema repository.</param>
        </member>
        <member name="M:API.Controllers.SchemaController.GetAllSchemaMetadataAsync">
            <summary>
            Gets all schema metadata asynchronously.
            </summary>
            <returns>A list of schema metadata.</returns>
        </member>
        <member name="M:API.Controllers.SchemaController.GetSchemaMetadata(System.String)">
            <summary>
            Gets the metadata for a specific schema asynchronously.
            </summary>
            <param name="schemaName">The name of the schema.</param>
            <returns>The metadata of the specified schema.</returns>
        </member>
        <member name="T:API.Controllers.StoredProcedureController">
            <summary>
            Controller for handling stored procedure related operations.
            </summary>
        </member>
        <member name="M:API.Controllers.StoredProcedureController.#ctor(API.Repository.StoreProcedure.IStoredProcedureRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.StoredProcedureController"/> class.
            </summary>
            <param name="repository">The repository instance.</param>
        </member>
        <member name="M:API.Controllers.StoredProcedureController.GetAllStoredProcedures">
            <summary>
            Gets all stored procedures.
            </summary>
            <returns>A list of stored procedures.</returns>
        </member>
        <member name="M:API.Controllers.StoredProcedureController.GetStoredProcedureMetadata(System.String)">
            <summary>
            Gets the metadata of a specific stored procedure.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <returns>The metadata of the stored procedure.</returns>
        </member>
        <member name="M:API.Controllers.StoredProcedureController.MergeStoredProcedureDescription(API.Domain.StoredProcedure.StoredProcedureDescriptionRequest)">
            <summary>
            Merges the description of a stored procedure.
            </summary>
            <param name="request">The request containing the schema name, stored procedure name, and description.</param>
            <returns>An IActionResult.</returns>
        </member>
        <member name="M:API.Controllers.StoredProcedureController.MergeParameterDescription(API.Domain.StoredProcedure.ParameterDescriptionRequest)">
            <summary>
            Merges the description of a stored procedure parameter.
            </summary>
            <param name="request">The request containing the schema name, stored procedure name, parameter name, and description.</param>
            <returns>An IActionResult.</returns>
        </member>
        <member name="T:API.Controllers.TableFunctionController">
            <summary>
            Controller for handling table-valued function operations.
            </summary>
        </member>
        <member name="M:API.Controllers.TableFunctionController.#ctor(API.Repository.Functions.ITableValuedFunctionRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.TableFunctionController"/> class.
            </summary>
            <param name="tableValuedFunctionRepository">The repository for table-valued functions.</param>
        </member>
        <member name="M:API.Controllers.TableFunctionController.GetFunctionMetadata(System.String)">
            <summary>
            Retrieves metadata for a specified table-valued function.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing the function metadata.</returns>
        </member>
        <member name="M:API.Controllers.TableFunctionController.UpsertFunctionDescription(System.String,System.String,System.String)">
            <summary>
            Upserts the description of a specified table-valued function.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description to be upserted.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> indicating the result of the operation.</returns>
        </member>
        <member name="M:API.Controllers.TableFunctionController.GetTableFunctionDescriptions">
            <summary>
            Retrieves descriptions for all table-valued functions.
            </summary>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.IActionResult"/> containing a dictionary of function names and their descriptions.</returns>
        </member>
        <member name="T:API.Controllers.TablesController">
            <summary>
            Controller for handling table-related operations.
            </summary>
        </member>
        <member name="M:API.Controllers.TablesController.#ctor(API.Repository.Table.ITableRepository,API.Repository.Table.ITablesRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.TablesController"/> class.
            </summary>
            <param name="tableService">The table repository service.</param>
            <param name="tablesService">The tables repository service.</param>
        </member>
        <member name="M:API.Controllers.TablesController.GetDetailedTableInfoAsync(System.String)">
            <summary>
            Gets detailed metadata for a specific table.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>The metadata of the table.</returns>
        </member>
        <member name="M:API.Controllers.TablesController.GetTableDetailsAsync">
            <summary>
            Gets details of all tables.
            </summary>
            <returns>A list of table metadata.</returns>
        </member>
        <member name="M:API.Controllers.TablesController.UpdateTableExtendedProperties(API.Domain.Table.TableDescription)">
            <summary>
            Updates extended properties of a table.
            </summary>
            <param name="tableDescription">The table description containing extended properties.</param>
            <returns>An action result.</returns>
        </member>
        <member name="M:API.Controllers.TablesController.UpdateTableColumnExtendedProperty(API.Domain.Table.TableColumns)">
            <summary>
            Updates extended properties of a table column.
            </summary>
            <param name="tableColumns">The table columns containing extended properties.</param>
            <returns>An action result.</returns>
        </member>
        <member name="T:API.Controllers.UserDefinedDataTypeController">
            <summary>
            Controller for managing user-defined data types.
            </summary>
        </member>
        <member name="M:API.Controllers.UserDefinedDataTypeController.#ctor(API.Repository.UserDefinedDataType.IUserDefinedDataTypeRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.UserDefinedDataTypeController"/> class.
            </summary>
            <param name="repository">The repository instance to interact with user-defined data types.</param>
        </member>
        <member name="M:API.Controllers.UserDefinedDataTypeController.GetAllUserDefinedDataTypes">
            <summary>
            Get all user-defined data types.
            </summary>
            <returns>A list of all user-defined data types.</returns>
        </member>
        <member name="M:API.Controllers.UserDefinedDataTypeController.GetUserDefinedDataTypeWithExtendedProperties(System.String,System.String)">
            <summary>
            Get details of a specific user-defined data type along with its extended properties.
            </summary>
            <param name="schemaName">The schema name of the user-defined data type.</param>
            <param name="typeName">The name of the user-defined data type.</param>
            <returns>The details of the specified user-defined data type.</returns>
        </member>
        <member name="M:API.Controllers.UserDefinedDataTypeController.UpsertUserDefinedDataTypeExtendedProperty(API.Domain.UserDefinedDataType.UpsertExtendedPropertyRequest)">
            <summary>
            Add or update an extended property (description) for a user-defined data type.
            </summary>
            <param name="request">The request model containing schema name, type name, and description.</param>
            <returns>A status indicating the result of the operation.</returns>
        </member>
        <member name="T:API.Controllers.ViewController">
            <summary>
            Controller for handling view-related API requests.
            </summary>
        </member>
        <member name="M:API.Controllers.ViewController.#ctor(API.Repository.View.IViewsRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.ViewController"/> class.
            </summary>
            <param name="viewsRepository">The repository for accessing view data.</param>
        </member>
        <member name="M:API.Controllers.ViewController.GetDetailedViewsInfoAsync">
            <summary>
            Gets detailed information about all views.
            </summary>
            <returns>A collection of <see cref="T:API.Domain.View.ViewDetails"/> objects.</returns>
        </member>
        <member name="M:API.Controllers.ViewController.GetViewMetaDataAsync(System.String)">
            <summary>
            Gets metadata for a specific view.
            </summary>
            <param name="viewname">The name of the view.</param>
            <returns>An <see cref="T:Microsoft.AspNetCore.Mvc.ActionResult"/> containing the <see cref="T:API.Domain.View.ViewMetaData"/> object.</returns>
        </member>
        <member name="T:API.Controllers.XmlSchemaController">
            <summary>
            Controller to handle XML Schema related operations.
            </summary>
        </member>
        <member name="M:API.Controllers.XmlSchemaController.#ctor(API.Repository.XMLSchemaCollections.IXmlSchemaRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Controllers.XmlSchemaController"/> class.
            </summary>
            <param name="repository">The repository to access XML Schema data.</param>
        </member>
        <member name="M:API.Controllers.XmlSchemaController.GetXmlSchemaDetails(System.String)">
            <summary>
            Endpoint to get XML Schema Details.
            </summary>
            <param name="schemaCollectionName">The name of the schema collection.</param>
            <returns>Details of the XML Schema.</returns>
        </member>
        <member name="M:API.Controllers.XmlSchemaController.GetXmlSchemaReferences(System.String)">
            <summary>
            Endpoint to get XML Schema References.
            </summary>
            <param name="schemaCollectionName">The name of the schema collection.</param>
            <returns>References of the XML Schema.</returns>
        </member>
        <member name="M:API.Controllers.XmlSchemaController.GetAllXmlSchemaCollections">
            <summary>
            New endpoint to get all XML Schema Collections.
            </summary>
            <returns>All XML Schema Collections.</returns>
        </member>
        <member name="T:API.Domain.Common.ReferencesModel">
            <summary>
            Represents a model for references with path, full entity name, type, and iteration.
            </summary>
        </member>
        <member name="P:API.Domain.Common.ReferencesModel.ThePath">
            <summary>
            Gets or sets the path of the reference.
            </summary>
        </member>
        <member name="P:API.Domain.Common.ReferencesModel.TheFullEntityName">
            <summary>
            Gets or sets the full entity name of the reference.
            </summary>
        </member>
        <member name="P:API.Domain.Common.ReferencesModel.TheType">
            <summary>
            Gets or sets the type of the reference.
            </summary>
        </member>
        <member name="P:API.Domain.Common.ReferencesModel.iteration">
            <summary>
            Gets or sets the iteration of the reference.
            </summary>
        </member>
        <member name="T:API.Domain.Database.DatabaseInfo">
            <summary>
            Represents information about a database.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseInfo.Name">
            <summary>
            Gets or sets the name of the database.
            </summary>
        </member>
        <member name="T:API.Domain.Database.ServerProperty">
            <summary>
            Represents a server property.
            </summary>
        </member>
        <member name="P:API.Domain.Database.ServerProperty.Name">
            <summary>
            Gets or sets the name of the server property.
            </summary>
        </member>
        <member name="P:API.Domain.Database.ServerProperty.Value">
            <summary>
            Gets or sets the value of the server property.
            </summary>
        </member>
        <member name="T:API.Domain.Database.ColumnInfo">
            <summary>
            Represents information about a column.
            </summary>
        </member>
        <member name="P:API.Domain.Database.ColumnInfo.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="T:API.Domain.Database.ProcedureInfo">
            <summary>
            Represents information about a stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.Database.ProcedureInfo.ProcedureName">
            <summary>
            Gets or sets the name of the stored procedure.
            </summary>
        </member>
        <member name="T:API.Domain.Database.FunctionInfo">
            <summary>
            Represents information about a function.
            </summary>
        </member>
        <member name="P:API.Domain.Database.FunctionInfo.FunctionName">
            <summary>
            Gets or sets the name of the function.
            </summary>
        </member>
        <member name="T:API.Domain.Database.TriggerInfo">
            <summary>
            Represents information about a trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Database.TriggerInfo.TriggerName">
            <summary>
            Gets or sets the name of the trigger.
            </summary>
        </member>
        <member name="T:API.Domain.Database.UserType">
            <summary>
            Represents a user-defined type.
            </summary>
        </member>
        <member name="P:API.Domain.Database.UserType.UserTypeName">
            <summary>
            Gets or sets the name of the user-defined type.
            </summary>
        </member>
        <member name="T:API.Domain.Database.DbXmlSchema">
            <summary>
            Represents an XML schema in the database.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DbXmlSchema.SchemaName">
            <summary>
            Gets or sets the name of the XML schema.
            </summary>
        </member>
        <member name="T:API.Domain.Database.DatabaseFile">
            <summary>
            Represents a database file.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseFile.FileName">
            <summary>
            Gets or sets the name of the database file.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseFile.FileType">
            <summary>
            Gets or sets the type of the database file.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseFile.FileLocation">
            <summary>
            Gets or sets the location of the database file.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseFile.CurrentSizeMB">
            <summary>
            Gets or sets the current size of the database file in megabytes.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseFile.MaxSizeMB">
            <summary>
            Gets or sets the maximum size of the database file in megabytes.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseFile.GrowthType">
            <summary>
            Gets or sets the growth type of the database file.
            </summary>
        </member>
        <member name="T:API.Domain.Database.ViewMetadata">
            <summary>
            Represents metadata for a database view.
            </summary>
        </member>
        <member name="P:API.Domain.Database.ViewMetadata.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
        </member>
        <member name="P:API.Domain.Database.ViewMetadata.ExtendedProperty">
            <summary>
            Gets or sets the extended property of the view.
            </summary>
        </member>
        <member name="T:API.Domain.Database.DatabaseMetaData">
            <summary>
            Represents metadata information about a database.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.DbXmlSchemas">
            <summary>
            Gets or sets the collection of XML schemas in the database.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.CurrentDatabaseName">
            <summary>
            Gets or sets the name of the current database.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.DatabaseInfos">
            <summary>
            Gets or sets the collection of database information.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.DatabaseServerName">
            <summary>
            Gets or sets the name of the database server.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.ProcedureInfos">
            <summary>
            Gets or sets the collection of stored procedure information.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.ScalarFunctionInfos">
            <summary>
            Gets or sets the collection of scalar function information.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.ServerAdvanceProperties">
            <summary>
            Gets or sets the collection of advanced server properties.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.ServerProperties">
            <summary>
            Gets or sets the collection of server properties.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.TriggerInfos">
            <summary>
            Gets or sets the collection of trigger information.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.TableFunctionInfos">
            <summary>
            Gets or sets the collection of table function information.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.UserTypes">
            <summary>
            Gets or sets the collection of user-defined types.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.fileInformations">
            <summary>
            Gets or sets the collection of database file information.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.viewMetadata">
            <summary>
            Gets or sets the collection of view metadata.
            </summary>
        </member>
        <member name="P:API.Domain.Database.DatabaseMetaData.tablesMetadata">
            <summary>
            Gets or sets the collection of table metadata.
            </summary>
        </member>
        <member name="T:API.Domain.FullTextCatalog.FullTextCatalog">
            <summary>
            Represents a full-text catalog in the database.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.Name">
            <summary>
            Gets or sets the name of the full-text catalog.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.SchemaName">
            <summary>
            Gets or sets the schema name of the full-text catalog.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.Owner">
            <summary>
            Gets or sets the owner of the full-text catalog.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.IsDefault">
            <summary>
            Gets or sets a value indicating whether this catalog is the default catalog.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.IsAccentSensitive">
            <summary>
            Gets or sets a value indicating whether this catalog is accent sensitive.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.Description">
            <summary>
            Gets or sets the description of the full-text catalog.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.CreateScript">
            <summary>
            Gets or sets the script to create the full-text catalog.
            </summary>
        </member>
        <member name="P:API.Domain.FullTextCatalog.FullTextCatalog.IndexScripts">
            <summary>
            Gets or sets the scripts to create indexes for the full-text catalog.
            </summary>
        </member>
        <member name="T:API.Domain.Functions.SqlFunctionMetadata">
            <summary>
            Represents metadata for a SQL function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionMetadata.FunctionName">
            <summary>
            Gets or sets the name of the function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionMetadata.FunctionDetail">
            <summary>
            Gets or sets the details of the function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionMetadata.Parameters">
            <summary>
            Gets or sets the parameters of the function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionMetadata.Definition">
            <summary>
            Gets or sets the definition of the function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionMetadata.Dependencies">
            <summary>
            Gets or sets the dependencies of the function.
            </summary>
        </member>
        <member name="T:API.Domain.Functions.SqlFunctionDependency">
            <summary>
            Represents a dependency of a SQL function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDependency.name">
            <summary>
            Gets or sets the name of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDependency.type">
            <summary>
            Gets or sets the type of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDependency.Updated">
            <summary>
            Gets or sets the updated status of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDependency.Selected">
            <summary>
            Gets or sets the selected status of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDependency.column_name">
            <summary>
            Gets or sets the column name of the dependency.
            </summary>
        </member>
        <member name="T:API.Domain.Functions.SqlFunctionDetail">
            <summary>
            Represents the details of a SQL function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDetail.uses_ansi_nulls">
            <summary>
            Gets or sets a value indicating whether ANSI_NULLS is used.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDetail.uses_quoted_identifier">
            <summary>
            Gets or sets a value indicating whether QUOTED_IDENTIFIER is used.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDetail.create_date">
            <summary>
            Gets or sets the creation date of the SQL function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDetail.modify_date">
            <summary>
            Gets or sets the modification date of the SQL function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionDetail.name">
            <summary>
            Gets or sets the name of the SQL function.
            </summary>
        </member>
        <member name="T:API.Domain.Functions.SqlFunctionParameter">
            <summary>
            Represents a parameter for a SQL function.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.Parameter_name">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.Type">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.Length">
            <summary>
            Gets or sets the length of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.Prec">
            <summary>
            Gets or sets the precision of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.Scale">
            <summary>
            Gets or sets the scale of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.Param_order">
            <summary>
            Gets or sets the order of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.Collation">
            <summary>
            Gets or sets the collation of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.Functions.SqlFunctionParameter.ExtendedProperty">
            <summary>
            Gets or sets the extended property of the parameter.
            </summary>
        </member>
        <member name="T:API.Domain.LeftMenu.SchemaEnums">
            <summary>
            Enum representing various schema elements in the left menu.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.Table">
            <summary>
            Represents a table.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.Database">
            <summary>
            Represents a database.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.TableValueFunction">
            <summary>
            Represents a table-valued function.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.ScalarValueFunctions">
            <summary>
            Represents a scalar-valued function.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AggregateFunciton">
            <summary>
            Represents an aggregate function.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.Storeprocedure">
            <summary>
            Represents a stored procedure.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.Triggers">
            <summary>
            Represents a trigger.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.UserDefinedDataType">
            <summary>
            Represents a user-defined data type.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.XMLSchemaCollection">
            <summary>
            Represents an XML schema collection.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.DatabaseServer">
            <summary>
            Represents a database server.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.Views">
            <summary>
            Represents a view.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.Programmability">
            <summary>
            Represents programmability.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllDatabase">
            <summary>
            Represents all databases.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllTableValueFunction">
            <summary>
            Represents all table-valued functions.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllScalarValueFunctions">
            <summary>
            Represents all scalar-valued functions.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllAggregateFunciton">
            <summary>
            Represents all aggregate functions.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllStoreprocedure">
            <summary>
            Represents all stored procedures.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllTriggers">
            <summary>
            Represents all triggers.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllUserDefinedDataType">
            <summary>
            Represents all user-defined data types.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllXMLSchemaCollection">
            <summary>
            Represents all XML schema collections.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllDatabaseServer">
            <summary>
            Represents all database servers.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllViews">
            <summary>
            Represents all views.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllProgrammability">
            <summary>
            Represents all programmability.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllFunctions">
            <summary>
            Represents all functions.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllDatabaseDataTypes">
            <summary>
            Represents all database data types.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllTable">
            <summary>
            Represents all tables.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.ProjectInfo">
            <summary>
            Represents project information.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.TableCoumns">
            <summary>
            Represents table columns.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.WorkFlow">
            <summary>
            Represents workflow.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.AllSSISPackages">
            <summary>
            Represents all SSIS packages.
            </summary>
        </member>
        <member name="F:API.Domain.LeftMenu.SchemaEnums.SSISPackages">
            <summary>
            Represents SSIS packages.
            </summary>
        </member>
        <member name="T:API.Domain.LeftMenu.TreeViewConfiguration">
            <summary>
            Represents the configuration for a tree view in the left menu.
            </summary>
        </member>
        <member name="M:API.Domain.LeftMenu.TreeViewConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:API.Domain.LeftMenu.TreeViewConfiguration"/> class.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewConfiguration.DatabaseNames">
            <summary>
            Gets or sets the list of database names.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewConfiguration.ProjectName">
            <summary>
            Gets or sets the project name.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewConfiguration.ServerName">
            <summary>
            Gets or sets the server name.
            </summary>
        </member>
        <member name="T:API.Domain.LeftMenu.TreeViewJson">
            <summary>
            Represents a tree view item in the left menu.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.text">
            <summary>
            Gets or sets the text of the tree view item.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.icon">
            <summary>
            Gets or sets the icon of the tree view item.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.mdaIcon">
            <summary>
            Gets or sets the MDA icon of the tree view item.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.link">
            <summary>
            Gets or sets the link of the tree view item.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.selected">
            <summary>
            Gets or sets a value indicating whether the tree view item is selected.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.badge">
            <summary>
            Gets or sets the badge number of the tree view item.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.expand">
            <summary>
            Gets or sets a value indicating whether the tree view item is expanded.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.leaf">
            <summary>
            Gets or sets a value indicating whether the tree view item is a leaf node.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.SchemaEnums">
            <summary>
            Gets or sets the schema enums of the tree view item.
            </summary>
        </member>
        <member name="P:API.Domain.LeftMenu.TreeViewJson.children">
            <summary>
            Gets or sets the children of the tree view item.
            </summary>
        </member>
        <member name="T:API.Domain.Schemas.SchemaDescription">
            <summary>
            Represents a description of a schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaDescription.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaDescription.Description">
            <summary>
            Gets or sets the description of the schema.
            </summary>
        </member>
        <member name="T:API.Domain.Schemas.SchemaMetadata">
            <summary>
            Represents metadata for a schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaMetadata.Description">
            <summary>
            Gets or sets the description of the schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaMetadata.Owner">
            <summary>
            Gets or sets the owner of the schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaMetadata.Script">
            <summary>
            Gets or sets the script associated with the schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaMetadata.ObjectsUsedBySchemaAsync">
            <summary>
            Gets or sets the objects used by the schema asynchronously.
            </summary>
        </member>
        <member name="T:API.Domain.Schemas.SchemaObject">
            <summary>
            Represents an object within a schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaObject.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaObject.ObjectName">
            <summary>
            Gets or sets the name of the object.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaObject.ObjectType">
            <summary>
            Gets or sets the type of the object.
            </summary>
        </member>
        <member name="T:API.Domain.Schemas.SchemaOwner">
            <summary>
            Represents the owner of a schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaOwner.SchemaName">
            <summary>
            Gets or sets the name of the schema.
            </summary>
        </member>
        <member name="P:API.Domain.Schemas.SchemaOwner.Owner">
            <summary>
            Gets or sets the owner of the schema.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.DependencyResult">
            <summary>
            Represents the result of a dependency check between objects.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.DependencyResult.ReferencingObjectName">
            <summary>
            Gets or sets the name of the referencing object.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.DependencyResult.ReferencingObjectType">
            <summary>
            Gets or sets the type of the referencing object.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.DependencyResult.ReferencedObjectName">
            <summary>
            Gets or sets the name of the referenced object.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.ExecutionPlanResult">
            <summary>
            Represents the result of an execution plan.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ExecutionPlanResult.QueryPlan">
            <summary>
            Gets or sets the query plan.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ExecutionPlanResult.UseCounts">
            <summary>
            Gets or sets the use counts.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ExecutionPlanResult.CacheObjectType">
            <summary>
            Gets or sets the cache object type.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ExecutionPlanResult.SizeInBytes">
            <summary>
            Gets or sets the size in bytes.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ExecutionPlanResult.SQLText">
            <summary>
            Gets or sets the SQL text.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.ParameterDescriptionRequest">
            <summary>
            Represents a request to describe a parameter of a stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ParameterDescriptionRequest.SchemaName">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ParameterDescriptionRequest.StoredProcedureName">
            <summary>
            Gets or sets the stored procedure name.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ParameterDescriptionRequest.ParameterName">
            <summary>
            Gets or sets the parameter name.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.ParameterDescriptionRequest.Description">
            <summary>
            Gets or sets the description of the parameter.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.StoredProcedureCreateScript">
            <summary>
            Represents a script to create a stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureCreateScript.StoredProcedureName">
            <summary>
            Gets or sets the name of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureCreateScript.ProcedureDefinition">
            <summary>
            Gets or sets the definition of the procedure.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.StoredProcedureDescriptionRequest">
            <summary>
            Represents a request to describe a stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureDescriptionRequest.SchemaName">
            <summary>
            Gets or sets the schema name of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureDescriptionRequest.StoredProcedureName">
            <summary>
            Gets or sets the name of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureDescriptionRequest.Description">
            <summary>
            Gets or sets the description of the stored procedure.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.StoredProcedureInfo">
            <summary>
            Represents information about a stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureInfo.StoredProcedure">
            <summary>
            Gets or sets the name of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureInfo.ExtendedProperty">
            <summary>
            Gets or sets the extended property of the stored procedure.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.StoredProcedureMeta">
            <summary>
            Represents metadata for a stored procedure, including dependencies, parameters, creation script, execution plan, and dependency tree.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureMeta.Dependencies">
            <summary>
            Gets or sets the dependencies of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureMeta.Parameters">
            <summary>
            Gets or sets the parameters of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureMeta.CreateScript">
            <summary>
            Gets or sets the creation script of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureMeta.ExecutionPlan">
            <summary>
            Gets or sets the execution plan of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureMeta.StoredProcedureDependenciesTree">
            <summary>
            Gets or sets the dependency tree of the stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureMeta.storedProcedureInfo">
            <summary>
            Gets or sets the information about the stored procedure.
            </summary>
        </member>
        <member name="T:API.Domain.StoredProcedure.StoredProcedureParameter">
            <summary>
            Represents a parameter for a stored procedure.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.ParameterName">
            <summary>
            Gets or sets the name of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.Type">
            <summary>
            Gets or sets the type of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.Length">
            <summary>
            Gets or sets the length of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.Precision">
            <summary>
            Gets or sets the precision of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.Scale">
            <summary>
            Gets or sets the scale of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.ParameterOrder">
            <summary>
            Gets or sets the order of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.Collation">
            <summary>
            Gets or sets the collation of the parameter.
            </summary>
        </member>
        <member name="P:API.Domain.StoredProcedure.StoredProcedureParameter.ExtendedProperty">
            <summary>
            Gets or sets the extended property of the parameter.
            </summary>
        </member>
        <member name="T:API.Domain.Table.HirechyJsonGenerator">
            <summary>
            Generates a hierarchical JSON structure from a list of strings.
            </summary>
        </member>
        <member name="F:API.Domain.Table.HirechyJsonGenerator.root">
            <summary>
            The root node of the hierarchy.
            </summary>
        </member>
        <member name="M:API.Domain.Table.HirechyJsonGenerator.#ctor(System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{API.Domain.Common.ReferencesModel})">
            <summary>
            Initializes a new instance of the <see cref="T:API.Domain.Table.HirechyJsonGenerator"/> class.
            </summary>
            <param name="l">The list of strings representing the hierarchy.</param>
            <param name="depancyName">The name of the root dependency.</param>
            <param name="referencesModels">Optional list of reference models.</param>
        </member>
        <member name="M:API.Domain.Table.HirechyJsonGenerator.addRow(System.String)">
            <summary>
            Adds a row to the hierarchy.
            </summary>
            <param name="s">The string representing the row to add.</param>
        </member>
        <member name="M:API.Domain.Table.HirechyJsonGenerator.addSoon(API.Domain.Table.Node,System.String)">
            <summary>
            Adds a child node to the specified node if it does not already exist.
            </summary>
            <param name="n">The parent node.</param>
            <param name="s">The name of the child node to add.</param>
        </member>
        <member name="M:API.Domain.Table.HirechyJsonGenerator.getSoon(API.Domain.Table.Node,System.String)">
            <summary>
            Gets the child node with the specified name.
            </summary>
            <param name="n">The parent node.</param>
            <param name="s">The name of the child node to get.</param>
            <returns>The child node with the specified name, or null if it does not exist.</returns>
        </member>
        <member name="T:API.Domain.Table.Node">
            <summary>
            
            </summary>
        </member>
        <member name="P:API.Domain.Table.Node.IblnFirstNode">
            <summary>
            
            </summary>
        </member>
        <member name="P:API.Domain.Table.Node.ReferencesModels">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Domain.Table.Node.#ctor(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="F:API.Domain.Table.Node.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:API.Domain.Table.Node.StyleClass">
            <summary>
            
            </summary>
        </member>
        <member name="F:API.Domain.Table.Node.Soon">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Domain.Table.Node.PrimengToJson">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Domain.Table.Node.GetSQLObject(System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Domain.Table.Node.amexioToJson">
            <summary>
            
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableColumns">
            <summary>
            Represents the columns of a table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.Key">
            <summary>
            Gets or sets the key of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.Identity">
            <summary>
            Gets or sets the identity of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.DataType">
            <summary>
            Gets or sets the data type of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.MaxLength">
            <summary>
            Gets or sets the maximum length of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.AllowNulls">
            <summary>
            Gets or sets a value indicating whether null values are allowed.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.Default">
            <summary>
            Gets or sets the default value of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.Description">
            <summary>
            Gets or sets the description of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.ExtendedPropertyName">
            <summary>
            Gets or sets the extended property name of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableColumns.ExtendedPropertyValue">
            <summary>
            Gets or sets the extended property value of the column.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableConstraint">
            <summary>
            Represents a constraint on a table or view in the database.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableConstraint.table_view">
            <summary>
            Gets or sets the name of the table or view.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableConstraint.object_type">
            <summary>
            Gets or sets the type of the object (e.g., table, view).
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableConstraint.constraint_type">
            <summary>
            Gets or sets the type of the constraint (e.g., primary key, foreign key).
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableConstraint.constraint_name">
            <summary>
            Gets or sets the name of the constraint.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableConstraint.details">
            <summary>
            Gets or sets additional details about the constraint.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableCreateScript">
            <summary>
            Represents a script for creating a table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableCreateScript.Script">
            <summary>
            Gets or sets the script for creating a table.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableDescription">
            <summary>
            Represents a description of a table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableDescription.Name">
            <summary>
            Gets or sets the name of the table description.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableDescription.Value">
            <summary>
            Gets or sets the value of the table description.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableDescription.Table">
            <summary>
            Gets or sets the table associated with the description.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableForeignKey">
            <summary>
            Represents a foreign key in a database table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableForeignKey.Value">
            <summary>
            Gets or sets the value of the foreign key.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableForeignKey.Name">
            <summary>
            Gets or sets the name of the foreign key.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableForeignKey.SchemaName">
            <summary>
            Gets or sets the schema name of the table containing the foreign key.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableForeignKey.TableName">
            <summary>
            Gets or sets the name of the table containing the foreign key.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableForeignKey.ColumnName">
            <summary>
            Gets or sets the name of the column containing the foreign key.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableForeignKey.ReferencedTable">
            <summary>
            Gets or sets the name of the referenced table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableForeignKey.ReferencedColumn">
            <summary>
            Gets or sets the name of the referenced column.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableFragmentation">
            <summary>
            Represents the fragmentation details of a table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableFragmentation.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableFragmentation.IndexName">
            <summary>
            Gets or sets the name of the index.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableFragmentation.PercentFragmented">
            <summary>
            Gets or sets the percentage of fragmentation.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableIndex">
            <summary>
            Represents an index on a table in the database.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableIndex.IndexName">
            <summary>
            Gets or sets the name of the index.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableIndex.Columns">
            <summary>
            Gets or sets the columns included in the index.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableIndex.IndexType">
            <summary>
            Gets or sets the type of the index.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableIndex.IsUnique">
            <summary>
            Gets or sets a value indicating whether the index is unique.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableIndex.TableView">
            <summary>
            Gets or sets the table or view the index is associated with.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableIndex.ObjectType">
            <summary>
            Gets or sets the type of the object the index is associated with.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableMetadata">
            <summary>
            Represents metadata information about a database table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.Columns">
            <summary>
            Gets or sets the columns of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.CreateScript">
            <summary>
            Gets or sets the create script of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.Descriptions">
            <summary>
            Gets or sets the descriptions of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.Indices">
            <summary>
            Gets or sets the indices of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.ForeignKeys">
            <summary>
            Gets or sets the foreign keys of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.Properties">
            <summary>
            Gets or sets the properties of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.Constraints">
            <summary>
            Gets or sets the constraints of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.TableFragmentations">
            <summary>
            Gets or sets the fragmentation information of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableMetadata.TableDependenciesTree">
            <summary>
            Gets or sets the table dependencies tree.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TableProperty">
            <summary>
            Represents a property of a table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableProperty.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableProperty.Name">
            <summary>
            Gets or sets the name of the property.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TableProperty.Value">
            <summary>
            Gets or sets the value of the property.
            </summary>
        </member>
        <member name="T:API.Domain.Table.TablesMetadata">
            <summary>
            Represents metadata for a table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.Value">
            <summary>
            Gets or sets the value.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.Level">
            <summary>
            Gets or sets the level.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.tableColumns">
            <summary>
            Gets or sets the list of table columns.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.ExtendedPropertyName">
            <summary>
            Gets or sets the name of the extended property.
            </summary>
        </member>
        <member name="P:API.Domain.Table.TablesMetadata.ExtendedPropertyValue">
            <summary>
            Gets or sets the value of the extended property.
            </summary>
        </member>
        <member name="T:API.Domain.Triggers.DatabaseTrigger">
            <summary>
             Represents a database trigger with its properties and associated information.
             </summary>
        </member>
        <member name="P:API.Domain.Triggers.DatabaseTrigger.Name">
            <summary>
            Gets or sets the name of the trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.DatabaseTrigger.Description">
            <summary>
            Gets or sets the description of the trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.DatabaseTrigger.Definition">
            <summary>
            Gets or sets the definition of the trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.DatabaseTrigger.CreateDate">
            <summary>
            Gets or sets the creation date of the trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.DatabaseTrigger.ModifyDate">
            <summary>
            Gets or sets the modification date of the trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.DatabaseTrigger.triggerInfo">
            <summary>
            Gets or sets the additional information about the trigger.
            </summary>
        </member>
        <member name="T:API.Domain.Triggers.TriggerInfo">
            <summary>
            Represents information about a database trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.TriggerName">
            <summary>
            Gets or sets the name of the trigger.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.SchemaName">
            <summary>
            Gets or sets the schema of the object the trigger belongs to.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.ObjectName">
            <summary>
            Gets or sets the name of the table/view the trigger is attached to.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.ObjectType">
            <summary>
            Gets or sets the type of the object (e.g., Table, View).
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.CreateDate">
            <summary>
            Gets or sets the date when the trigger was created.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.ModifyDate">
            <summary>
            Gets or sets the date when the trigger was last modified.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.IsDisabled">
            <summary>
            Gets or sets a value indicating whether the trigger is disabled.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.QuotedIdentifierOn">
            <summary>
            Gets or sets a value indicating whether QUOTED_IDENTIFIER is ON.
            </summary>
        </member>
        <member name="P:API.Domain.Triggers.TriggerInfo.AnsiNullsOn">
            <summary>
            Gets or sets a value indicating whether ANSI_NULLS is ON.
            </summary>
        </member>
        <member name="T:API.Domain.UserDefinedDataType.UpsertExtendedPropertyRequest">
            <summary>
            Request model for upserting an extended property.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UpsertExtendedPropertyRequest.SchemaName">
            <summary>
            Gets or sets the schema name.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UpsertExtendedPropertyRequest.TypeName">
            <summary>
            Gets or sets the type name.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UpsertExtendedPropertyRequest.Description">
            <summary>
            Gets or sets the description.
            </summary>
        </member>
        <member name="T:API.Domain.UserDefinedDataType.UserDefinedDataType">
            <summary>
            Represents a user-defined data type in the system.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataType.Name">
            <summary>
            Gets or sets the full name (Schema + Type) of the user-defined data type.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataType.AllowNulls">
            <summary>
            Gets or sets a value indicating whether nulls are allowed.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataType.BaseTypeName">
            <summary>
            Gets or sets the base system type of the user-defined data type.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataType.Length">
            <summary>
            Gets or sets the maximum length of the user-defined data type.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataType.CreateScript">
            <summary>
            Gets or sets the SQL script to recreate the user-defined data type.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataType.Description">
            <summary>
            Gets or sets the extended property (MS_Description) of the user-defined data type.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataType.userDefinedDataTypeReference">
            <summary>
            Gets or sets the references to other user-defined data types.
            </summary>
        </member>
        <member name="T:API.Domain.UserDefinedDataType.UserDefinedDataTypeReference">
            <summary>
            Represents a reference to a user-defined data type.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataTypeReference.ObjectName">
            <summary>
            Gets or sets the name of the object (Table/View/SP) that references the type.
            </summary>
        </member>
        <member name="P:API.Domain.UserDefinedDataType.UserDefinedDataTypeReference.ObjectType">
            <summary>
            Gets or sets the type of the object (Table, View, SP, etc.).
            </summary>
        </member>
        <member name="T:API.Domain.View.ViewColumns">
            <summary>
            Represents the columns of a view in the database.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewColumns.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewColumns.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewColumns.ColumnOrder">
            <summary>
            Gets or sets the order of the column.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewColumns.DataType">
            <summary>
            Gets or sets the data type of the column.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewColumns.MaxLength">
            <summary>
            Gets or sets the maximum length of the column.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewColumns.Precision">
            <summary>
            Gets or sets the precision of the column.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewColumns.Scale">
            <summary>
            Gets or sets the scale of the column.
            </summary>
        </member>
        <member name="T:API.Domain.View.ViewCreateScript">
            <summary>
            Represents a script to create a view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewCreateScript.createViewScript">
            <summary>
            Gets or sets the script to create a view.
            </summary>
        </member>
        <member name="T:API.Domain.View.ViewDependency">
            <summary>
            Represents a dependency in a view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDependency.name">
            <summary>
            Gets or sets the name of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDependency.type">
            <summary>
            Gets or sets the type of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDependency.updated">
            <summary>
            Gets or sets the updated status of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDependency.selected">
            <summary>
            Gets or sets the selected status of the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDependency.column_name">
            <summary>
            Gets or sets the column name associated with the dependency.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDependency.FullReferenceName">
            <summary>
            Gets or sets the full reference name of the dependency.
            </summary>
        </member>
        <member name="T:API.Domain.View.ViewDetails">
            <summary>
            Represents the details of a view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDetails.ViewName">
            <summary>
            Gets or sets the name of the view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewDetails.ViewExtendedProperties">
            <summary>
            Gets or sets the extended properties of the view.
            </summary>
        </member>
        <member name="T:API.Domain.View.ViewMetaData">
            <summary>
            Represents metadata for a view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewMetaData.ViewProperties">
            <summary>
            Gets or sets the properties of the view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewMetaData.ViewDetails">
            <summary>
            Gets or sets the details of the view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewMetaData.ViewDependencies">
            <summary>
            Gets or sets the dependencies of the view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewMetaData.ViewCreateScript">
            <summary>
            Gets or sets the script to create the view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewMetaData.ViewColumns">
            <summary>
            Gets or sets the columns of the view.
            </summary>
        </member>
        <member name="T:API.Domain.View.ViewProperties">
            <summary>
            Represents the properties of a view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewProperties.uses_ansi_nulls">
            <summary>
            Gets or sets a value indicating whether ANSI nulls are used.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewProperties.uses_quoted_identifier">
            <summary>
            Gets or sets a value indicating whether quoted identifier is used.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewProperties.create_date">
            <summary>
            Gets or sets the creation date of the view.
            </summary>
        </member>
        <member name="P:API.Domain.View.ViewProperties.modify_date">
            <summary>
            Gets or sets the modification date of the view.
            </summary>
        </member>
        <member name="T:API.Domain.XMLSchemaCollections.XmlSchemaCollection">
            <summary>
            Represents a collection of XML schemas.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaCollection.XMLSchemaCollections">
            <summary>
            Gets or sets the XML schema collections.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaCollection.MS_Description">
            <summary>
            Gets or sets the description of the XML schema collection.
            </summary>
        </member>
        <member name="T:API.Domain.XMLSchemaCollections.XmlSchemaDetails">
            <summary>
            Represents the details of an XML schema including SQL script, description, and dependent columns.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaDetails.SqlScript">
            <summary>
            Gets or sets the SQL script associated with the XML schema.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaDetails.MS_Description">
            <summary>
            Gets or sets the description of the XML schema.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaDetails.DependentColumns">
            <summary>
            Gets or sets the dependent columns of the XML schema.
            </summary>
        </member>
        <member name="T:API.Domain.XMLSchemaCollections.XmlSchemaReference">
            <summary>
            Represents a reference to an XML schema collection.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaReference.TableSchema">
            <summary>
            Gets or sets the schema of the table.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaReference.TableName">
            <summary>
            Gets or sets the name of the table.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaReference.ColumnName">
            <summary>
            Gets or sets the name of the column.
            </summary>
        </member>
        <member name="P:API.Domain.XMLSchemaCollections.XmlSchemaReference.XMLSchemaCollection">
            <summary>
            Gets or sets the XML schema collection.
            </summary>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewAggregateFunctionNodeFactory">
            <summary>
            Factory class to create TreeView nodes for Aggregate Functions.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewAggregateFunctionNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewAggregateFunctionNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewAggregateFunctionNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously for Aggregate Functions.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A <see cref="T:API.Domain.LeftMenu.TreeViewJson"/> representing the Aggregate Functions node.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewDatabaseDetailNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for database details.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDatabaseDetailNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewDatabaseDetailNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDatabaseDetailNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously for the specified database.
            </summary>
            <param name="currentDbName">Name of the current database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeViewJson node.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewDatabaseNodeFactory">
            <summary>
            Factory class to create TreeView nodes for databases.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDatabaseNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewDatabaseNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDatabaseNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">Name of the current database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeViewJson node.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewDatabaseTriggerNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for Database Triggers.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDatabaseTriggerNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewDatabaseTriggerNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDatabaseTriggerNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node for Database Triggers asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A <see cref="T:API.Domain.LeftMenu.TreeViewJson"/> object representing the node.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewDataBaseTypeNodeFactory">
            <summary>
            Factory class to create TreeView nodes for Database Types.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDataBaseTypeNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewDataBaseTypeNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewDataBaseTypeNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">Name of the current database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeViewJson node.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewFunctionNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for functions.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewFunctionNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewFunctionNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewFunctionNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">Name of the current database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeViewJson.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewNodeFactory">
            <summary>
            Abstract factory class for creating TreeView nodes.
            </summary>
        </member>
        <member name="F:API.Factory.LeftMenu.TreeViewNodeFactory._baseRepository">
            <summary>
            Base repository instance.
            </summary>
        </member>
        <member name="F:API.Factory.LeftMenu.TreeViewNodeFactory._treeViewConfiguration">
            <summary>
            TreeView configuration instance.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewProgrammabilityNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for Programmability.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewProgrammabilityNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewProgrammabilityNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewProgrammabilityNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">Name of the current database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeViewJson node.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewProjectNodeFactory">
            <summary>
            Factory class for creating TreeView project nodes.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewProjectNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewProjectNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewProjectNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">Name of the current database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeViewJson.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewScalarValuedFunctionNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for Scalar Valued Functions.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewScalarValuedFunctionNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewScalarValuedFunctionNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewScalarValuedFunctionNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node for Scalar Valued Functions asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A <see cref="T:API.Domain.LeftMenu.TreeViewJson"/> representing the Scalar Valued Functions node.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewSecurityNodeFactory">
            <summary>
            Factory class for creating TreeView security nodes.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewSecurityNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewSecurityNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The tree view configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewSecurityNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">Name of the current database.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeViewJson.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewSecurityRolesNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for security roles.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewSecurityRolesNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewSecurityRolesNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewSecurityRolesNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewSecurityUsersNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for security users.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewSecurityUsersNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewSecurityUsersNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewSecurityUsersNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewServerNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for the server.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewServerNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewServerNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewServerNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewStoredProceduresNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for stored procedures.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewStoredProceduresNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewStoredProceduresNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewStoredProceduresNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node for stored procedures asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewTableNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for tables.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewTableNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewTableNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewTableNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously for tables.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewTableValuedFunctionsNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for Table-valued Functions.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewTableValuedFunctionsNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewTableValuedFunctionsNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewTableValuedFunctionsNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node for Table-valued Functions asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewUserDefinedDataTypeNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for user-defined data types.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewUserDefinedDataTypeNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewUserDefinedDataTypeNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewUserDefinedDataTypeNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously for user-defined data types.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewViewNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for views.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewViewNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewViewNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewViewNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node asynchronously for views.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Factory.LeftMenu.TreeViewXmlSchemaCollectionNodeFactory">
            <summary>
            Factory class for creating TreeView nodes for XML Schema Collections.
            </summary>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewXmlSchemaCollectionNodeFactory.#ctor(API.Domain.LeftMenu.TreeViewConfiguration,API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Factory.LeftMenu.TreeViewXmlSchemaCollectionNodeFactory"/> class.
            </summary>
            <param name="treeViewConfiguration">The TreeView configuration.</param>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Factory.LeftMenu.TreeViewXmlSchemaCollectionNodeFactory.CreateNodeAsync(System.String)">
            <summary>
            Creates a TreeView node for XML Schema Collections asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the TreeView JSON.</returns>
        </member>
        <member name="T:API.Repository.Common.BaseRepository">
            <summary>
            Base repository class providing common database operations.
            </summary>
        </member>
        <member name="P:API.Repository.Common.BaseRepository.CurrentDatabases">
            <summary>
            
            </summary>
        </member>
        <member name="P:API.Repository.Common.BaseRepository.DataSource">
            <summary>
            
            </summary>
        </member>
        <member name="F:API.Repository.Common.BaseRepository.cacheEntryOptions">
            <summary>
            
            </summary>
        </member>
        <member name="F:API.Repository.Common.BaseRepository._cache">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.Common.BaseRepository"/> class.
            </summary>
            <param name="connectionString">The database connection string.</param>
            <param name="cache">The distributed cache instance.</param>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.GetDbConnection(System.String)">
            <summary>
            Gets a database connection for the specified database name.
            </summary>
            <param name="currentDbName">The name of the database.</param>
            <returns>An <see cref="T:System.Data.IDbConnection"/> instance.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.ProcessMetadata(System.Collections.Generic.IEnumerable{API.Domain.Table.TablesMetadata})">
            <summary>
            Processes metadata and groups it by table name.
            </summary>
            <param name="metadataList">The metadata list.</param>
            <returns>A list of <see cref="T:API.Domain.Table.TablesMetadata"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.GetDbConnection">
            <summary>
            Gets a database connection.
            </summary>
            <returns>An <see cref="T:System.Data.IDbConnection"/> instance.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadAdvancedServerSettingsAsync(System.Data.IDbConnection)">
            <summary>
            Loads advanced server settings from cache or queries the database.
            </summary>
            <param name="connection">The database connection.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.ServerProperty"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadAggregateFunctionsAsync(System.String)">
            <summary>
            Loads aggregate functions from cache or queries the database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.FunctionInfo"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.GetCurrentDatabaseName">
            <summary>
            Loads the name of the current database.
            </summary>
            <returns>The name of the current database.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadDatabases(System.Data.IDbConnection)">
            <summary>
            Loads databases from cache or queries the database.
            </summary>
            <param name="connection">The database connection.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.DatabaseInfo"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadDatabaseServerName">
            <summary>
            Loads the name of the database server.
            </summary>
            <returns>The name of the database server.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadDatabaseTriggersAsync(System.String)">
            <summary>
            Loads database triggers from cache or queries the database.
            </summary>
            <param name="currentDbName">The name of the current database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.TriggerInfo"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadFromCacheOrQueryAsync``1(System.String,System.String,System.Data.IDbConnection)">
            <summary>
            Loads data from cache or queries the database.
            </summary>
            <typeparam name="T">The type of data to load.</typeparam>
            <param name="cacheKey">The cache key.</param>
            <param name="sqlquery">The SQL query.</param>
            <param name="dbConnections">The database connection.</param>
            <returns>A collection of <typeparamref name="T"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadScalarFunctionsAsync(System.String)">
            <summary>
            Loads scalar functions from cache or queries the database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.FunctionInfo"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadServerPropertiesAsync(System.Data.IDbConnection)">
            <summary>
            Loads server properties from cache or queries the database.
            </summary>
            <param name="connection">The database connection.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.ServerProperty"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadStoredProceduresAsync(System.String)">
            <summary>
            Loads stored procedures from cache or queries the database.
            </summary>
            <param name="currentDbName">The name of the current database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.ProcedureInfo"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadTablesAsync(System.String)">
            <summary>
            Loads tables metadata from cache or queries the database.
            </summary>
            <param name="currentDbName">The name of the current database.</param>
            <returns>A collection of <see cref="T:API.Domain.Table.TablesMetadata"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadTableValuedFunctionsAsync(System.String)">
            <summary>
            Loads table-valued functions from cache or queries the database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.FunctionInfo"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadUserDefinedDataTypesAsync(System.String)">
            <summary>
            Loads user-defined data types from cache or queries the database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.UserType"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadViewAsync(System.String)">
            <summary>
            Loads view metadata from cache or queries the database.
            </summary>
            <param name="currentDbName">The name of the current database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.ViewMetadata"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.LoadXmlSchemaCollectionsAsync(System.String)">
            <summary>
            Loads XML schema collections from cache or queries the database.
            </summary>
            <param name="databaseName">The name of the database.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.DbXmlSchema"/> instances.</returns>
        </member>
        <member name="M:API.Repository.Common.BaseRepository.GetDetailedViewsInfoAsync">
            <summary>
            Gets detailed view information from cache or queries the database.
            </summary>
            <returns>A collection of <see cref="T:API.Domain.View.ViewDetails"/> instances.</returns>
        </member>
        <member name="T:API.Repository.Common.IBaseRepository">
            <summary>
            Interface for base repository operations.
            </summary>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadDatabaseServerName">
            <summary>
            Loads the database server name.
            </summary>
            <returns>The database server name.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.GetCurrentDatabaseName">
            <summary>
            Gets the current database name.
            </summary>
            <returns>The current database name.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.GetDbConnection">
            <summary>
            Gets the database connection.
            </summary>
            <returns>The database connection.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadAdvancedServerSettingsAsync(System.Data.IDbConnection)">
            <summary>
            Loads advanced server settings asynchronously.
            </summary>
            <param name="connection">The database connection.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the server properties.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadDatabases(System.Data.IDbConnection)">
            <summary>
            Loads databases asynchronously.
            </summary>
            <param name="connection">The database connection.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the database information.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadScalarFunctionsAsync(System.String)">
            <summary>
            Loads scalar functions asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the function information.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadServerPropertiesAsync(System.Data.IDbConnection)">
            <summary>
            Loads server properties asynchronously.
            </summary>
            <param name="connection">The database connection.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the server properties.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadStoredProceduresAsync(System.String)">
            <summary>
            Loads stored procedures asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the procedure information.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadTableValuedFunctionsAsync(System.String)">
            <summary>
            Loads table-valued functions asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the function information.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadAggregateFunctionsAsync(System.String)">
            <summary>
            Loads aggregate functions asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the function information.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadDatabaseTriggersAsync(System.String)">
            <summary>
            Loads database triggers asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the trigger information.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadUserDefinedDataTypesAsync(System.String)">
            <summary>
            Loads user-defined data types asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the user-defined data types.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadXmlSchemaCollectionsAsync(System.String)">
            <summary>
            Loads XML schema collections asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the XML schema collections.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadTablesAsync(System.String)">
            <summary>
            Loads tables asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the tables metadata.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.LoadViewAsync(System.String)">
            <summary>
            Loads views asynchronously.
            </summary>
            <param name="currentDbName">The current database name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the view metadata.</returns>
        </member>
        <member name="M:API.Repository.Common.IBaseRepository.GetDetailedViewsInfoAsync">
            <summary>
            Gets detailed views information asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the detailed views information.</returns>
        </member>
        <member name="T:API.Repository.Common.IObjectDependenciesRepository">
            <summary>
            Interface for object dependencies repository.
            </summary>
        </member>
        <member name="M:API.Repository.Common.IObjectDependenciesRepository.ObjectsDependencies(System.String)">
            <summary>
            Gets the dependencies of the specified object.
            </summary>
            <param name="ObjectName">The name of the object.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the dependencies of the object.</returns>
        </member>
        <member name="T:API.Repository.Common.ObjectDependenciesRepository">
            <summary>
            Repository for managing object dependencies.
            </summary>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Logging.ILogger{API.Repository.Common.ObjectDependenciesRepository},Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.Common.ObjectDependenciesRepository"/> class.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="logger">The logger instance.</param>
            <param name="cache">The distributed cache instance.</param>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.GetObjectDependencies(System.String,System.String,System.String)">
            <summary>
            Gets object dependencies based on a query template.
            </summary>
            <param name="cacheKeyPrefix">Cache key prefix.</param>
            <param name="astrObjectName">The object name.</param>
            <param name="sqlQueryTemplate">The SQL query template.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Common.ReferencesModel"/>.</returns>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.GetObjectThatDependsOn(System.String)">
            <summary>
            Gets objects that depend on a specific object.
            </summary>
            <param name="astrObjectName">The object name.</param>
            <returns>A JSON string representing the dependencies.</returns>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.GetObjectOnWhichDepends(System.String)">
            <summary>
            Gets objects on which a specific object depends.
            </summary>
            <param name="astrObjectName">The object name.</param>
            <returns>A JSON string representing the dependencies.</returns>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.AddObjectTypeInfo(System.Collections.Generic.List{API.Domain.Common.ReferencesModel})">
            <summary>
            Adds type information to a list of references.
            </summary>
            <param name="referencesModels">The list of references.</param>
            <returns>The list of references with type information added.</returns>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.GetObjectThatDependsOnJson(System.Collections.Generic.List{API.Domain.Common.ReferencesModel})">
            <summary>
            Converts a list of references to a JSON string representing objects that depend on a specific object.
            </summary>
            <param name="referencesModels">The list of references.</param>
            <returns>A JSON string representing the dependencies.</returns>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.GetObjectOnWhichDependsOnJson(System.Collections.Generic.List{API.Domain.Common.ReferencesModel})">
            <summary>
            Converts a list of references to a JSON string representing objects on which a specific object depends.
            </summary>
            <param name="referencesModels">The list of references.</param>
            <returns>A JSON string representing the dependencies.</returns>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.JsonResult(System.String,System.String,System.String)">
            <summary>
            Generates a JSON result representing the dependency tree.
            </summary>
            <param name="ObjectThatDependsOn">JSON string representing objects that depend on the specified object.</param>
            <param name="ObjectOnWhichDepends">JSON string representing objects on which the specified object depends.</param>
            <param name="ObjectName">The name of the object.</param>
            <returns>A JSON string representing the dependency tree.</returns>
        </member>
        <member name="M:API.Repository.Common.ObjectDependenciesRepository.ObjectsDependencies(System.String)">
            <summary>
            Gets dependencies of a specific table.
            </summary>
            <param name="ObjectName">The name of the table.</param>
            <returns>A JSON string representing the dependencies.</returns>
        </member>
        <member name="T:API.Repository.Database.DatabaseReposititory">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Repository.Database.DatabaseReposititory.#ctor(Microsoft.Extensions.Logging.ILogger{API.Repository.Database.DatabaseReposititory},Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="logger"></param>
            <param name="cache"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:API.Repository.Database.DatabaseReposititory.GetDatabaseMetaData">
            <summary>
            Gets the metadata of the database.
            </summary>
            <returns>A <see cref="T:API.Domain.Database.DatabaseMetaData"/> instance.</returns>
        </member>
        <member name="M:API.Repository.Database.DatabaseReposititory.LoadDatabaseFiles(System.Data.IDbConnection)">
            <summary>
            Loads database files from cache or queries the database.
            </summary>
            <param name="connection">The database connection.</param>
            <returns>A collection of <see cref="T:API.Domain.Database.DatabaseFile"/> instances.</returns>
        </member>
        <member name="T:API.Repository.Database.IDatabaseReposititory">
            <summary>
            Interface for database repository operations.
            </summary>
        </member>
        <member name="M:API.Repository.Database.IDatabaseReposititory.GetDatabaseMetaData">
            <summary>
            Gets the metadata of the database.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the database metadata.</returns>
        </member>
        <member name="T:API.Repository.FullTextCatalog.FullTextCatalogRepository">
            <summary>
            Repository for managing Full Text Catalogs.
            </summary>
        </member>
        <member name="M:API.Repository.FullTextCatalog.FullTextCatalogRepository.#ctor(Microsoft.Extensions.Logging.ILogger{API.Repository.FullTextCatalog.FullTextCatalogRepository},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.FullTextCatalog.FullTextCatalogRepository"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:API.Repository.FullTextCatalog.FullTextCatalogRepository.GetAllFullTextCatalogAsync">
            <summary>
            Gets all Full Text Catalogs asynchronously.
            </summary>
            <returns>A collection of Full Text Catalogs.</returns>
        </member>
        <member name="M:API.Repository.FullTextCatalog.FullTextCatalogRepository.GetFullTextCatalogByNameAsync(System.String)">
            <summary>
            Gets a Full Text Catalog by name asynchronously.
            </summary>
            <param name="catalogName">The name of the Full Text Catalog.</param>
            <returns>The Full Text Catalog if found; otherwise, null.</returns>
        </member>
        <member name="T:API.Repository.FullTextCatalog.IFullTextCatalogRepository">
            <summary>
            Interface for Full Text Catalog Repository
            </summary>
        </member>
        <member name="M:API.Repository.FullTextCatalog.IFullTextCatalogRepository.GetAllFullTextCatalogAsync">
            <summary>
            Gets all full text catalogs asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of full text catalogs.</returns>
        </member>
        <member name="M:API.Repository.FullTextCatalog.IFullTextCatalogRepository.GetFullTextCatalogByNameAsync(System.String)">
            <summary>
            Gets a full text catalog by name asynchronously.
            </summary>
            <param name="catalogName">The name of the catalog.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the full text catalog if found; otherwise, null.</returns>
        </member>
        <member name="T:API.Repository.Functions.AggregateFunctionRepository">
            <summary>
            Repository for managing aggregate functions.
            </summary>
        </member>
        <member name="M:API.Repository.Functions.AggregateFunctionRepository.#ctor(API.Repository.Functions.IBaseSqlFunctionRepository,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.Functions.AggregateFunctionRepository"/> class.
            </summary>
            <param name="iBaseSqlFunctionRepository">The base SQL function repository.</param>
            <param name="configuration">The configuration.</param>
            <param name="cache">The distributed cache.</param>
        </member>
        <member name="M:API.Repository.Functions.AggregateFunctionRepository.FetchAggregateFunctionDescriptionsAsync">
            <summary>
            Fetches the aggregate function descriptions asynchronously.
            </summary>
            <returns>A dictionary of function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.AggregateFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Gets the metadata for a specific function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>The metadata of the function.</returns>
        </member>
        <member name="M:API.Repository.Functions.AggregateFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Upserts the description for a specific function asynchronously.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description of the function.</param>
        </member>
        <member name="T:API.Repository.Functions.BaseSqlFunctionRepository">
            <summary>
            Provides a base repository for SQL functions, including methods to retrieve metadata, parameters, definitions, and dependencies.
            </summary>
        </member>
        <member name="P:API.Repository.Functions.BaseSqlFunctionRepository.FunctionType">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.#ctor(Microsoft.Extensions.Caching.Distributed.IDistributedCache,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            
            </summary>
            <param name="cache"></param>
            <param name="configuration"></param>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Retrieves metadata for a given SQL function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>A task representing the asynchronous operation, containing function metadata.</returns>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.RetrieveFunctionDetailsAsync(System.String)">
            <summary>
            Retrieves details of a given SQL function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>A task representing the asynchronous operation, containing function details.</returns>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.FetchFunctionParametersWithDescriptionsAsync(System.String)">
            <summary>
            Fetches parameters with descriptions for a given SQL function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>A task representing the asynchronous operation, containing function parameters.</returns>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.RetrieveFunctionDefinitionAsync(System.String)">
            <summary>
            Retrieves the definition of a given SQL function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>A task representing the asynchronous operation, containing the function definition.</returns>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.FetchFunctionDependenciesAsync(System.String)">
            <summary>
            Fetches dependencies of a given SQL function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>A task representing the asynchronous operation, containing function dependencies.</returns>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.ModifyFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Modifies the description of an existing SQL function.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The new description to be set.</param>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.AddFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Adds a description to a new SQL function.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description to be added.</param>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Checks if function metadata exists and updates it if found; otherwise, creates a new entry.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The function description.</param>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.FetchScalarFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of all scalar functions in the database.
            If a function appears multiple times, it merges descriptions.
            </summary>
            <returns>A dictionary of function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.FetchTableFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of all table functions in the database.
            If a function appears multiple times, it removes duplicates.
            </summary>
            <returns>A dictionary of function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.BaseSqlFunctionRepository.FetchAggregateFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of all aggregate functions in the database.
            If a function appears multiple times, it removes duplicates.
            </summary>
            <returns>A dictionary of function names and their descriptions.</returns>
        </member>
        <member name="T:API.Repository.Functions.IAggregateFunctionRepository">
            <summary>
            Interface for repository handling aggregate functions.
            </summary>
        </member>
        <member name="M:API.Repository.Functions.IAggregateFunctionRepository.FetchAggregateFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of aggregate functions.
            </summary>
            <returns>A dictionary with function names as keys and descriptions as values.</returns>
        </member>
        <member name="M:API.Repository.Functions.IAggregateFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Gets metadata for a specific function.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>Metadata of the specified function.</returns>
        </member>
        <member name="M:API.Repository.Functions.IAggregateFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Upserts a description for a specific function.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description of the function.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.Functions.IBaseSqlFunctionRepository">
            <summary>
            Interface for SQL function repository operations.
            </summary>
        </member>
        <member name="P:API.Repository.Functions.IBaseSqlFunctionRepository.FunctionType">
            <summary>
            Gets or sets the type of the function.
            </summary>
        </member>
        <member name="M:API.Repository.Functions.IBaseSqlFunctionRepository.FetchAggregateFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of aggregate functions asynchronously.
            </summary>
            <returns>A dictionary containing function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.IBaseSqlFunctionRepository.FetchScalarFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of scalar functions asynchronously.
            </summary>
            <returns>A dictionary containing function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.IBaseSqlFunctionRepository.FetchTableFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of table functions asynchronously.
            </summary>
            <returns>A dictionary containing function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.IBaseSqlFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Gets metadata for a specific function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>The metadata of the specified function.</returns>
        </member>
        <member name="M:API.Repository.Functions.IBaseSqlFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Upserts a function description asynchronously.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description of the function.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.Functions.IScalarFunctionRepository">
            <summary>
            Interface for scalar function repository operations.
            </summary>
        </member>
        <member name="M:API.Repository.Functions.IScalarFunctionRepository.FetchAggregateFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of aggregate functions.
            </summary>
            <returns>A dictionary with function names as keys and descriptions as values.</returns>
        </member>
        <member name="M:API.Repository.Functions.IScalarFunctionRepository.FetchScalarFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of scalar functions.
            </summary>
            <returns>A dictionary with function names as keys and descriptions as values.</returns>
        </member>
        <member name="M:API.Repository.Functions.IScalarFunctionRepository.FetchTableFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of table functions.
            </summary>
            <returns>A dictionary with function names as keys and descriptions as values.</returns>
        </member>
        <member name="M:API.Repository.Functions.IScalarFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Gets metadata for a specific function.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>The metadata of the specified function.</returns>
        </member>
        <member name="M:API.Repository.Functions.IScalarFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Upserts a function description.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description of the function.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.Functions.ITableValuedFunctionRepository">
            <summary>
            Interface for repository handling table-valued functions.
            </summary>
        </member>
        <member name="M:API.Repository.Functions.ITableValuedFunctionRepository.FetchTableFunctionDescriptionsAsync">
            <summary>
            Fetches descriptions of table-valued functions.
            </summary>
            <returns>A dictionary with function names as keys and descriptions as values.</returns>
        </member>
        <member name="M:API.Repository.Functions.ITableValuedFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Gets metadata for a specific table-valued function.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>Metadata of the specified function.</returns>
        </member>
        <member name="M:API.Repository.Functions.ITableValuedFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Upserts a description for a specific table-valued function.
            </summary>
            <param name="schemaName">The schema name of the function.</param>
            <param name="functionName">The name of the function.</param>
            <param name="description">The description of the function.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.Functions.ScalarFunctionRepository">
            <summary>
            Repository for handling scalar functions.
            </summary>
        </member>
        <member name="M:API.Repository.Functions.ScalarFunctionRepository.#ctor(API.Repository.Functions.IBaseSqlFunctionRepository,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.Functions.ScalarFunctionRepository"/> class.
            </summary>
            <param name="iBaseSqlFunctionRepository">The base SQL function repository.</param>
            <param name="configuration">The configuration.</param>
            <param name="cache">The distributed cache.</param>
        </member>
        <member name="M:API.Repository.Functions.ScalarFunctionRepository.FetchScalarFunctionDescriptionsAsync">
            <summary>
            Fetches the descriptions of scalar functions asynchronously.
            </summary>
            <returns>A dictionary containing function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.ScalarFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Gets the metadata of a specific function asynchronously.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>The metadata of the function.</returns>
        </member>
        <member name="M:API.Repository.Functions.ScalarFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Upserts the description of a function asynchronously.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="functionName">The function name.</param>
            <param name="description">The description of the function.</param>
        </member>
        <member name="T:API.Repository.Functions.TableValuedFunctionRepository">
            <summary>
            Repository for handling table-valued functions.
            </summary>
        </member>
        <member name="M:API.Repository.Functions.TableValuedFunctionRepository.#ctor(API.Repository.Functions.IBaseSqlFunctionRepository,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.Functions.TableValuedFunctionRepository"/> class.
            </summary>
            <param name="IBaseSqlFunctionRepository">The base SQL function repository.</param>
            <param name="configuration">The configuration.</param>
            <param name="cache">The distributed cache.</param>
        </member>
        <member name="M:API.Repository.Functions.TableValuedFunctionRepository.FetchTableFunctionDescriptionsAsync">
            <summary>
            Fetches the descriptions of table-valued functions.
            </summary>
            <returns>A dictionary containing function names and their descriptions.</returns>
        </member>
        <member name="M:API.Repository.Functions.TableValuedFunctionRepository.GetFunctionMetadataAsync(System.String)">
            <summary>
            Gets the metadata of a specific function.
            </summary>
            <param name="functionName">The name of the function.</param>
            <returns>The metadata of the function.</returns>
        </member>
        <member name="M:API.Repository.Functions.TableValuedFunctionRepository.UpsertFunctionDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Upserts the description of a specific function.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="functionName">The function name.</param>
            <param name="description">The description of the function.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.LeftMenu.ILeftMenuRepository">
            <summary>
            Interface for Left Menu Repository
            </summary>
        </member>
        <member name="M:API.Repository.LeftMenu.ILeftMenuRepository.GenerateLeftMenuJsonAsync">
            <summary>
            Generates the left menu JSON asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a list of TreeViewJson.</returns>
        </member>
        <member name="M:API.Repository.LeftMenu.ILeftMenuRepository.GetLeftMenuAsync">
            <summary>
            Gets the left menu asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains the left menu as a string.</returns>
        </member>
        <member name="T:API.Repository.LeftMenu.LeftMenuRepository">
            <summary>
            Repository class for managing the left menu.
            </summary>
        </member>
        <member name="M:API.Repository.LeftMenu.LeftMenuRepository.#ctor(Microsoft.Extensions.Logging.ILogger{API.Repository.LeftMenu.LeftMenuRepository},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.LeftMenu.LeftMenuRepository"/> class.
            </summary>
            <param name="connectionString">The database connection string.</param>
            <param name="logger">The logger instance.</param>
            <param name="cache">The distributed cache instance.</param>
        </member>
        <member name="M:API.Repository.LeftMenu.LeftMenuRepository.GetLeftMenuAsync">
            <summary>
            Gets the left menu asynchronously.
            </summary>
            <returns>A JSON string representing the left menu.</returns>
        </member>
        <member name="M:API.Repository.LeftMenu.LeftMenuRepository.GenerateLeftMenuJsonAsync">
            <summary>
            Generates the left menu JSON asynchronously.
            </summary>
            <returns>A list of <see cref="T:API.Domain.LeftMenu.TreeViewJson"/> representing the left menu.</returns>
        </member>
        <member name="T:API.Repository.SchemaRepository.ISchemaRepository">
            <summary>
            Interface for schema repository operations.
            </summary>
        </member>
        <member name="M:API.Repository.SchemaRepository.ISchemaRepository.GetAllSchemaMetadataAsync">
            <summary>
            Gets all schema metadata asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of schema descriptions.</returns>
        </member>
        <member name="M:API.Repository.SchemaRepository.ISchemaRepository.GetSchemaMetadataAsync(System.String)">
            <summary>
            Gets the metadata of a specific schema asynchronously.
            </summary>
            <param name="schemaName">The name of the schema.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the schema metadata.</returns>
        </member>
        <member name="T:API.Repository.SchemaRepository.SchemaRepository">
            <summary>
            Repository class for handling schema-related database operations.
            </summary>
        </member>
        <member name="M:API.Repository.SchemaRepository.SchemaRepository.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.SchemaRepository.SchemaRepository"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:API.Repository.SchemaRepository.SchemaRepository.GetAllSchemaMetadataAsync">
            <summary>
            Asynchronously retrieves all schema metadata.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of <see cref="T:API.Domain.Schemas.SchemaDescription"/>.</returns>
        </member>
        <member name="M:API.Repository.SchemaRepository.SchemaRepository.GetSchemaMetadataAsync(System.String)">
            <summary>
            Asynchronously retrieves metadata for a specific schema.
            </summary>
            <param name="schemaName">The name of the schema.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the <see cref="T:API.Domain.Schemas.SchemaMetadata"/> for the specified schema.</returns>
        </member>
        <member name="T:API.Repository.StoreProcedure.IStoredProcedureRepository">
            <summary>
            Interface for stored procedure repository.
            </summary>
        </member>
        <member name="M:API.Repository.StoreProcedure.IStoredProcedureRepository.GetAllStoredProceduresAsync">
            <summary>
            Gets all stored procedures asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of stored procedure information.</returns>
        </member>
        <member name="M:API.Repository.StoreProcedure.IStoredProcedureRepository.GetStoredProcedureMetadataAsync(System.String)">
            <summary>
            Gets the metadata of a stored procedure asynchronously.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the stored procedure metadata.</returns>
        </member>
        <member name="M:API.Repository.StoreProcedure.IStoredProcedureRepository.MergeParameterDescriptionAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Merges the description of a parameter asynchronously.
            </summary>
            <param name="schemaName">The name of the schema.</param>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="description">The description of the parameter.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:API.Repository.StoreProcedure.IStoredProcedureRepository.MergeStoredProcedureDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Merges the description of a stored procedure asynchronously.
            </summary>
            <param name="schemaName">The name of the schema.</param>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <param name="description">The description of the stored procedure.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.StoreProcedure.StoredProcedureRepository">
            <summary>
            Repository for handling stored procedures.
            </summary>
        </member>
        <member name="M:API.Repository.StoreProcedure.StoredProcedureRepository.#ctor(API.Repository.Common.IObjectDependenciesRepository,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.StoreProcedure.StoredProcedureRepository"/> class.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
        </member>
        <member name="M:API.Repository.StoreProcedure.StoredProcedureRepository.CreateConnection">
            <summary>
            Creates a new database connection.
            </summary>
            <returns>A new <see cref="T:System.Data.IDbConnection"/> instance.</returns>
        </member>
        <member name="M:API.Repository.StoreProcedure.StoredProcedureRepository.GetAllStoredProceduresAsync">
            <summary>
            Gets all stored procedures asynchronously.
            </summary>
            <returns>A collection of <see cref="T:API.Domain.StoredProcedure.StoredProcedureInfo"/>.</returns>
        </member>
        <member name="M:API.Repository.StoreProcedure.StoredProcedureRepository.GetStoredProcedureMetadataAsync(System.String)">
            <summary>
            Gets the metadata of a stored procedure asynchronously.
            </summary>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <returns>A <see cref="T:API.Domain.StoredProcedure.StoredProcedureMeta"/> instance containing the metadata.</returns>
        </member>
        <member name="M:API.Repository.StoreProcedure.StoredProcedureRepository.MergeStoredProcedureDescriptionAsync(System.String,System.String,System.String)">
            <summary>
            Merges the description of a stored procedure asynchronously.
            </summary>
            <param name="schemaName">The schema name of the stored procedure.</param>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <param name="description">The description to merge.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:API.Repository.StoreProcedure.StoredProcedureRepository.MergeParameterDescriptionAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Merges the description of a stored procedure parameter asynchronously.
            </summary>
            <param name="schemaName">The schema name of the stored procedure.</param>
            <param name="storedProcedureName">The name of the stored procedure.</param>
            <param name="parameterName">The name of the parameter.</param>
            <param name="description">The description to merge.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.Table.ITableRepository">
            <summary>
            Interface for table repository operations.
            </summary>
        </member>
        <member name="M:API.Repository.Table.ITableRepository.LoadTableMetadata(System.String)">
            <summary>
            Loads the metadata for a specified table.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the table metadata.</returns>
        </member>
        <member name="M:API.Repository.Table.ITableRepository.UpdateTableColumnExtendedPropertyAsync(API.Domain.Table.TableColumns)">
            <summary>
            Updates the extended property of a table column asynchronously.
            </summary>
            <param name="tableColumns">The table columns information.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:API.Repository.Table.ITableRepository.UpdateTableExtendedProperty(API.Domain.Table.TableDescription)">
            <summary>
            Updates the extended property of a table.
            </summary>
            <param name="tableDescription">The table description information.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.Table.ITablesRepository">
            <summary>
            Interface for table repository to load table metadata.
            </summary>
        </member>
        <member name="M:API.Repository.Table.ITablesRepository.LoadTablesAsync">
            <summary>
            Asynchronously loads the table metadata.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of table metadata.</returns>
        </member>
        <member name="T:API.Repository.Table.TableRepository">
            <summary>
            Service for retrieving information about database tables.
            </summary>
        </member>
        <member name="M:API.Repository.Table.TableRepository.#ctor(Microsoft.Extensions.Logging.ILogger{API.Repository.Table.TableRepository},API.Repository.Common.IObjectDependenciesRepository,Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Constructor for the TableInfoService.
            </summary>
            <param name="connectionString">Database connection string.</param>
            <param name="logger">Logger instance for logging information or errors.</param>
            <param name="cache">Distributed cache instance for caching data.</param>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetDetailedTablePropertiesAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets detailed properties of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableProperty"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTableDescriptionAsync(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets descriptions of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="schemaName">The schema name of the table.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableDescription"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTablePropertiesAsync(System.Data.IDbConnection,System.String,System.String)">
            <summary>
            Gets properties of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="schemaName">The schema name of the table.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableProperty"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTableColumnInfoAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets column information of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableColumns"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTableCreateScriptAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets the create script of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>The create script as a string.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTableIndexesAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets indexes of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableIndex"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTableForeignKeysAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets foreign keys of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableForeignKey"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTableTableConstraintAsync(System.Data.IDbConnection,System.String)">
            <summary>
            Gets constraints of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableConstraint"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.UpdateTableExtendedProperty(API.Domain.Table.TableDescription)">
            <summary>
            Updates extended property for a specific table.
            </summary>
            <param name="tableDescription">The table description to update.</param>
        </member>
        <member name="M:API.Repository.Table.TableRepository.UpdateTableColumnExtendedPropertyAsync(API.Domain.Table.TableColumns)">
            <summary>
            Updates extended property for a specific table column.
            </summary>
            <param name="tableColumns">The table column description to update.</param>
        </member>
        <member name="M:API.Repository.Table.TableRepository.GetTableFragmentation(System.Data.IDbConnection,System.String)">
            <summary>
            Gets fragmentation details of a specific table.
            </summary>
            <param name="db">Database connection.</param>
            <param name="tableName">The name of the table.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableFragmentation"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.LoadTableFragmentationDetailsAsync(System.Data.IDbConnection)">
            <summary>
            Loads fragmentation details for all tables.
            </summary>
            <param name="db">Database connection.</param>
            <returns>An enumerable of <see cref="T:API.Domain.Table.TableFragmentation"/>.</returns>
        </member>
        <member name="M:API.Repository.Table.TableRepository.LoadTableMetadata(System.String)">
            <summary>
            Loads metadata for a specific table.
            </summary>
            <param name="tableName">The name of the table.</param>
            <returns>A <see cref="T:API.Domain.Table.TableMetadata"/> object containing detailed information about the table.</returns>
        </member>
        <member name="T:API.Repository.Table.TablesRepository">
            <summary>
            Repository class for handling table-related database operations.
            </summary>
        </member>
        <member name="M:API.Repository.Table.TablesRepository.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Constructor for the TableInfoService.
            </summary>
            <param name="databaseSettings">Database settings injected via IOptions.</param>
            <param name="logger">Logger instance for logging information or errors.</param>
        </member>
        <member name="M:API.Repository.Table.TablesRepository.LoadTablesAsync">
            <summary>
            Loads tables metadata from cache or queries the database.
            </summary>
            <returns>A collection of <see cref="T:API.Domain.Table.TablesMetadata"/> instances.</returns>
        </member>
        <member name="T:API.Repository.Triggers.DatabaseTriggerRepository">
            <summary>
            Repository for managing database triggers.
            </summary>
        </member>
        <member name="M:API.Repository.Triggers.DatabaseTriggerRepository.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            
            </summary>
            <param name="configuration"></param>
            <param name="cache"></param>
        </member>
        <member name="M:API.Repository.Triggers.DatabaseTriggerRepository.GetAllTriggersAsync">
            <summary>
            Retrieves all database triggers.
            </summary>
        </member>
        <member name="M:API.Repository.Triggers.DatabaseTriggerRepository.GetTriggerByNameAsync(System.String)">
            <summary>
            Retrieves detailed information about a specific trigger by name.
            </summary>
        </member>
        <member name="M:API.Repository.Triggers.DatabaseTriggerRepository.MergeTriggerPropertyAsync(System.String,System.String)">
            <summary>
            Merges (updates if exists, otherwise creates) the extended property of a database trigger.
            </summary>
        </member>
        <member name="T:API.Repository.Triggers.IDatabaseTriggerRepository">
            <summary>
            Interface for database trigger repository.
            </summary>
        </member>
        <member name="M:API.Repository.Triggers.IDatabaseTriggerRepository.GetAllTriggersAsync">
            <summary>
            Gets all database triggers asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of database triggers.</returns>
        </member>
        <member name="M:API.Repository.Triggers.IDatabaseTriggerRepository.GetTriggerByNameAsync(System.String)">
            <summary>
            Gets a database trigger by name asynchronously.
            </summary>
            <param name="triggerName">The name of the trigger.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the database trigger if found; otherwise, null.</returns>
        </member>
        <member name="M:API.Repository.Triggers.IDatabaseTriggerRepository.MergeTriggerPropertyAsync(System.String,System.String)">
            <summary>
            Merges the trigger property asynchronously.
            </summary>
            <param name="triggerName">The name of the trigger.</param>
            <param name="description">The description of the trigger.</param>
            <returns>A task that represents the asynchronous operation. The task result contains a boolean value indicating whether the merge was successful.</returns>
        </member>
        <member name="T:API.Repository.UserDefinedDataType.IUserDefinedDataTypeRepository">
            <summary>
            Interface for User Defined Data Type Repository
            </summary>
        </member>
        <member name="M:API.Repository.UserDefinedDataType.IUserDefinedDataTypeRepository.GetAllUserDefinedDataTypesAsync">
            <summary>
            Gets all user defined data types asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of user defined data types.</returns>
        </member>
        <member name="M:API.Repository.UserDefinedDataType.IUserDefinedDataTypeRepository.GetUserDefinedDataTypeWithExtendedPropertiesAsync(System.String,System.String)">
            <summary>
            Gets a user defined data type with extended properties asynchronously.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="typeName">The type name.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the user defined data type with extended properties.</returns>
        </member>
        <member name="M:API.Repository.UserDefinedDataType.IUserDefinedDataTypeRepository.UpsertUserDefinedDataTypeExtendedPropertyAsync(System.String,System.String,System.String)">
            <summary>
            Upserts a user defined data type extended property asynchronously.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="typeName">The type name.</param>
            <param name="description">The description.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="T:API.Repository.UserDefinedDataType.UserDefinedDataTypeRepository">
            <summary>
            Repository for managing user-defined data types.
            </summary>
        </member>
        <member name="M:API.Repository.UserDefinedDataType.UserDefinedDataTypeRepository.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.UserDefinedDataType.UserDefinedDataTypeRepository"/> class.
            </summary>
            <param name="configuration">The configuration.</param>
            <param name="cache">The distributed cache.</param>
        </member>
        <member name="M:API.Repository.UserDefinedDataType.UserDefinedDataTypeRepository.GetAllUserDefinedDataTypesAsync">
            <summary>
            Gets all user-defined data types asynchronously.
            </summary>
            <returns>A collection of user-defined data types.</returns>
        </member>
        <member name="M:API.Repository.UserDefinedDataType.UserDefinedDataTypeRepository.GetUserDefinedDataTypeWithExtendedPropertiesAsync(System.String,System.String)">
            <summary>
            Gets a user-defined data type with extended properties asynchronously.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="typeName">The type name.</param>
            <returns>The user-defined data type with extended properties.</returns>
        </member>
        <member name="M:API.Repository.UserDefinedDataType.UserDefinedDataTypeRepository.UpsertUserDefinedDataTypeExtendedPropertyAsync(System.String,System.String,System.String)">
            <summary>
            Upserts a user-defined data type extended property asynchronously.
            </summary>
            <param name="schemaName">The schema name.</param>
            <param name="typeName">The type name.</param>
            <param name="description">The description.</param>
        </member>
        <member name="T:API.Repository.View.IViewsRepository">
            <summary>
            Interface for accessing view-related data.
            </summary>
        </member>
        <member name="M:API.Repository.View.IViewsRepository.GetDetailedViewsInfoAsync">
            <summary>
            Gets detailed information about views asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of view details.</returns>
        </member>
        <member name="M:API.Repository.View.IViewsRepository.GetViewDependenciesAsync">
            <summary>
            Gets view dependencies asynchronously.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a collection of view dependencies.</returns>
        </member>
        <member name="M:API.Repository.View.IViewsRepository.GetViewMetaDataAsync(System.String)">
            <summary>
            Gets metadata for a specific view asynchronously.
            </summary>
            <param name="viewName">The name of the view.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the view metadata.</returns>
        </member>
        <member name="T:API.Repository.View.ViewsRepository">
            <summary>
            Repository for handling view-related database operations.
            </summary>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.#ctor(Microsoft.Extensions.Logging.ILogger{API.Repository.View.ViewsRepository},Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Repository.View.ViewsRepository"/> class.
            </summary>
            <param name="connectionString">The database connection string.</param>
            <param name="logger">The logger instance.</param>
            <param name="cache">The distributed cache instance.</param>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.GetViewDependenciesAsync">
            <summary>
            Gets the dependencies of the specified view.
            </summary>
            <returns>A collection of view dependencies.</returns>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.GetViewPropertiesAsync">
            <summary>
            Gets the properties of the specified view.
            </summary>
            <returns>A collection of view properties.</returns>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.GetViewColumnsAsync">
            <summary>
            Gets the columns of the specified view.
            </summary>
            <returns>A collection of view columns.</returns>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.GetViewCreateScriptAsync">
            <summary>
            Gets the create script of the specified view.
            </summary>
            <returns>The view create script.</returns>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.GetViewNameWithDescriptionAsync">
            <summary>
            Gets the name and description of the specified view.
            </summary>
            <returns>A collection of view details.</returns>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.GetViewMetaDataAsync(System.String)">
            <summary>
            Gets the metadata of the specified view.
            </summary>
            <param name="viewName">The name of the view.</param>
            <returns>The view metadata.</returns>
        </member>
        <member name="M:API.Repository.View.ViewsRepository.GetDetailedViewsInfoAsync">
            <summary>
            Gets detailed view information from cache or queries the database.
            </summary>
            <returns>A collection of <see cref="T:API.Domain.View.ViewDetails"/> instances.</returns>
        </member>
        <member name="T:API.Repository.XMLSchemaCollections.IXmlSchemaRepository">
            <summary>
            Interface for XML Schema Repository
            </summary>
        </member>
        <member name="M:API.Repository.XMLSchemaCollections.IXmlSchemaRepository.GetAllXmlSchemaCollections">
            <summary>
            Gets all XML schema collections.
            </summary>
            <returns>An enumerable of XML schema collections.</returns>
        </member>
        <member name="M:API.Repository.XMLSchemaCollections.IXmlSchemaRepository.GetXmlSchemaDetails(System.String)">
            <summary>
            Gets the details of a specific XML schema collection.
            </summary>
            <param name="schemaCollectionName">The name of the schema collection.</param>
            <returns>The details of the XML schema collection.</returns>
        </member>
        <member name="M:API.Repository.XMLSchemaCollections.IXmlSchemaRepository.GetXmlSchemaReferences(System.String)">
            <summary>
            Gets the references of a specific XML schema collection.
            </summary>
            <param name="schemaCollectionName">The name of the schema collection.</param>
            <returns>An enumerable of XML schema references.</returns>
        </member>
        <member name="T:API.Repository.XMLSchemaCollections.XmlSchemaRepository">
            <summary>
            Repository class for handling XML Schema Collections
            </summary>
        </member>
        <member name="M:API.Repository.XMLSchemaCollections.XmlSchemaRepository.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.Extensions.Caching.Distributed.IDistributedCache)">
            <summary>
            Constructor to initialize the connection string
            </summary>
            <param name="connectionString">The connection string to the database</param>
        </member>
        <member name="M:API.Repository.XMLSchemaCollections.XmlSchemaRepository.GetXmlSchemaDetails(System.String)">
            <summary>
            Method to fetch XML Schema Details
            </summary>
            <param name="schemaCollectionName">The name of the schema collection</param>
            <returns>Returns the details of the XML schema</returns>
        </member>
        <member name="M:API.Repository.XMLSchemaCollections.XmlSchemaRepository.GetAllXmlSchemaCollections">
            <summary>
            Method to fetch all XML Schema Collections
            </summary>
            <returns>Returns a collection of all XML schema collections</returns>
        </member>
        <member name="M:API.Repository.XMLSchemaCollections.XmlSchemaRepository.GetXmlSchemaReferences(System.String)">
            <summary>
            Method to fetch XML Schema References
            </summary>
            <param name="schemaCollectionName">The name of the schema collection</param>
            <returns>Returns a collection of XML schema references</returns>
        </member>
        <member name="T:API.Service.LeftMenu.Service.TreeViewJsonGenerator">
            <summary>
            Generates JSON structure for TreeView.
            </summary>
        </member>
        <member name="M:API.Service.LeftMenu.Service.TreeViewJsonGenerator.#ctor(API.Repository.Common.IBaseRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:API.Service.LeftMenu.Service.TreeViewJsonGenerator"/> class.
            </summary>
            <param name="baseRepository">The base repository.</param>
        </member>
        <member name="M:API.Service.LeftMenu.Service.TreeViewJsonGenerator.PrepareTreeViewConfigurationApi">
            <summary>
            Prepares the TreeView configuration API.
            </summary>
            <returns>The TreeView configuration.</returns>
        </member>
        <member name="M:API.Service.LeftMenu.Service.TreeViewJsonGenerator.GetProjectStructureAsync">
            <summary>
            Gets the project structure asynchronously.
            </summary>
            <returns>The TreeView JSON structure.</returns>
        </member>
    </members>
</doc>
